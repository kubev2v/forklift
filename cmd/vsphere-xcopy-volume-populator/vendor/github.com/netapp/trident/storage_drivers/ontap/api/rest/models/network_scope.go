// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetworkScope Set to "svm" for interfaces owned by an SVM. Otherwise, set to "cluster".
//
// swagger:model network_scope
type NetworkScope string

func NewNetworkScope(value NetworkScope) *NetworkScope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NetworkScope.
func (m NetworkScope) Pointer() *NetworkScope {
	return &m
}

const (

	// NetworkScopeSvm captures enum value "svm"
	NetworkScopeSvm NetworkScope = "svm"

	// NetworkScopeCluster captures enum value "cluster"
	NetworkScopeCluster NetworkScope = "cluster"
)

// for schema
var networkScopeEnum []interface{}

func init() {
	var res []NetworkScope
	if err := json.Unmarshal([]byte(`["svm","cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkScopeEnum = append(networkScopeEnum, v)
	}
}

func (m NetworkScope) validateNetworkScopeEnum(path, location string, value NetworkScope) error {
	if err := validate.EnumCase(path, location, value, networkScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this network scope
func (m NetworkScope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetworkScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this network scope based on context it is used
func (m NetworkScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
