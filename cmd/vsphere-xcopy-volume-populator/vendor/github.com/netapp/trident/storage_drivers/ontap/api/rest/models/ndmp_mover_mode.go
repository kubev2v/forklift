// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NdmpMoverMode The modes of a NDMP mover instance.
//
// swagger:model ndmp_mover_mode
type NdmpMoverMode string

func NewNdmpMoverMode(value NdmpMoverMode) *NdmpMoverMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NdmpMoverMode.
func (m NdmpMoverMode) Pointer() *NdmpMoverMode {
	return &m
}

const (

	// NdmpMoverModeRead captures enum value "read"
	NdmpMoverModeRead NdmpMoverMode = "read"

	// NdmpMoverModeWrite captures enum value "write"
	NdmpMoverModeWrite NdmpMoverMode = "write"

	// NdmpMoverModeData captures enum value "data"
	NdmpMoverModeData NdmpMoverMode = "data"

	// NdmpMoverModeRaw captures enum value "raw"
	NdmpMoverModeRaw NdmpMoverMode = "raw"
)

// for schema
var ndmpMoverModeEnum []interface{}

func init() {
	var res []NdmpMoverMode
	if err := json.Unmarshal([]byte(`["read","write","data","raw"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ndmpMoverModeEnum = append(ndmpMoverModeEnum, v)
	}
}

func (m NdmpMoverMode) validateNdmpMoverModeEnum(path, location string, value NdmpMoverMode) error {
	if err := validate.EnumCase(path, location, value, ndmpMoverModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ndmp mover mode
func (m NdmpMoverMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNdmpMoverModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ndmp mover mode based on context it is used
func (m NdmpMoverMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
