// Code generated by go-swagger; DO NOT EDIT.

package svm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSvmCollectionGetParams creates a new SvmCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSvmCollectionGetParams() *SvmCollectionGetParams {
	return &SvmCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSvmCollectionGetParamsWithTimeout creates a new SvmCollectionGetParams object
// with the ability to set a timeout on a request.
func NewSvmCollectionGetParamsWithTimeout(timeout time.Duration) *SvmCollectionGetParams {
	return &SvmCollectionGetParams{
		timeout: timeout,
	}
}

// NewSvmCollectionGetParamsWithContext creates a new SvmCollectionGetParams object
// with the ability to set a context for a request.
func NewSvmCollectionGetParamsWithContext(ctx context.Context) *SvmCollectionGetParams {
	return &SvmCollectionGetParams{
		Context: ctx,
	}
}

// NewSvmCollectionGetParamsWithHTTPClient creates a new SvmCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSvmCollectionGetParamsWithHTTPClient(client *http.Client) *SvmCollectionGetParams {
	return &SvmCollectionGetParams{
		HTTPClient: client,
	}
}

/*
SvmCollectionGetParams contains all the parameters to send to the API endpoint

	for the svm collection get operation.

	Typically these are written to a http.Request.
*/
type SvmCollectionGetParams struct {

	/* AggregatesName.

	   Filter by aggregates.name
	*/
	AggregatesName *string

	/* AggregatesUUID.

	   Filter by aggregates.uuid
	*/
	AggregatesUUID *string

	/* AntiRansomwareDefaultVolumeState.

	   Filter by anti_ransomware_default_volume_state
	*/
	AntiRansomwareDefaultVolumeState *string

	/* AutoEnableActivityTracking.

	   Filter by auto_enable_activity_tracking.
	*/
	AutoEnableActivityTracking *bool

	/* AutoEnableAnalytics.

	   Filter by auto_enable_analytics.
	*/
	AutoEnableAnalytics *bool

	/* CertificateUUID.

	   Filter by certificate.uuid
	*/
	CertificateUUID *string

	/* CifsAdDomainFqdn.

	   Filter by cifs.ad_domain.fqdn
	*/
	CifsAdDomainFqdn *string

	/* CifsAdDomainOrganizationalUnit.

	   Filter by cifs.ad_domain.organizational_unit
	*/
	CifsAdDomainOrganizationalUnit *string

	/* CifsAllowed.

	   Filter by cifs.allowed
	*/
	CifsAllowed *bool

	/* CifsEnabled.

	   Filter by cifs.enabled
	*/
	CifsEnabled *bool

	/* CifsName.

	   Filter by cifs.name
	*/
	CifsName *string

	/* Comment.

	   Filter by comment
	*/
	Comment *string

	/* DNSDomains.

	   Filter by dns.domains
	*/
	DNSDomains *string

	/* DNSServers.

	   Filter by dns.servers
	*/
	DNSServers *string

	/* FcInterfacesDataProtocol.

	   Filter by fc_interfaces.data_protocol
	*/
	FcInterfacesDataProtocol *string

	/* FcInterfacesName.

	   Filter by fc_interfaces.name
	*/
	FcInterfacesName *string

	/* FcpAllowed.

	   Filter by fcp.allowed
	*/
	FcpAllowed *bool

	/* FcpEnabled.

	   Filter by fcp.enabled
	*/
	FcpEnabled *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* IpspaceName.

	   Filter by ipspace.name
	*/
	IpspaceName *string

	/* IpspaceUUID.

	   Filter by ipspace.uuid
	*/
	IpspaceUUID *string

	/* IscsiAllowed.

	   Filter by iscsi.allowed
	*/
	IscsiAllowed *bool

	/* IscsiEnabled.

	   Filter by iscsi.enabled
	*/
	IscsiEnabled *bool

	/* Language.

	   Filter by language
	*/
	Language *string

	/* LdapAdDomain.

	   Filter by ldap.ad_domain
	*/
	LdapAdDomain *string

	/* LdapBaseDn.

	   Filter by ldap.base_dn
	*/
	LdapBaseDn *string

	/* LdapBindDn.

	   Filter by ldap.bind_dn
	*/
	LdapBindDn *string

	/* LdapEnabled.

	   Filter by ldap.enabled
	*/
	LdapEnabled *bool

	/* LdapServers.

	   Filter by ldap.servers
	*/
	LdapServers *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* MaxVolumes.

	   Filter max_volumes
	*/
	MaxVolumes *string

	/* Name.

	   Filter by name
	*/
	Name *string

	/* NdmpAllowed.

	   Filter by ndmp.allowed
	*/
	NdmpAllowed *bool

	/* NfsAllowed.

	   Filter by nfs.allowed
	*/
	NfsAllowed *bool

	/* NfsEnabled.

	   Filter by nfs.enabled
	*/
	NfsEnabled *bool

	/* NisDomain.

	   Filter by nis.domain
	*/
	NisDomain *string

	/* NisEnabled.

	   Filter by nis.enabled
	*/
	NisEnabled *bool

	/* NisServers.

	   Filter by nis.servers
	*/
	NisServers *string

	/* NsswitchGroup.

	   Filter by nsswitch.group
	*/
	NsswitchGroup *string

	/* NsswitchHosts.

	   Filter by nsswitch.hosts
	*/
	NsswitchHosts *string

	/* NsswitchNamemap.

	   Filter by nsswitch.namemap
	*/
	NsswitchNamemap *string

	/* NsswitchNetgroup.

	   Filter by nsswitch.netgroup
	*/
	NsswitchNetgroup *string

	/* NsswitchPasswd.

	   Filter by nsswitch.passwd
	*/
	NsswitchPasswd *string

	/* NvmeAllowed.

	   Filter by nvme.allowed
	*/
	NvmeAllowed *bool

	/* NvmeEnabled.

	   Filter by nvme.enabled
	*/
	NvmeEnabled *bool

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* QosPolicyName.

	   Filter qos_policy.name
	*/
	QosPolicyName *string

	/* QosPolicyUUID.

	   Filter qos_policy.uuid
	*/
	QosPolicyUUID *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* S3Allowed.

	   Filter by s3.allowed
	*/
	S3Allowed *bool

	/* S3Enabled.

	   Filter by s3.enabled
	*/
	S3Enabled *bool

	/* S3Name.

	   Filter by s3.name
	*/
	S3Name *string

	/* SnapshotPolicyName.

	   Filter by snapshot_policy.name
	*/
	SnapshotPolicyName *string

	/* SnapshotPolicyUUID.

	   Filter by snapshot_policy.uuid
	*/
	SnapshotPolicyUUID *string

	/* State.

	   Filter by state
	*/
	State *string

	/* Subtype.

	   Filter by subtype
	*/
	Subtype *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the svm collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SvmCollectionGetParams) WithDefaults() *SvmCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the svm collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SvmCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := SvmCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the svm collection get params
func (o *SvmCollectionGetParams) WithTimeout(timeout time.Duration) *SvmCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the svm collection get params
func (o *SvmCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the svm collection get params
func (o *SvmCollectionGetParams) WithContext(ctx context.Context) *SvmCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the svm collection get params
func (o *SvmCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the svm collection get params
func (o *SvmCollectionGetParams) WithHTTPClient(client *http.Client) *SvmCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the svm collection get params
func (o *SvmCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAggregatesName adds the aggregatesName to the svm collection get params
func (o *SvmCollectionGetParams) WithAggregatesName(aggregatesName *string) *SvmCollectionGetParams {
	o.SetAggregatesName(aggregatesName)
	return o
}

// SetAggregatesName adds the aggregatesName to the svm collection get params
func (o *SvmCollectionGetParams) SetAggregatesName(aggregatesName *string) {
	o.AggregatesName = aggregatesName
}

// WithAggregatesUUID adds the aggregatesUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithAggregatesUUID(aggregatesUUID *string) *SvmCollectionGetParams {
	o.SetAggregatesUUID(aggregatesUUID)
	return o
}

// SetAggregatesUUID adds the aggregatesUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetAggregatesUUID(aggregatesUUID *string) {
	o.AggregatesUUID = aggregatesUUID
}

// WithAntiRansomwareDefaultVolumeState adds the antiRansomwareDefaultVolumeState to the svm collection get params
func (o *SvmCollectionGetParams) WithAntiRansomwareDefaultVolumeState(antiRansomwareDefaultVolumeState *string) *SvmCollectionGetParams {
	o.SetAntiRansomwareDefaultVolumeState(antiRansomwareDefaultVolumeState)
	return o
}

// SetAntiRansomwareDefaultVolumeState adds the antiRansomwareDefaultVolumeState to the svm collection get params
func (o *SvmCollectionGetParams) SetAntiRansomwareDefaultVolumeState(antiRansomwareDefaultVolumeState *string) {
	o.AntiRansomwareDefaultVolumeState = antiRansomwareDefaultVolumeState
}

// WithAutoEnableActivityTracking adds the autoEnableActivityTracking to the svm collection get params
func (o *SvmCollectionGetParams) WithAutoEnableActivityTracking(autoEnableActivityTracking *bool) *SvmCollectionGetParams {
	o.SetAutoEnableActivityTracking(autoEnableActivityTracking)
	return o
}

// SetAutoEnableActivityTracking adds the autoEnableActivityTracking to the svm collection get params
func (o *SvmCollectionGetParams) SetAutoEnableActivityTracking(autoEnableActivityTracking *bool) {
	o.AutoEnableActivityTracking = autoEnableActivityTracking
}

// WithAutoEnableAnalytics adds the autoEnableAnalytics to the svm collection get params
func (o *SvmCollectionGetParams) WithAutoEnableAnalytics(autoEnableAnalytics *bool) *SvmCollectionGetParams {
	o.SetAutoEnableAnalytics(autoEnableAnalytics)
	return o
}

// SetAutoEnableAnalytics adds the autoEnableAnalytics to the svm collection get params
func (o *SvmCollectionGetParams) SetAutoEnableAnalytics(autoEnableAnalytics *bool) {
	o.AutoEnableAnalytics = autoEnableAnalytics
}

// WithCertificateUUID adds the certificateUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithCertificateUUID(certificateUUID *string) *SvmCollectionGetParams {
	o.SetCertificateUUID(certificateUUID)
	return o
}

// SetCertificateUUID adds the certificateUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetCertificateUUID(certificateUUID *string) {
	o.CertificateUUID = certificateUUID
}

// WithCifsAdDomainFqdn adds the cifsAdDomainFqdn to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsAdDomainFqdn(cifsAdDomainFqdn *string) *SvmCollectionGetParams {
	o.SetCifsAdDomainFqdn(cifsAdDomainFqdn)
	return o
}

// SetCifsAdDomainFqdn adds the cifsAdDomainFqdn to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsAdDomainFqdn(cifsAdDomainFqdn *string) {
	o.CifsAdDomainFqdn = cifsAdDomainFqdn
}

// WithCifsAdDomainOrganizationalUnit adds the cifsAdDomainOrganizationalUnit to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsAdDomainOrganizationalUnit(cifsAdDomainOrganizationalUnit *string) *SvmCollectionGetParams {
	o.SetCifsAdDomainOrganizationalUnit(cifsAdDomainOrganizationalUnit)
	return o
}

// SetCifsAdDomainOrganizationalUnit adds the cifsAdDomainOrganizationalUnit to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsAdDomainOrganizationalUnit(cifsAdDomainOrganizationalUnit *string) {
	o.CifsAdDomainOrganizationalUnit = cifsAdDomainOrganizationalUnit
}

// WithCifsAllowed adds the cifsAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsAllowed(cifsAllowed *bool) *SvmCollectionGetParams {
	o.SetCifsAllowed(cifsAllowed)
	return o
}

// SetCifsAllowed adds the cifsAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsAllowed(cifsAllowed *bool) {
	o.CifsAllowed = cifsAllowed
}

// WithCifsEnabled adds the cifsEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsEnabled(cifsEnabled *bool) *SvmCollectionGetParams {
	o.SetCifsEnabled(cifsEnabled)
	return o
}

// SetCifsEnabled adds the cifsEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsEnabled(cifsEnabled *bool) {
	o.CifsEnabled = cifsEnabled
}

// WithCifsName adds the cifsName to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsName(cifsName *string) *SvmCollectionGetParams {
	o.SetCifsName(cifsName)
	return o
}

// SetCifsName adds the cifsName to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsName(cifsName *string) {
	o.CifsName = cifsName
}

// WithComment adds the comment to the svm collection get params
func (o *SvmCollectionGetParams) WithComment(comment *string) *SvmCollectionGetParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the svm collection get params
func (o *SvmCollectionGetParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithDNSDomains adds the dNSDomains to the svm collection get params
func (o *SvmCollectionGetParams) WithDNSDomains(dNSDomains *string) *SvmCollectionGetParams {
	o.SetDNSDomains(dNSDomains)
	return o
}

// SetDNSDomains adds the dnsDomains to the svm collection get params
func (o *SvmCollectionGetParams) SetDNSDomains(dNSDomains *string) {
	o.DNSDomains = dNSDomains
}

// WithDNSServers adds the dNSServers to the svm collection get params
func (o *SvmCollectionGetParams) WithDNSServers(dNSServers *string) *SvmCollectionGetParams {
	o.SetDNSServers(dNSServers)
	return o
}

// SetDNSServers adds the dnsServers to the svm collection get params
func (o *SvmCollectionGetParams) SetDNSServers(dNSServers *string) {
	o.DNSServers = dNSServers
}

// WithFcInterfacesDataProtocol adds the fcInterfacesDataProtocol to the svm collection get params
func (o *SvmCollectionGetParams) WithFcInterfacesDataProtocol(fcInterfacesDataProtocol *string) *SvmCollectionGetParams {
	o.SetFcInterfacesDataProtocol(fcInterfacesDataProtocol)
	return o
}

// SetFcInterfacesDataProtocol adds the fcInterfacesDataProtocol to the svm collection get params
func (o *SvmCollectionGetParams) SetFcInterfacesDataProtocol(fcInterfacesDataProtocol *string) {
	o.FcInterfacesDataProtocol = fcInterfacesDataProtocol
}

// WithFcInterfacesName adds the fcInterfacesName to the svm collection get params
func (o *SvmCollectionGetParams) WithFcInterfacesName(fcInterfacesName *string) *SvmCollectionGetParams {
	o.SetFcInterfacesName(fcInterfacesName)
	return o
}

// SetFcInterfacesName adds the fcInterfacesName to the svm collection get params
func (o *SvmCollectionGetParams) SetFcInterfacesName(fcInterfacesName *string) {
	o.FcInterfacesName = fcInterfacesName
}

// WithFcpAllowed adds the fcpAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithFcpAllowed(fcpAllowed *bool) *SvmCollectionGetParams {
	o.SetFcpAllowed(fcpAllowed)
	return o
}

// SetFcpAllowed adds the fcpAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetFcpAllowed(fcpAllowed *bool) {
	o.FcpAllowed = fcpAllowed
}

// WithFcpEnabled adds the fcpEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithFcpEnabled(fcpEnabled *bool) *SvmCollectionGetParams {
	o.SetFcpEnabled(fcpEnabled)
	return o
}

// SetFcpEnabled adds the fcpEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetFcpEnabled(fcpEnabled *bool) {
	o.FcpEnabled = fcpEnabled
}

// WithFields adds the fields to the svm collection get params
func (o *SvmCollectionGetParams) WithFields(fields []string) *SvmCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the svm collection get params
func (o *SvmCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithIpspaceName adds the ipspaceName to the svm collection get params
func (o *SvmCollectionGetParams) WithIpspaceName(ipspaceName *string) *SvmCollectionGetParams {
	o.SetIpspaceName(ipspaceName)
	return o
}

// SetIpspaceName adds the ipspaceName to the svm collection get params
func (o *SvmCollectionGetParams) SetIpspaceName(ipspaceName *string) {
	o.IpspaceName = ipspaceName
}

// WithIpspaceUUID adds the ipspaceUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithIpspaceUUID(ipspaceUUID *string) *SvmCollectionGetParams {
	o.SetIpspaceUUID(ipspaceUUID)
	return o
}

// SetIpspaceUUID adds the ipspaceUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetIpspaceUUID(ipspaceUUID *string) {
	o.IpspaceUUID = ipspaceUUID
}

// WithIscsiAllowed adds the iscsiAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithIscsiAllowed(iscsiAllowed *bool) *SvmCollectionGetParams {
	o.SetIscsiAllowed(iscsiAllowed)
	return o
}

// SetIscsiAllowed adds the iscsiAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetIscsiAllowed(iscsiAllowed *bool) {
	o.IscsiAllowed = iscsiAllowed
}

// WithIscsiEnabled adds the iscsiEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithIscsiEnabled(iscsiEnabled *bool) *SvmCollectionGetParams {
	o.SetIscsiEnabled(iscsiEnabled)
	return o
}

// SetIscsiEnabled adds the iscsiEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetIscsiEnabled(iscsiEnabled *bool) {
	o.IscsiEnabled = iscsiEnabled
}

// WithLanguage adds the language to the svm collection get params
func (o *SvmCollectionGetParams) WithLanguage(language *string) *SvmCollectionGetParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the svm collection get params
func (o *SvmCollectionGetParams) SetLanguage(language *string) {
	o.Language = language
}

// WithLdapAdDomain adds the ldapAdDomain to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapAdDomain(ldapAdDomain *string) *SvmCollectionGetParams {
	o.SetLdapAdDomain(ldapAdDomain)
	return o
}

// SetLdapAdDomain adds the ldapAdDomain to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapAdDomain(ldapAdDomain *string) {
	o.LdapAdDomain = ldapAdDomain
}

// WithLdapBaseDn adds the ldapBaseDn to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapBaseDn(ldapBaseDn *string) *SvmCollectionGetParams {
	o.SetLdapBaseDn(ldapBaseDn)
	return o
}

// SetLdapBaseDn adds the ldapBaseDn to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapBaseDn(ldapBaseDn *string) {
	o.LdapBaseDn = ldapBaseDn
}

// WithLdapBindDn adds the ldapBindDn to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapBindDn(ldapBindDn *string) *SvmCollectionGetParams {
	o.SetLdapBindDn(ldapBindDn)
	return o
}

// SetLdapBindDn adds the ldapBindDn to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapBindDn(ldapBindDn *string) {
	o.LdapBindDn = ldapBindDn
}

// WithLdapEnabled adds the ldapEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapEnabled(ldapEnabled *bool) *SvmCollectionGetParams {
	o.SetLdapEnabled(ldapEnabled)
	return o
}

// SetLdapEnabled adds the ldapEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapEnabled(ldapEnabled *bool) {
	o.LdapEnabled = ldapEnabled
}

// WithLdapServers adds the ldapServers to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapServers(ldapServers *string) *SvmCollectionGetParams {
	o.SetLdapServers(ldapServers)
	return o
}

// SetLdapServers adds the ldapServers to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapServers(ldapServers *string) {
	o.LdapServers = ldapServers
}

// WithMaxRecords adds the maxRecords to the svm collection get params
func (o *SvmCollectionGetParams) WithMaxRecords(maxRecords *int64) *SvmCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the svm collection get params
func (o *SvmCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithMaxVolumes adds the maxVolumes to the svm collection get params
func (o *SvmCollectionGetParams) WithMaxVolumes(maxVolumes *string) *SvmCollectionGetParams {
	o.SetMaxVolumes(maxVolumes)
	return o
}

// SetMaxVolumes adds the maxVolumes to the svm collection get params
func (o *SvmCollectionGetParams) SetMaxVolumes(maxVolumes *string) {
	o.MaxVolumes = maxVolumes
}

// WithName adds the name to the svm collection get params
func (o *SvmCollectionGetParams) WithName(name *string) *SvmCollectionGetParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the svm collection get params
func (o *SvmCollectionGetParams) SetName(name *string) {
	o.Name = name
}

// WithNdmpAllowed adds the ndmpAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithNdmpAllowed(ndmpAllowed *bool) *SvmCollectionGetParams {
	o.SetNdmpAllowed(ndmpAllowed)
	return o
}

// SetNdmpAllowed adds the ndmpAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetNdmpAllowed(ndmpAllowed *bool) {
	o.NdmpAllowed = ndmpAllowed
}

// WithNfsAllowed adds the nfsAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithNfsAllowed(nfsAllowed *bool) *SvmCollectionGetParams {
	o.SetNfsAllowed(nfsAllowed)
	return o
}

// SetNfsAllowed adds the nfsAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetNfsAllowed(nfsAllowed *bool) {
	o.NfsAllowed = nfsAllowed
}

// WithNfsEnabled adds the nfsEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithNfsEnabled(nfsEnabled *bool) *SvmCollectionGetParams {
	o.SetNfsEnabled(nfsEnabled)
	return o
}

// SetNfsEnabled adds the nfsEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetNfsEnabled(nfsEnabled *bool) {
	o.NfsEnabled = nfsEnabled
}

// WithNisDomain adds the nisDomain to the svm collection get params
func (o *SvmCollectionGetParams) WithNisDomain(nisDomain *string) *SvmCollectionGetParams {
	o.SetNisDomain(nisDomain)
	return o
}

// SetNisDomain adds the nisDomain to the svm collection get params
func (o *SvmCollectionGetParams) SetNisDomain(nisDomain *string) {
	o.NisDomain = nisDomain
}

// WithNisEnabled adds the nisEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithNisEnabled(nisEnabled *bool) *SvmCollectionGetParams {
	o.SetNisEnabled(nisEnabled)
	return o
}

// SetNisEnabled adds the nisEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetNisEnabled(nisEnabled *bool) {
	o.NisEnabled = nisEnabled
}

// WithNisServers adds the nisServers to the svm collection get params
func (o *SvmCollectionGetParams) WithNisServers(nisServers *string) *SvmCollectionGetParams {
	o.SetNisServers(nisServers)
	return o
}

// SetNisServers adds the nisServers to the svm collection get params
func (o *SvmCollectionGetParams) SetNisServers(nisServers *string) {
	o.NisServers = nisServers
}

// WithNsswitchGroup adds the nsswitchGroup to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchGroup(nsswitchGroup *string) *SvmCollectionGetParams {
	o.SetNsswitchGroup(nsswitchGroup)
	return o
}

// SetNsswitchGroup adds the nsswitchGroup to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchGroup(nsswitchGroup *string) {
	o.NsswitchGroup = nsswitchGroup
}

// WithNsswitchHosts adds the nsswitchHosts to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchHosts(nsswitchHosts *string) *SvmCollectionGetParams {
	o.SetNsswitchHosts(nsswitchHosts)
	return o
}

// SetNsswitchHosts adds the nsswitchHosts to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchHosts(nsswitchHosts *string) {
	o.NsswitchHosts = nsswitchHosts
}

// WithNsswitchNamemap adds the nsswitchNamemap to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchNamemap(nsswitchNamemap *string) *SvmCollectionGetParams {
	o.SetNsswitchNamemap(nsswitchNamemap)
	return o
}

// SetNsswitchNamemap adds the nsswitchNamemap to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchNamemap(nsswitchNamemap *string) {
	o.NsswitchNamemap = nsswitchNamemap
}

// WithNsswitchNetgroup adds the nsswitchNetgroup to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchNetgroup(nsswitchNetgroup *string) *SvmCollectionGetParams {
	o.SetNsswitchNetgroup(nsswitchNetgroup)
	return o
}

// SetNsswitchNetgroup adds the nsswitchNetgroup to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchNetgroup(nsswitchNetgroup *string) {
	o.NsswitchNetgroup = nsswitchNetgroup
}

// WithNsswitchPasswd adds the nsswitchPasswd to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchPasswd(nsswitchPasswd *string) *SvmCollectionGetParams {
	o.SetNsswitchPasswd(nsswitchPasswd)
	return o
}

// SetNsswitchPasswd adds the nsswitchPasswd to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchPasswd(nsswitchPasswd *string) {
	o.NsswitchPasswd = nsswitchPasswd
}

// WithNvmeAllowed adds the nvmeAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithNvmeAllowed(nvmeAllowed *bool) *SvmCollectionGetParams {
	o.SetNvmeAllowed(nvmeAllowed)
	return o
}

// SetNvmeAllowed adds the nvmeAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetNvmeAllowed(nvmeAllowed *bool) {
	o.NvmeAllowed = nvmeAllowed
}

// WithNvmeEnabled adds the nvmeEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithNvmeEnabled(nvmeEnabled *bool) *SvmCollectionGetParams {
	o.SetNvmeEnabled(nvmeEnabled)
	return o
}

// SetNvmeEnabled adds the nvmeEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetNvmeEnabled(nvmeEnabled *bool) {
	o.NvmeEnabled = nvmeEnabled
}

// WithOrderBy adds the orderBy to the svm collection get params
func (o *SvmCollectionGetParams) WithOrderBy(orderBy []string) *SvmCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the svm collection get params
func (o *SvmCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithQosPolicyName adds the qosPolicyName to the svm collection get params
func (o *SvmCollectionGetParams) WithQosPolicyName(qosPolicyName *string) *SvmCollectionGetParams {
	o.SetQosPolicyName(qosPolicyName)
	return o
}

// SetQosPolicyName adds the qosPolicyName to the svm collection get params
func (o *SvmCollectionGetParams) SetQosPolicyName(qosPolicyName *string) {
	o.QosPolicyName = qosPolicyName
}

// WithQosPolicyUUID adds the qosPolicyUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithQosPolicyUUID(qosPolicyUUID *string) *SvmCollectionGetParams {
	o.SetQosPolicyUUID(qosPolicyUUID)
	return o
}

// SetQosPolicyUUID adds the qosPolicyUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetQosPolicyUUID(qosPolicyUUID *string) {
	o.QosPolicyUUID = qosPolicyUUID
}

// WithReturnRecords adds the returnRecords to the svm collection get params
func (o *SvmCollectionGetParams) WithReturnRecords(returnRecords *bool) *SvmCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the svm collection get params
func (o *SvmCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the svm collection get params
func (o *SvmCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *SvmCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the svm collection get params
func (o *SvmCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithS3Allowed adds the s3Allowed to the svm collection get params
func (o *SvmCollectionGetParams) WithS3Allowed(s3Allowed *bool) *SvmCollectionGetParams {
	o.SetS3Allowed(s3Allowed)
	return o
}

// SetS3Allowed adds the s3Allowed to the svm collection get params
func (o *SvmCollectionGetParams) SetS3Allowed(s3Allowed *bool) {
	o.S3Allowed = s3Allowed
}

// WithS3Enabled adds the s3Enabled to the svm collection get params
func (o *SvmCollectionGetParams) WithS3Enabled(s3Enabled *bool) *SvmCollectionGetParams {
	o.SetS3Enabled(s3Enabled)
	return o
}

// SetS3Enabled adds the s3Enabled to the svm collection get params
func (o *SvmCollectionGetParams) SetS3Enabled(s3Enabled *bool) {
	o.S3Enabled = s3Enabled
}

// WithS3Name adds the s3Name to the svm collection get params
func (o *SvmCollectionGetParams) WithS3Name(s3Name *string) *SvmCollectionGetParams {
	o.SetS3Name(s3Name)
	return o
}

// SetS3Name adds the s3Name to the svm collection get params
func (o *SvmCollectionGetParams) SetS3Name(s3Name *string) {
	o.S3Name = s3Name
}

// WithSnapshotPolicyName adds the snapshotPolicyName to the svm collection get params
func (o *SvmCollectionGetParams) WithSnapshotPolicyName(snapshotPolicyName *string) *SvmCollectionGetParams {
	o.SetSnapshotPolicyName(snapshotPolicyName)
	return o
}

// SetSnapshotPolicyName adds the snapshotPolicyName to the svm collection get params
func (o *SvmCollectionGetParams) SetSnapshotPolicyName(snapshotPolicyName *string) {
	o.SnapshotPolicyName = snapshotPolicyName
}

// WithSnapshotPolicyUUID adds the snapshotPolicyUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithSnapshotPolicyUUID(snapshotPolicyUUID *string) *SvmCollectionGetParams {
	o.SetSnapshotPolicyUUID(snapshotPolicyUUID)
	return o
}

// SetSnapshotPolicyUUID adds the snapshotPolicyUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetSnapshotPolicyUUID(snapshotPolicyUUID *string) {
	o.SnapshotPolicyUUID = snapshotPolicyUUID
}

// WithState adds the state to the svm collection get params
func (o *SvmCollectionGetParams) WithState(state *string) *SvmCollectionGetParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the svm collection get params
func (o *SvmCollectionGetParams) SetState(state *string) {
	o.State = state
}

// WithSubtype adds the subtype to the svm collection get params
func (o *SvmCollectionGetParams) WithSubtype(subtype *string) *SvmCollectionGetParams {
	o.SetSubtype(subtype)
	return o
}

// SetSubtype adds the subtype to the svm collection get params
func (o *SvmCollectionGetParams) SetSubtype(subtype *string) {
	o.Subtype = subtype
}

// WithUUID adds the uuid to the svm collection get params
func (o *SvmCollectionGetParams) WithUUID(uuid *string) *SvmCollectionGetParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the svm collection get params
func (o *SvmCollectionGetParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *SvmCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AggregatesName != nil {

		// query param aggregates.name
		var qrAggregatesName string

		if o.AggregatesName != nil {
			qrAggregatesName = *o.AggregatesName
		}
		qAggregatesName := qrAggregatesName
		if qAggregatesName != "" {

			if err := r.SetQueryParam("aggregates.name", qAggregatesName); err != nil {
				return err
			}
		}
	}

	if o.AggregatesUUID != nil {

		// query param aggregates.uuid
		var qrAggregatesUUID string

		if o.AggregatesUUID != nil {
			qrAggregatesUUID = *o.AggregatesUUID
		}
		qAggregatesUUID := qrAggregatesUUID
		if qAggregatesUUID != "" {

			if err := r.SetQueryParam("aggregates.uuid", qAggregatesUUID); err != nil {
				return err
			}
		}
	}

	if o.AntiRansomwareDefaultVolumeState != nil {

		// query param anti_ransomware_default_volume_state
		var qrAntiRansomwareDefaultVolumeState string

		if o.AntiRansomwareDefaultVolumeState != nil {
			qrAntiRansomwareDefaultVolumeState = *o.AntiRansomwareDefaultVolumeState
		}
		qAntiRansomwareDefaultVolumeState := qrAntiRansomwareDefaultVolumeState
		if qAntiRansomwareDefaultVolumeState != "" {

			if err := r.SetQueryParam("anti_ransomware_default_volume_state", qAntiRansomwareDefaultVolumeState); err != nil {
				return err
			}
		}
	}

	if o.AutoEnableActivityTracking != nil {

		// query param auto_enable_activity_tracking
		var qrAutoEnableActivityTracking bool

		if o.AutoEnableActivityTracking != nil {
			qrAutoEnableActivityTracking = *o.AutoEnableActivityTracking
		}
		qAutoEnableActivityTracking := swag.FormatBool(qrAutoEnableActivityTracking)
		if qAutoEnableActivityTracking != "" {

			if err := r.SetQueryParam("auto_enable_activity_tracking", qAutoEnableActivityTracking); err != nil {
				return err
			}
		}
	}

	if o.AutoEnableAnalytics != nil {

		// query param auto_enable_analytics
		var qrAutoEnableAnalytics bool

		if o.AutoEnableAnalytics != nil {
			qrAutoEnableAnalytics = *o.AutoEnableAnalytics
		}
		qAutoEnableAnalytics := swag.FormatBool(qrAutoEnableAnalytics)
		if qAutoEnableAnalytics != "" {

			if err := r.SetQueryParam("auto_enable_analytics", qAutoEnableAnalytics); err != nil {
				return err
			}
		}
	}

	if o.CertificateUUID != nil {

		// query param certificate.uuid
		var qrCertificateUUID string

		if o.CertificateUUID != nil {
			qrCertificateUUID = *o.CertificateUUID
		}
		qCertificateUUID := qrCertificateUUID
		if qCertificateUUID != "" {

			if err := r.SetQueryParam("certificate.uuid", qCertificateUUID); err != nil {
				return err
			}
		}
	}

	if o.CifsAdDomainFqdn != nil {

		// query param cifs.ad_domain.fqdn
		var qrCifsAdDomainFqdn string

		if o.CifsAdDomainFqdn != nil {
			qrCifsAdDomainFqdn = *o.CifsAdDomainFqdn
		}
		qCifsAdDomainFqdn := qrCifsAdDomainFqdn
		if qCifsAdDomainFqdn != "" {

			if err := r.SetQueryParam("cifs.ad_domain.fqdn", qCifsAdDomainFqdn); err != nil {
				return err
			}
		}
	}

	if o.CifsAdDomainOrganizationalUnit != nil {

		// query param cifs.ad_domain.organizational_unit
		var qrCifsAdDomainOrganizationalUnit string

		if o.CifsAdDomainOrganizationalUnit != nil {
			qrCifsAdDomainOrganizationalUnit = *o.CifsAdDomainOrganizationalUnit
		}
		qCifsAdDomainOrganizationalUnit := qrCifsAdDomainOrganizationalUnit
		if qCifsAdDomainOrganizationalUnit != "" {

			if err := r.SetQueryParam("cifs.ad_domain.organizational_unit", qCifsAdDomainOrganizationalUnit); err != nil {
				return err
			}
		}
	}

	if o.CifsAllowed != nil {

		// query param cifs.allowed
		var qrCifsAllowed bool

		if o.CifsAllowed != nil {
			qrCifsAllowed = *o.CifsAllowed
		}
		qCifsAllowed := swag.FormatBool(qrCifsAllowed)
		if qCifsAllowed != "" {

			if err := r.SetQueryParam("cifs.allowed", qCifsAllowed); err != nil {
				return err
			}
		}
	}

	if o.CifsEnabled != nil {

		// query param cifs.enabled
		var qrCifsEnabled bool

		if o.CifsEnabled != nil {
			qrCifsEnabled = *o.CifsEnabled
		}
		qCifsEnabled := swag.FormatBool(qrCifsEnabled)
		if qCifsEnabled != "" {

			if err := r.SetQueryParam("cifs.enabled", qCifsEnabled); err != nil {
				return err
			}
		}
	}

	if o.CifsName != nil {

		// query param cifs.name
		var qrCifsName string

		if o.CifsName != nil {
			qrCifsName = *o.CifsName
		}
		qCifsName := qrCifsName
		if qCifsName != "" {

			if err := r.SetQueryParam("cifs.name", qCifsName); err != nil {
				return err
			}
		}
	}

	if o.Comment != nil {

		// query param comment
		var qrComment string

		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.DNSDomains != nil {

		// query param dns.domains
		var qrDNSDomains string

		if o.DNSDomains != nil {
			qrDNSDomains = *o.DNSDomains
		}
		qDNSDomains := qrDNSDomains
		if qDNSDomains != "" {

			if err := r.SetQueryParam("dns.domains", qDNSDomains); err != nil {
				return err
			}
		}
	}

	if o.DNSServers != nil {

		// query param dns.servers
		var qrDNSServers string

		if o.DNSServers != nil {
			qrDNSServers = *o.DNSServers
		}
		qDNSServers := qrDNSServers
		if qDNSServers != "" {

			if err := r.SetQueryParam("dns.servers", qDNSServers); err != nil {
				return err
			}
		}
	}

	if o.FcInterfacesDataProtocol != nil {

		// query param fc_interfaces.data_protocol
		var qrFcInterfacesDataProtocol string

		if o.FcInterfacesDataProtocol != nil {
			qrFcInterfacesDataProtocol = *o.FcInterfacesDataProtocol
		}
		qFcInterfacesDataProtocol := qrFcInterfacesDataProtocol
		if qFcInterfacesDataProtocol != "" {

			if err := r.SetQueryParam("fc_interfaces.data_protocol", qFcInterfacesDataProtocol); err != nil {
				return err
			}
		}
	}

	if o.FcInterfacesName != nil {

		// query param fc_interfaces.name
		var qrFcInterfacesName string

		if o.FcInterfacesName != nil {
			qrFcInterfacesName = *o.FcInterfacesName
		}
		qFcInterfacesName := qrFcInterfacesName
		if qFcInterfacesName != "" {

			if err := r.SetQueryParam("fc_interfaces.name", qFcInterfacesName); err != nil {
				return err
			}
		}
	}

	if o.FcpAllowed != nil {

		// query param fcp.allowed
		var qrFcpAllowed bool

		if o.FcpAllowed != nil {
			qrFcpAllowed = *o.FcpAllowed
		}
		qFcpAllowed := swag.FormatBool(qrFcpAllowed)
		if qFcpAllowed != "" {

			if err := r.SetQueryParam("fcp.allowed", qFcpAllowed); err != nil {
				return err
			}
		}
	}

	if o.FcpEnabled != nil {

		// query param fcp.enabled
		var qrFcpEnabled bool

		if o.FcpEnabled != nil {
			qrFcpEnabled = *o.FcpEnabled
		}
		qFcpEnabled := swag.FormatBool(qrFcpEnabled)
		if qFcpEnabled != "" {

			if err := r.SetQueryParam("fcp.enabled", qFcpEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IpspaceName != nil {

		// query param ipspace.name
		var qrIpspaceName string

		if o.IpspaceName != nil {
			qrIpspaceName = *o.IpspaceName
		}
		qIpspaceName := qrIpspaceName
		if qIpspaceName != "" {

			if err := r.SetQueryParam("ipspace.name", qIpspaceName); err != nil {
				return err
			}
		}
	}

	if o.IpspaceUUID != nil {

		// query param ipspace.uuid
		var qrIpspaceUUID string

		if o.IpspaceUUID != nil {
			qrIpspaceUUID = *o.IpspaceUUID
		}
		qIpspaceUUID := qrIpspaceUUID
		if qIpspaceUUID != "" {

			if err := r.SetQueryParam("ipspace.uuid", qIpspaceUUID); err != nil {
				return err
			}
		}
	}

	if o.IscsiAllowed != nil {

		// query param iscsi.allowed
		var qrIscsiAllowed bool

		if o.IscsiAllowed != nil {
			qrIscsiAllowed = *o.IscsiAllowed
		}
		qIscsiAllowed := swag.FormatBool(qrIscsiAllowed)
		if qIscsiAllowed != "" {

			if err := r.SetQueryParam("iscsi.allowed", qIscsiAllowed); err != nil {
				return err
			}
		}
	}

	if o.IscsiEnabled != nil {

		// query param iscsi.enabled
		var qrIscsiEnabled bool

		if o.IscsiEnabled != nil {
			qrIscsiEnabled = *o.IscsiEnabled
		}
		qIscsiEnabled := swag.FormatBool(qrIscsiEnabled)
		if qIscsiEnabled != "" {

			if err := r.SetQueryParam("iscsi.enabled", qIscsiEnabled); err != nil {
				return err
			}
		}
	}

	if o.Language != nil {

		// query param language
		var qrLanguage string

		if o.Language != nil {
			qrLanguage = *o.Language
		}
		qLanguage := qrLanguage
		if qLanguage != "" {

			if err := r.SetQueryParam("language", qLanguage); err != nil {
				return err
			}
		}
	}

	if o.LdapAdDomain != nil {

		// query param ldap.ad_domain
		var qrLdapAdDomain string

		if o.LdapAdDomain != nil {
			qrLdapAdDomain = *o.LdapAdDomain
		}
		qLdapAdDomain := qrLdapAdDomain
		if qLdapAdDomain != "" {

			if err := r.SetQueryParam("ldap.ad_domain", qLdapAdDomain); err != nil {
				return err
			}
		}
	}

	if o.LdapBaseDn != nil {

		// query param ldap.base_dn
		var qrLdapBaseDn string

		if o.LdapBaseDn != nil {
			qrLdapBaseDn = *o.LdapBaseDn
		}
		qLdapBaseDn := qrLdapBaseDn
		if qLdapBaseDn != "" {

			if err := r.SetQueryParam("ldap.base_dn", qLdapBaseDn); err != nil {
				return err
			}
		}
	}

	if o.LdapBindDn != nil {

		// query param ldap.bind_dn
		var qrLdapBindDn string

		if o.LdapBindDn != nil {
			qrLdapBindDn = *o.LdapBindDn
		}
		qLdapBindDn := qrLdapBindDn
		if qLdapBindDn != "" {

			if err := r.SetQueryParam("ldap.bind_dn", qLdapBindDn); err != nil {
				return err
			}
		}
	}

	if o.LdapEnabled != nil {

		// query param ldap.enabled
		var qrLdapEnabled bool

		if o.LdapEnabled != nil {
			qrLdapEnabled = *o.LdapEnabled
		}
		qLdapEnabled := swag.FormatBool(qrLdapEnabled)
		if qLdapEnabled != "" {

			if err := r.SetQueryParam("ldap.enabled", qLdapEnabled); err != nil {
				return err
			}
		}
	}

	if o.LdapServers != nil {

		// query param ldap.servers
		var qrLdapServers string

		if o.LdapServers != nil {
			qrLdapServers = *o.LdapServers
		}
		qLdapServers := qrLdapServers
		if qLdapServers != "" {

			if err := r.SetQueryParam("ldap.servers", qLdapServers); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MaxVolumes != nil {

		// query param max_volumes
		var qrMaxVolumes string

		if o.MaxVolumes != nil {
			qrMaxVolumes = *o.MaxVolumes
		}
		qMaxVolumes := qrMaxVolumes
		if qMaxVolumes != "" {

			if err := r.SetQueryParam("max_volumes", qMaxVolumes); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NdmpAllowed != nil {

		// query param ndmp.allowed
		var qrNdmpAllowed bool

		if o.NdmpAllowed != nil {
			qrNdmpAllowed = *o.NdmpAllowed
		}
		qNdmpAllowed := swag.FormatBool(qrNdmpAllowed)
		if qNdmpAllowed != "" {

			if err := r.SetQueryParam("ndmp.allowed", qNdmpAllowed); err != nil {
				return err
			}
		}
	}

	if o.NfsAllowed != nil {

		// query param nfs.allowed
		var qrNfsAllowed bool

		if o.NfsAllowed != nil {
			qrNfsAllowed = *o.NfsAllowed
		}
		qNfsAllowed := swag.FormatBool(qrNfsAllowed)
		if qNfsAllowed != "" {

			if err := r.SetQueryParam("nfs.allowed", qNfsAllowed); err != nil {
				return err
			}
		}
	}

	if o.NfsEnabled != nil {

		// query param nfs.enabled
		var qrNfsEnabled bool

		if o.NfsEnabled != nil {
			qrNfsEnabled = *o.NfsEnabled
		}
		qNfsEnabled := swag.FormatBool(qrNfsEnabled)
		if qNfsEnabled != "" {

			if err := r.SetQueryParam("nfs.enabled", qNfsEnabled); err != nil {
				return err
			}
		}
	}

	if o.NisDomain != nil {

		// query param nis.domain
		var qrNisDomain string

		if o.NisDomain != nil {
			qrNisDomain = *o.NisDomain
		}
		qNisDomain := qrNisDomain
		if qNisDomain != "" {

			if err := r.SetQueryParam("nis.domain", qNisDomain); err != nil {
				return err
			}
		}
	}

	if o.NisEnabled != nil {

		// query param nis.enabled
		var qrNisEnabled bool

		if o.NisEnabled != nil {
			qrNisEnabled = *o.NisEnabled
		}
		qNisEnabled := swag.FormatBool(qrNisEnabled)
		if qNisEnabled != "" {

			if err := r.SetQueryParam("nis.enabled", qNisEnabled); err != nil {
				return err
			}
		}
	}

	if o.NisServers != nil {

		// query param nis.servers
		var qrNisServers string

		if o.NisServers != nil {
			qrNisServers = *o.NisServers
		}
		qNisServers := qrNisServers
		if qNisServers != "" {

			if err := r.SetQueryParam("nis.servers", qNisServers); err != nil {
				return err
			}
		}
	}

	if o.NsswitchGroup != nil {

		// query param nsswitch.group
		var qrNsswitchGroup string

		if o.NsswitchGroup != nil {
			qrNsswitchGroup = *o.NsswitchGroup
		}
		qNsswitchGroup := qrNsswitchGroup
		if qNsswitchGroup != "" {

			if err := r.SetQueryParam("nsswitch.group", qNsswitchGroup); err != nil {
				return err
			}
		}
	}

	if o.NsswitchHosts != nil {

		// query param nsswitch.hosts
		var qrNsswitchHosts string

		if o.NsswitchHosts != nil {
			qrNsswitchHosts = *o.NsswitchHosts
		}
		qNsswitchHosts := qrNsswitchHosts
		if qNsswitchHosts != "" {

			if err := r.SetQueryParam("nsswitch.hosts", qNsswitchHosts); err != nil {
				return err
			}
		}
	}

	if o.NsswitchNamemap != nil {

		// query param nsswitch.namemap
		var qrNsswitchNamemap string

		if o.NsswitchNamemap != nil {
			qrNsswitchNamemap = *o.NsswitchNamemap
		}
		qNsswitchNamemap := qrNsswitchNamemap
		if qNsswitchNamemap != "" {

			if err := r.SetQueryParam("nsswitch.namemap", qNsswitchNamemap); err != nil {
				return err
			}
		}
	}

	if o.NsswitchNetgroup != nil {

		// query param nsswitch.netgroup
		var qrNsswitchNetgroup string

		if o.NsswitchNetgroup != nil {
			qrNsswitchNetgroup = *o.NsswitchNetgroup
		}
		qNsswitchNetgroup := qrNsswitchNetgroup
		if qNsswitchNetgroup != "" {

			if err := r.SetQueryParam("nsswitch.netgroup", qNsswitchNetgroup); err != nil {
				return err
			}
		}
	}

	if o.NsswitchPasswd != nil {

		// query param nsswitch.passwd
		var qrNsswitchPasswd string

		if o.NsswitchPasswd != nil {
			qrNsswitchPasswd = *o.NsswitchPasswd
		}
		qNsswitchPasswd := qrNsswitchPasswd
		if qNsswitchPasswd != "" {

			if err := r.SetQueryParam("nsswitch.passwd", qNsswitchPasswd); err != nil {
				return err
			}
		}
	}

	if o.NvmeAllowed != nil {

		// query param nvme.allowed
		var qrNvmeAllowed bool

		if o.NvmeAllowed != nil {
			qrNvmeAllowed = *o.NvmeAllowed
		}
		qNvmeAllowed := swag.FormatBool(qrNvmeAllowed)
		if qNvmeAllowed != "" {

			if err := r.SetQueryParam("nvme.allowed", qNvmeAllowed); err != nil {
				return err
			}
		}
	}

	if o.NvmeEnabled != nil {

		// query param nvme.enabled
		var qrNvmeEnabled bool

		if o.NvmeEnabled != nil {
			qrNvmeEnabled = *o.NvmeEnabled
		}
		qNvmeEnabled := swag.FormatBool(qrNvmeEnabled)
		if qNvmeEnabled != "" {

			if err := r.SetQueryParam("nvme.enabled", qNvmeEnabled); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.QosPolicyName != nil {

		// query param qos_policy.name
		var qrQosPolicyName string

		if o.QosPolicyName != nil {
			qrQosPolicyName = *o.QosPolicyName
		}
		qQosPolicyName := qrQosPolicyName
		if qQosPolicyName != "" {

			if err := r.SetQueryParam("qos_policy.name", qQosPolicyName); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyUUID != nil {

		// query param qos_policy.uuid
		var qrQosPolicyUUID string

		if o.QosPolicyUUID != nil {
			qrQosPolicyUUID = *o.QosPolicyUUID
		}
		qQosPolicyUUID := qrQosPolicyUUID
		if qQosPolicyUUID != "" {

			if err := r.SetQueryParam("qos_policy.uuid", qQosPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.S3Allowed != nil {

		// query param s3.allowed
		var qrS3Allowed bool

		if o.S3Allowed != nil {
			qrS3Allowed = *o.S3Allowed
		}
		qS3Allowed := swag.FormatBool(qrS3Allowed)
		if qS3Allowed != "" {

			if err := r.SetQueryParam("s3.allowed", qS3Allowed); err != nil {
				return err
			}
		}
	}

	if o.S3Enabled != nil {

		// query param s3.enabled
		var qrS3Enabled bool

		if o.S3Enabled != nil {
			qrS3Enabled = *o.S3Enabled
		}
		qS3Enabled := swag.FormatBool(qrS3Enabled)
		if qS3Enabled != "" {

			if err := r.SetQueryParam("s3.enabled", qS3Enabled); err != nil {
				return err
			}
		}
	}

	if o.S3Name != nil {

		// query param s3.name
		var qrS3Name string

		if o.S3Name != nil {
			qrS3Name = *o.S3Name
		}
		qS3Name := qrS3Name
		if qS3Name != "" {

			if err := r.SetQueryParam("s3.name", qS3Name); err != nil {
				return err
			}
		}
	}

	if o.SnapshotPolicyName != nil {

		// query param snapshot_policy.name
		var qrSnapshotPolicyName string

		if o.SnapshotPolicyName != nil {
			qrSnapshotPolicyName = *o.SnapshotPolicyName
		}
		qSnapshotPolicyName := qrSnapshotPolicyName
		if qSnapshotPolicyName != "" {

			if err := r.SetQueryParam("snapshot_policy.name", qSnapshotPolicyName); err != nil {
				return err
			}
		}
	}

	if o.SnapshotPolicyUUID != nil {

		// query param snapshot_policy.uuid
		var qrSnapshotPolicyUUID string

		if o.SnapshotPolicyUUID != nil {
			qrSnapshotPolicyUUID = *o.SnapshotPolicyUUID
		}
		qSnapshotPolicyUUID := qrSnapshotPolicyUUID
		if qSnapshotPolicyUUID != "" {

			if err := r.SetQueryParam("snapshot_policy.uuid", qSnapshotPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Subtype != nil {

		// query param subtype
		var qrSubtype string

		if o.Subtype != nil {
			qrSubtype = *o.Subtype
		}
		qSubtype := qrSubtype
		if qSubtype != "" {

			if err := r.SetQueryParam("subtype", qSubtype); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSvmCollectionGet binds the parameter fields
func (o *SvmCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSvmCollectionGet binds the parameter order_by
func (o *SvmCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
