// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SnapmirrorConsistencyGroupFailover SnapMirror Consistency Group failover information. The SnapMirror Consistency Group failover can be a planned or an unplanned operation. Only active SnapMirror Consistency Group failover operation progress can be monitored using this object. In case of an error during the failover operation, the property "consistency_group_failover.error" holds the reason for the error. ONTAP automatically retries any failed SnapMirror Consistency Group failover operation.
//
// swagger:model snapmirror_consistency_group_failover
type SnapmirrorConsistencyGroupFailover struct {

	// error
	Error *Error `json:"error,omitempty"`

	// status
	Status *SnapmirrorConsistencyGroupFailoverInlineStatus `json:"status,omitempty"`
}

// Validate validates this snapmirror consistency group failover
func (m *SnapmirrorConsistencyGroupFailover) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorConsistencyGroupFailover) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *SnapmirrorConsistencyGroupFailover) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror consistency group failover based on the context it is used
func (m *SnapmirrorConsistencyGroupFailover) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorConsistencyGroupFailover) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {
		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *SnapmirrorConsistencyGroupFailover) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorConsistencyGroupFailover) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorConsistencyGroupFailover) UnmarshalBinary(b []byte) error {
	var res SnapmirrorConsistencyGroupFailover
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorConsistencyGroupFailoverInlineStatus snapmirror consistency group failover inline status
//
// swagger:model snapmirror_consistency_group_failover_inline_status
type SnapmirrorConsistencyGroupFailoverInlineStatus struct {

	// Status code
	Code *string `json:"code,omitempty"`

	// SnapMirror Consistency Group failover status.
	Message *string `json:"message,omitempty"`
}

// Validate validates this snapmirror consistency group failover inline status
func (m *SnapmirrorConsistencyGroupFailoverInlineStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this snapmirror consistency group failover inline status based on context it is used
func (m *SnapmirrorConsistencyGroupFailoverInlineStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorConsistencyGroupFailoverInlineStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorConsistencyGroupFailoverInlineStatus) UnmarshalBinary(b []byte) error {
	var res SnapmirrorConsistencyGroupFailoverInlineStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
