// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/gopowermax/v2 (interfaces: Pmax)
//
// Generated by this command:
//
//	mockgen -destination=mock_powermax_client_test.go -package=powermax github.com/dell/gopowermax/v2 Pmax
//

// Package powermax is a generated GoMock package.
package powermax

import (
	context "context"
	http "net/http"
	reflect "reflect"

	pmax "github.com/dell/gopowermax/v2"
	v100 "github.com/dell/gopowermax/v2/types/v100"
	gomock "go.uber.org/mock/gomock"
)

// MockPmax is a mock of Pmax interface.
type MockPmax struct {
	ctrl     *gomock.Controller
	recorder *MockPmaxMockRecorder
	isgomock struct{}
}

// MockPmaxMockRecorder is the mock recorder for MockPmax.
type MockPmaxMockRecorder struct {
	mock *MockPmax
}

// NewMockPmax creates a new mock instance.
func NewMockPmax(ctrl *gomock.Controller) *MockPmax {
	mock := &MockPmax{ctrl: ctrl}
	mock.recorder = &MockPmaxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPmax) EXPECT() *MockPmaxMockRecorder {
	return m.recorder
}

// AddVolumesToProtectedStorageGroup mocks base method.
func (m *MockPmax) AddVolumesToProtectedStorageGroup(ctx context.Context, symID, storageGroupID, remoteSymID, remoteStorageGroupID string, force bool, volumeIDs ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, symID, storageGroupID, remoteSymID, remoteStorageGroupID, force}
	for _, a := range volumeIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddVolumesToProtectedStorageGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolumesToProtectedStorageGroup indicates an expected call of AddVolumesToProtectedStorageGroup.
func (mr *MockPmaxMockRecorder) AddVolumesToProtectedStorageGroup(ctx, symID, storageGroupID, remoteSymID, remoteStorageGroupID, force any, volumeIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, symID, storageGroupID, remoteSymID, remoteStorageGroupID, force}, volumeIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumesToProtectedStorageGroup", reflect.TypeOf((*MockPmax)(nil).AddVolumesToProtectedStorageGroup), varargs...)
}

// AddVolumesToStorageGroup mocks base method.
func (m *MockPmax) AddVolumesToStorageGroup(ctx context.Context, symID, storageGroupID string, force bool, volumeIDs ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, symID, storageGroupID, force}
	for _, a := range volumeIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddVolumesToStorageGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolumesToStorageGroup indicates an expected call of AddVolumesToStorageGroup.
func (mr *MockPmaxMockRecorder) AddVolumesToStorageGroup(ctx, symID, storageGroupID, force any, volumeIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, symID, storageGroupID, force}, volumeIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumesToStorageGroup", reflect.TypeOf((*MockPmax)(nil).AddVolumesToStorageGroup), varargs...)
}

// AddVolumesToStorageGroupS mocks base method.
func (m *MockPmax) AddVolumesToStorageGroupS(ctx context.Context, symID, storageGroupID string, force bool, volumeIDs ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, symID, storageGroupID, force}
	for _, a := range volumeIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddVolumesToStorageGroupS", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolumesToStorageGroupS indicates an expected call of AddVolumesToStorageGroupS.
func (mr *MockPmaxMockRecorder) AddVolumesToStorageGroupS(ctx, symID, storageGroupID, force any, volumeIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, symID, storageGroupID, force}, volumeIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumesToStorageGroupS", reflect.TypeOf((*MockPmax)(nil).AddVolumesToStorageGroupS), varargs...)
}

// Authenticate mocks base method.
func (m *MockPmax) Authenticate(ctx context.Context, configConnect *pmax.ConfigConnect) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, configConnect)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockPmaxMockRecorder) Authenticate(ctx, configConnect any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockPmax)(nil).Authenticate), ctx, configConnect)
}

// CreateFileSystem mocks base method.
func (m *MockPmax) CreateFileSystem(ctx context.Context, symID, name, nasServer, serviceLevel string, sizeInMiB int64) (*v100.FileSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystem", ctx, symID, name, nasServer, serviceLevel, sizeInMiB)
	ret0, _ := ret[0].(*v100.FileSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystem indicates an expected call of CreateFileSystem.
func (mr *MockPmaxMockRecorder) CreateFileSystem(ctx, symID, name, nasServer, serviceLevel, sizeInMiB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystem", reflect.TypeOf((*MockPmax)(nil).CreateFileSystem), ctx, symID, name, nasServer, serviceLevel, sizeInMiB)
}

// CreateHost mocks base method.
func (m *MockPmax) CreateHost(ctx context.Context, symID, hostID string, initiatorIDs []string, hostFlags *v100.HostFlags) (*v100.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHost", ctx, symID, hostID, initiatorIDs, hostFlags)
	ret0, _ := ret[0].(*v100.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHost indicates an expected call of CreateHost.
func (mr *MockPmaxMockRecorder) CreateHost(ctx, symID, hostID, initiatorIDs, hostFlags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHost", reflect.TypeOf((*MockPmax)(nil).CreateHost), ctx, symID, hostID, initiatorIDs, hostFlags)
}

// CreateHostGroup mocks base method.
func (m *MockPmax) CreateHostGroup(ctx context.Context, symID, hostGroupID string, hostIDs []string, hostFlags *v100.HostFlags) (*v100.HostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostGroup", ctx, symID, hostGroupID, hostIDs, hostFlags)
	ret0, _ := ret[0].(*v100.HostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostGroup indicates an expected call of CreateHostGroup.
func (mr *MockPmaxMockRecorder) CreateHostGroup(ctx, symID, hostGroupID, hostIDs, hostFlags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostGroup", reflect.TypeOf((*MockPmax)(nil).CreateHostGroup), ctx, symID, hostGroupID, hostIDs, hostFlags)
}

// CreateMaskingView mocks base method.
func (m *MockPmax) CreateMaskingView(ctx context.Context, symID, maskingViewID, storageGroupID, hostOrhostGroupID string, isHost bool, portGroupID string) (*v100.MaskingView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMaskingView", ctx, symID, maskingViewID, storageGroupID, hostOrhostGroupID, isHost, portGroupID)
	ret0, _ := ret[0].(*v100.MaskingView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMaskingView indicates an expected call of CreateMaskingView.
func (mr *MockPmaxMockRecorder) CreateMaskingView(ctx, symID, maskingViewID, storageGroupID, hostOrhostGroupID, isHost, portGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMaskingView", reflect.TypeOf((*MockPmax)(nil).CreateMaskingView), ctx, symID, maskingViewID, storageGroupID, hostOrhostGroupID, isHost, portGroupID)
}

// CreateMigrationEnvironment mocks base method.
func (m *MockPmax) CreateMigrationEnvironment(ctx context.Context, sourceSymID, remoteSymID string) (*v100.MigrationEnv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMigrationEnvironment", ctx, sourceSymID, remoteSymID)
	ret0, _ := ret[0].(*v100.MigrationEnv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMigrationEnvironment indicates an expected call of CreateMigrationEnvironment.
func (mr *MockPmaxMockRecorder) CreateMigrationEnvironment(ctx, sourceSymID, remoteSymID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMigrationEnvironment", reflect.TypeOf((*MockPmax)(nil).CreateMigrationEnvironment), ctx, sourceSymID, remoteSymID)
}

// CreateNFSExport mocks base method.
func (m *MockPmax) CreateNFSExport(ctx context.Context, symID string, createNFSExportPayload v100.CreateNFSExport) (*v100.NFSExport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNFSExport", ctx, symID, createNFSExportPayload)
	ret0, _ := ret[0].(*v100.NFSExport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNFSExport indicates an expected call of CreateNFSExport.
func (mr *MockPmaxMockRecorder) CreateNFSExport(ctx, symID, createNFSExportPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNFSExport", reflect.TypeOf((*MockPmax)(nil).CreateNFSExport), ctx, symID, createNFSExportPayload)
}

// CreatePortGroup mocks base method.
func (m *MockPmax) CreatePortGroup(ctx context.Context, symID, portGroupID string, dirPorts []v100.PortKey, protocol string) (*v100.PortGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortGroup", ctx, symID, portGroupID, dirPorts, protocol)
	ret0, _ := ret[0].(*v100.PortGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortGroup indicates an expected call of CreatePortGroup.
func (mr *MockPmaxMockRecorder) CreatePortGroup(ctx, symID, portGroupID, dirPorts, protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortGroup", reflect.TypeOf((*MockPmax)(nil).CreatePortGroup), ctx, symID, portGroupID, dirPorts, protocol)
}

// CreateRDFPair mocks base method.
func (m *MockPmax) CreateRDFPair(ctx context.Context, symID, rdfGroupNo, deviceID, rdfMode, rdfType string, establish, exemptConsistency bool) (*v100.RDFDevicePairList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRDFPair", ctx, symID, rdfGroupNo, deviceID, rdfMode, rdfType, establish, exemptConsistency)
	ret0, _ := ret[0].(*v100.RDFDevicePairList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRDFPair indicates an expected call of CreateRDFPair.
func (mr *MockPmaxMockRecorder) CreateRDFPair(ctx, symID, rdfGroupNo, deviceID, rdfMode, rdfType, establish, exemptConsistency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRDFPair", reflect.TypeOf((*MockPmax)(nil).CreateRDFPair), ctx, symID, rdfGroupNo, deviceID, rdfMode, rdfType, establish, exemptConsistency)
}

// CreateSGMigration mocks base method.
func (m *MockPmax) CreateSGMigration(ctx context.Context, localSymID, remoteSymID, storageGroup string) (*v100.MigrationSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSGMigration", ctx, localSymID, remoteSymID, storageGroup)
	ret0, _ := ret[0].(*v100.MigrationSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSGMigration indicates an expected call of CreateSGMigration.
func (mr *MockPmaxMockRecorder) CreateSGMigration(ctx, localSymID, remoteSymID, storageGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSGMigration", reflect.TypeOf((*MockPmax)(nil).CreateSGMigration), ctx, localSymID, remoteSymID, storageGroup)
}

// CreateSGReplica mocks base method.
func (m *MockPmax) CreateSGReplica(ctx context.Context, symID, remoteSymID, rdfMode, rdfGroupNo, sourceSG, remoteSGName, remoteServiceLevel string, bias bool) (*v100.SGRDFInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSGReplica", ctx, symID, remoteSymID, rdfMode, rdfGroupNo, sourceSG, remoteSGName, remoteServiceLevel, bias)
	ret0, _ := ret[0].(*v100.SGRDFInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSGReplica indicates an expected call of CreateSGReplica.
func (mr *MockPmaxMockRecorder) CreateSGReplica(ctx, symID, remoteSymID, rdfMode, rdfGroupNo, sourceSG, remoteSGName, remoteServiceLevel, bias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSGReplica", reflect.TypeOf((*MockPmax)(nil).CreateSGReplica), ctx, symID, remoteSymID, rdfMode, rdfGroupNo, sourceSG, remoteSGName, remoteServiceLevel, bias)
}

// CreateSnapshot mocks base method.
func (m *MockPmax) CreateSnapshot(ctx context.Context, symID, SnapID string, sourceVolumeList []v100.VolumeList, ttl int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, symID, SnapID, sourceVolumeList, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockPmaxMockRecorder) CreateSnapshot(ctx, symID, SnapID, sourceVolumeList, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockPmax)(nil).CreateSnapshot), ctx, symID, SnapID, sourceVolumeList, ttl)
}

// CreateSnapshotPolicy mocks base method.
func (m *MockPmax) CreateSnapshotPolicy(ctx context.Context, symID, snapshotPolicyID, interval string, offsetMins int32, complianceCountWarn, complianceCountCritical int64, optionalPayload map[string]any) (*v100.SnapshotPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotPolicy", ctx, symID, snapshotPolicyID, interval, offsetMins, complianceCountWarn, complianceCountCritical, optionalPayload)
	ret0, _ := ret[0].(*v100.SnapshotPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotPolicy indicates an expected call of CreateSnapshotPolicy.
func (mr *MockPmaxMockRecorder) CreateSnapshotPolicy(ctx, symID, snapshotPolicyID, interval, offsetMins, complianceCountWarn, complianceCountCritical, optionalPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotPolicy", reflect.TypeOf((*MockPmax)(nil).CreateSnapshotPolicy), ctx, symID, snapshotPolicyID, interval, offsetMins, complianceCountWarn, complianceCountCritical, optionalPayload)
}

// CreateStorageGroup mocks base method.
func (m *MockPmax) CreateStorageGroup(ctx context.Context, symID, storageGroupID, srpID, serviceLevel string, thickVolumes bool, optionalPayload map[string]any) (*v100.StorageGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorageGroup", ctx, symID, storageGroupID, srpID, serviceLevel, thickVolumes, optionalPayload)
	ret0, _ := ret[0].(*v100.StorageGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorageGroup indicates an expected call of CreateStorageGroup.
func (mr *MockPmaxMockRecorder) CreateStorageGroup(ctx, symID, storageGroupID, srpID, serviceLevel, thickVolumes, optionalPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageGroup", reflect.TypeOf((*MockPmax)(nil).CreateStorageGroup), ctx, symID, storageGroupID, srpID, serviceLevel, thickVolumes, optionalPayload)
}

// CreateStorageGroupSnapshot mocks base method.
func (m *MockPmax) CreateStorageGroupSnapshot(ctx context.Context, symID, storageGroupID string, payload *v100.CreateStorageGroupSnapshot) (*v100.StorageGroupSnap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorageGroupSnapshot", ctx, symID, storageGroupID, payload)
	ret0, _ := ret[0].(*v100.StorageGroupSnap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorageGroupSnapshot indicates an expected call of CreateStorageGroupSnapshot.
func (mr *MockPmaxMockRecorder) CreateStorageGroupSnapshot(ctx, symID, storageGroupID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageGroupSnapshot", reflect.TypeOf((*MockPmax)(nil).CreateStorageGroupSnapshot), ctx, symID, storageGroupID, payload)
}

// CreateVolumeInProtectedStorageGroupS mocks base method.
func (m *MockPmax) CreateVolumeInProtectedStorageGroupS(ctx context.Context, symID, remoteSymID, storageGroupID, remoteStorageGroupID, volumeName string, volumeSize any, volOpts map[string]any, opts ...http.Header) (*v100.Volume, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, symID, remoteSymID, storageGroupID, remoteStorageGroupID, volumeName, volumeSize, volOpts}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVolumeInProtectedStorageGroupS", varargs...)
	ret0, _ := ret[0].(*v100.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeInProtectedStorageGroupS indicates an expected call of CreateVolumeInProtectedStorageGroupS.
func (mr *MockPmaxMockRecorder) CreateVolumeInProtectedStorageGroupS(ctx, symID, remoteSymID, storageGroupID, remoteStorageGroupID, volumeName, volumeSize, volOpts any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, symID, remoteSymID, storageGroupID, remoteStorageGroupID, volumeName, volumeSize, volOpts}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeInProtectedStorageGroupS", reflect.TypeOf((*MockPmax)(nil).CreateVolumeInProtectedStorageGroupS), varargs...)
}

// CreateVolumeInStorageGroup mocks base method.
func (m *MockPmax) CreateVolumeInStorageGroup(ctx context.Context, symID, storageGroupID, volumeName string, volumeSize any, volOpts map[string]any) (*v100.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeInStorageGroup", ctx, symID, storageGroupID, volumeName, volumeSize, volOpts)
	ret0, _ := ret[0].(*v100.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeInStorageGroup indicates an expected call of CreateVolumeInStorageGroup.
func (mr *MockPmaxMockRecorder) CreateVolumeInStorageGroup(ctx, symID, storageGroupID, volumeName, volumeSize, volOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeInStorageGroup", reflect.TypeOf((*MockPmax)(nil).CreateVolumeInStorageGroup), ctx, symID, storageGroupID, volumeName, volumeSize, volOpts)
}

// CreateVolumeInStorageGroupS mocks base method.
func (m *MockPmax) CreateVolumeInStorageGroupS(ctx context.Context, symID, storageGroupID, volumeName string, volumeSize any, volOpts map[string]any, opts ...http.Header) (*v100.Volume, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, symID, storageGroupID, volumeName, volumeSize, volOpts}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVolumeInStorageGroupS", varargs...)
	ret0, _ := ret[0].(*v100.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeInStorageGroupS indicates an expected call of CreateVolumeInStorageGroupS.
func (mr *MockPmaxMockRecorder) CreateVolumeInStorageGroupS(ctx, symID, storageGroupID, volumeName, volumeSize, volOpts any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, symID, storageGroupID, volumeName, volumeSize, volOpts}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeInStorageGroupS", reflect.TypeOf((*MockPmax)(nil).CreateVolumeInStorageGroupS), varargs...)
}

// DeleteFileSystem mocks base method.
func (m *MockPmax) DeleteFileSystem(ctx context.Context, symID, fsID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystem", ctx, symID, fsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem.
func (mr *MockPmaxMockRecorder) DeleteFileSystem(ctx, symID, fsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystem", reflect.TypeOf((*MockPmax)(nil).DeleteFileSystem), ctx, symID, fsID)
}

// DeleteHost mocks base method.
func (m *MockPmax) DeleteHost(ctx context.Context, symID, hostID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", ctx, symID, hostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockPmaxMockRecorder) DeleteHost(ctx, symID, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockPmax)(nil).DeleteHost), ctx, symID, hostID)
}

// DeleteHostGroup mocks base method.
func (m *MockPmax) DeleteHostGroup(ctx context.Context, symID, hostGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostGroup", ctx, symID, hostGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHostGroup indicates an expected call of DeleteHostGroup.
func (mr *MockPmaxMockRecorder) DeleteHostGroup(ctx, symID, hostGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostGroup", reflect.TypeOf((*MockPmax)(nil).DeleteHostGroup), ctx, symID, hostGroupID)
}

// DeleteMaskingView mocks base method.
func (m *MockPmax) DeleteMaskingView(ctx context.Context, symID, maskingViewID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMaskingView", ctx, symID, maskingViewID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMaskingView indicates an expected call of DeleteMaskingView.
func (mr *MockPmaxMockRecorder) DeleteMaskingView(ctx, symID, maskingViewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMaskingView", reflect.TypeOf((*MockPmax)(nil).DeleteMaskingView), ctx, symID, maskingViewID)
}

// DeleteMigrationEnvironment mocks base method.
func (m *MockPmax) DeleteMigrationEnvironment(ctx context.Context, localSymID, remoteSymID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMigrationEnvironment", ctx, localSymID, remoteSymID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMigrationEnvironment indicates an expected call of DeleteMigrationEnvironment.
func (mr *MockPmaxMockRecorder) DeleteMigrationEnvironment(ctx, localSymID, remoteSymID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMigrationEnvironment", reflect.TypeOf((*MockPmax)(nil).DeleteMigrationEnvironment), ctx, localSymID, remoteSymID)
}

// DeleteNASServer mocks base method.
func (m *MockPmax) DeleteNASServer(ctx context.Context, symID, nasID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNASServer", ctx, symID, nasID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNASServer indicates an expected call of DeleteNASServer.
func (mr *MockPmaxMockRecorder) DeleteNASServer(ctx, symID, nasID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNASServer", reflect.TypeOf((*MockPmax)(nil).DeleteNASServer), ctx, symID, nasID)
}

// DeleteNFSExport mocks base method.
func (m *MockPmax) DeleteNFSExport(ctx context.Context, symID, nfsExportID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNFSExport", ctx, symID, nfsExportID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNFSExport indicates an expected call of DeleteNFSExport.
func (mr *MockPmaxMockRecorder) DeleteNFSExport(ctx, symID, nfsExportID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNFSExport", reflect.TypeOf((*MockPmax)(nil).DeleteNFSExport), ctx, symID, nfsExportID)
}

// DeletePortGroup mocks base method.
func (m *MockPmax) DeletePortGroup(ctx context.Context, symID, portGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortGroup", ctx, symID, portGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortGroup indicates an expected call of DeletePortGroup.
func (mr *MockPmaxMockRecorder) DeletePortGroup(ctx, symID, portGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortGroup", reflect.TypeOf((*MockPmax)(nil).DeletePortGroup), ctx, symID, portGroupID)
}

// DeleteSnapshot mocks base method.
func (m *MockPmax) DeleteSnapshot(ctx context.Context, symID, SnapID string, sourceVolumes []v100.VolumeList, generation int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, symID, SnapID, sourceVolumes, generation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockPmaxMockRecorder) DeleteSnapshot(ctx, symID, SnapID, sourceVolumes, generation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockPmax)(nil).DeleteSnapshot), ctx, symID, SnapID, sourceVolumes, generation)
}

// DeleteSnapshotPolicy mocks base method.
func (m *MockPmax) DeleteSnapshotPolicy(ctx context.Context, symID, snapshotPolicyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotPolicy", ctx, symID, snapshotPolicyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshotPolicy indicates an expected call of DeleteSnapshotPolicy.
func (mr *MockPmaxMockRecorder) DeleteSnapshotPolicy(ctx, symID, snapshotPolicyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotPolicy", reflect.TypeOf((*MockPmax)(nil).DeleteSnapshotPolicy), ctx, symID, snapshotPolicyID)
}

// DeleteSnapshotS mocks base method.
func (m *MockPmax) DeleteSnapshotS(ctx context.Context, symID, SnapID string, sourceVolumes []v100.VolumeList, generation int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotS", ctx, symID, SnapID, sourceVolumes, generation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshotS indicates an expected call of DeleteSnapshotS.
func (mr *MockPmaxMockRecorder) DeleteSnapshotS(ctx, symID, SnapID, sourceVolumes, generation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotS", reflect.TypeOf((*MockPmax)(nil).DeleteSnapshotS), ctx, symID, SnapID, sourceVolumes, generation)
}

// DeleteStorageGroup mocks base method.
func (m *MockPmax) DeleteStorageGroup(ctx context.Context, symID, storageGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageGroup", ctx, symID, storageGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStorageGroup indicates an expected call of DeleteStorageGroup.
func (mr *MockPmaxMockRecorder) DeleteStorageGroup(ctx, symID, storageGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageGroup", reflect.TypeOf((*MockPmax)(nil).DeleteStorageGroup), ctx, symID, storageGroupID)
}

// DeleteStorageGroupSnapshot mocks base method.
func (m *MockPmax) DeleteStorageGroupSnapshot(ctx context.Context, symID, storageGroupID, snapshotID, snapID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageGroupSnapshot", ctx, symID, storageGroupID, snapshotID, snapID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStorageGroupSnapshot indicates an expected call of DeleteStorageGroupSnapshot.
func (mr *MockPmaxMockRecorder) DeleteStorageGroupSnapshot(ctx, symID, storageGroupID, snapshotID, snapID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageGroupSnapshot", reflect.TypeOf((*MockPmax)(nil).DeleteStorageGroupSnapshot), ctx, symID, storageGroupID, snapshotID, snapID)
}

// DeleteVolume mocks base method.
func (m *MockPmax) DeleteVolume(ctx context.Context, symID, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, symID, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockPmaxMockRecorder) DeleteVolume(ctx, symID, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockPmax)(nil).DeleteVolume), ctx, symID, volumeID)
}

// DeleteVolumeIDsIterator mocks base method.
func (m *MockPmax) DeleteVolumeIDsIterator(ctx context.Context, iter *v100.VolumeIterator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeIDsIterator", ctx, iter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeIDsIterator indicates an expected call of DeleteVolumeIDsIterator.
func (mr *MockPmaxMockRecorder) DeleteVolumeIDsIterator(ctx, iter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeIDsIterator", reflect.TypeOf((*MockPmax)(nil).DeleteVolumeIDsIterator), ctx, iter)
}

// ExecuteCreateRDFGroup mocks base method.
func (m *MockPmax) ExecuteCreateRDFGroup(ctx context.Context, symID string, CreateRDFPayload *v100.RDFGroupCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCreateRDFGroup", ctx, symID, CreateRDFPayload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteCreateRDFGroup indicates an expected call of ExecuteCreateRDFGroup.
func (mr *MockPmaxMockRecorder) ExecuteCreateRDFGroup(ctx, symID, CreateRDFPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCreateRDFGroup", reflect.TypeOf((*MockPmax)(nil).ExecuteCreateRDFGroup), ctx, symID, CreateRDFPayload)
}

// ExecuteReplicationActionOnSG mocks base method.
func (m *MockPmax) ExecuteReplicationActionOnSG(ctx context.Context, symID, action, storageGroup, rdfGroup string, force, exemptConsistency, bias bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteReplicationActionOnSG", ctx, symID, action, storageGroup, rdfGroup, force, exemptConsistency, bias)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteReplicationActionOnSG indicates an expected call of ExecuteReplicationActionOnSG.
func (mr *MockPmaxMockRecorder) ExecuteReplicationActionOnSG(ctx, symID, action, storageGroup, rdfGroup, force, exemptConsistency, bias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteReplicationActionOnSG", reflect.TypeOf((*MockPmax)(nil).ExecuteReplicationActionOnSG), ctx, symID, action, storageGroup, rdfGroup, force, exemptConsistency, bias)
}

// ExpandVolume mocks base method.
func (m *MockPmax) ExpandVolume(ctx context.Context, symID, volumeID string, rdfGNo int, volumeSize any, capUnits ...string) (*v100.Volume, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, symID, volumeID, rdfGNo, volumeSize}
	for _, a := range capUnits {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpandVolume", varargs...)
	ret0, _ := ret[0].(*v100.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandVolume indicates an expected call of ExpandVolume.
func (mr *MockPmaxMockRecorder) ExpandVolume(ctx, symID, volumeID, rdfGNo, volumeSize any, capUnits ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, symID, volumeID, rdfGNo, volumeSize}, capUnits...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandVolume", reflect.TypeOf((*MockPmax)(nil).ExpandVolume), varargs...)
}

// GetAllowedArrays mocks base method.
func (m *MockPmax) GetAllowedArrays() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowedArrays")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllowedArrays indicates an expected call of GetAllowedArrays.
func (mr *MockPmaxMockRecorder) GetAllowedArrays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowedArrays", reflect.TypeOf((*MockPmax)(nil).GetAllowedArrays))
}

// GetArrayPerfKeys mocks base method.
func (m *MockPmax) GetArrayPerfKeys(ctx context.Context) (*v100.ArrayKeysResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArrayPerfKeys", ctx)
	ret0, _ := ret[0].(*v100.ArrayKeysResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArrayPerfKeys indicates an expected call of GetArrayPerfKeys.
func (mr *MockPmaxMockRecorder) GetArrayPerfKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrayPerfKeys", reflect.TypeOf((*MockPmax)(nil).GetArrayPerfKeys), ctx)
}

// GetCreateVolInSGPayload mocks base method.
func (m *MockPmax) GetCreateVolInSGPayload(volumeSize any, capUnit, volumeName string, isSync, enableMobility bool, remoteSymID, storageGroupID string, opts ...http.Header) any {
	m.ctrl.T.Helper()
	varargs := []any{volumeSize, capUnit, volumeName, isSync, enableMobility, remoteSymID, storageGroupID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCreateVolInSGPayload", varargs...)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetCreateVolInSGPayload indicates an expected call of GetCreateVolInSGPayload.
func (mr *MockPmaxMockRecorder) GetCreateVolInSGPayload(volumeSize, capUnit, volumeName, isSync, enableMobility, remoteSymID, storageGroupID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{volumeSize, capUnit, volumeName, isSync, enableMobility, remoteSymID, storageGroupID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateVolInSGPayload", reflect.TypeOf((*MockPmax)(nil).GetCreateVolInSGPayload), varargs...)
}

// GetDirectorIDList mocks base method.
func (m *MockPmax) GetDirectorIDList(ctx context.Context, symID string) (*v100.DirectorIDList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectorIDList", ctx, symID)
	ret0, _ := ret[0].(*v100.DirectorIDList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectorIDList indicates an expected call of GetDirectorIDList.
func (mr *MockPmaxMockRecorder) GetDirectorIDList(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectorIDList", reflect.TypeOf((*MockPmax)(nil).GetDirectorIDList), ctx, symID)
}

// GetFileInterfaceByID mocks base method.
func (m *MockPmax) GetFileInterfaceByID(ctx context.Context, symID, interfaceID string) (*v100.FileInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInterfaceByID", ctx, symID, interfaceID)
	ret0, _ := ret[0].(*v100.FileInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInterfaceByID indicates an expected call of GetFileInterfaceByID.
func (mr *MockPmaxMockRecorder) GetFileInterfaceByID(ctx, symID, interfaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInterfaceByID", reflect.TypeOf((*MockPmax)(nil).GetFileInterfaceByID), ctx, symID, interfaceID)
}

// GetFileSystemByID mocks base method.
func (m *MockPmax) GetFileSystemByID(ctx context.Context, symID, fsID string) (*v100.FileSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemByID", ctx, symID, fsID)
	ret0, _ := ret[0].(*v100.FileSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemByID indicates an expected call of GetFileSystemByID.
func (mr *MockPmaxMockRecorder) GetFileSystemByID(ctx, symID, fsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSystemByID", reflect.TypeOf((*MockPmax)(nil).GetFileSystemByID), ctx, symID, fsID)
}

// GetFileSystemList mocks base method.
func (m *MockPmax) GetFileSystemList(ctx context.Context, symID string, query v100.QueryParams) (*v100.FileSystemIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemList", ctx, symID, query)
	ret0, _ := ret[0].(*v100.FileSystemIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemList indicates an expected call of GetFileSystemList.
func (mr *MockPmaxMockRecorder) GetFileSystemList(ctx, symID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSystemList", reflect.TypeOf((*MockPmax)(nil).GetFileSystemList), ctx, symID, query)
}

// GetFileSystemMetricsByID mocks base method.
func (m *MockPmax) GetFileSystemMetricsByID(ctx context.Context, symID, fsID string, metricsQuery []string, firstAvailableTime, lastAvailableTime int64) (*v100.FileSystemMetricsIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemMetricsByID", ctx, symID, fsID, metricsQuery, firstAvailableTime, lastAvailableTime)
	ret0, _ := ret[0].(*v100.FileSystemMetricsIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemMetricsByID indicates an expected call of GetFileSystemMetricsByID.
func (mr *MockPmaxMockRecorder) GetFileSystemMetricsByID(ctx, symID, fsID, metricsQuery, firstAvailableTime, lastAvailableTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSystemMetricsByID", reflect.TypeOf((*MockPmax)(nil).GetFileSystemMetricsByID), ctx, symID, fsID, metricsQuery, firstAvailableTime, lastAvailableTime)
}

// GetFreeLocalAndRemoteRDFg mocks base method.
func (m *MockPmax) GetFreeLocalAndRemoteRDFg(ctx context.Context, localSymmID, remoteSymmID string) (*v100.NextFreeRDFGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeLocalAndRemoteRDFg", ctx, localSymmID, remoteSymmID)
	ret0, _ := ret[0].(*v100.NextFreeRDFGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreeLocalAndRemoteRDFg indicates an expected call of GetFreeLocalAndRemoteRDFg.
func (mr *MockPmaxMockRecorder) GetFreeLocalAndRemoteRDFg(ctx, localSymmID, remoteSymmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeLocalAndRemoteRDFg", reflect.TypeOf((*MockPmax)(nil).GetFreeLocalAndRemoteRDFg), ctx, localSymmID, remoteSymmID)
}

// GetHTTPClient mocks base method.
func (m *MockPmax) GetHTTPClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockPmaxMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockPmax)(nil).GetHTTPClient))
}

// GetHostByID mocks base method.
func (m *MockPmax) GetHostByID(ctx context.Context, symID, hostID string) (*v100.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByID", ctx, symID, hostID)
	ret0, _ := ret[0].(*v100.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByID indicates an expected call of GetHostByID.
func (mr *MockPmaxMockRecorder) GetHostByID(ctx, symID, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByID", reflect.TypeOf((*MockPmax)(nil).GetHostByID), ctx, symID, hostID)
}

// GetHostGroupByID mocks base method.
func (m *MockPmax) GetHostGroupByID(ctx context.Context, symID, hostGroupID string) (*v100.HostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupByID", ctx, symID, hostGroupID)
	ret0, _ := ret[0].(*v100.HostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupByID indicates an expected call of GetHostGroupByID.
func (mr *MockPmaxMockRecorder) GetHostGroupByID(ctx, symID, hostGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroupByID", reflect.TypeOf((*MockPmax)(nil).GetHostGroupByID), ctx, symID, hostGroupID)
}

// GetHostGroupList mocks base method.
func (m *MockPmax) GetHostGroupList(ctx context.Context, symID string) (*v100.HostGroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupList", ctx, symID)
	ret0, _ := ret[0].(*v100.HostGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupList indicates an expected call of GetHostGroupList.
func (mr *MockPmaxMockRecorder) GetHostGroupList(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroupList", reflect.TypeOf((*MockPmax)(nil).GetHostGroupList), ctx, symID)
}

// GetHostList mocks base method.
func (m *MockPmax) GetHostList(ctx context.Context, symID string) (*v100.HostList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostList", ctx, symID)
	ret0, _ := ret[0].(*v100.HostList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostList indicates an expected call of GetHostList.
func (mr *MockPmaxMockRecorder) GetHostList(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostList", reflect.TypeOf((*MockPmax)(nil).GetHostList), ctx, symID)
}

// GetISCSITargets mocks base method.
func (m *MockPmax) GetISCSITargets(ctx context.Context, symID string) ([]pmax.ISCSITarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetISCSITargets", ctx, symID)
	ret0, _ := ret[0].([]pmax.ISCSITarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetISCSITargets indicates an expected call of GetISCSITargets.
func (mr *MockPmaxMockRecorder) GetISCSITargets(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetISCSITargets", reflect.TypeOf((*MockPmax)(nil).GetISCSITargets), ctx, symID)
}

// GetInitiatorByID mocks base method.
func (m *MockPmax) GetInitiatorByID(ctx context.Context, symID, initID string) (*v100.Initiator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitiatorByID", ctx, symID, initID)
	ret0, _ := ret[0].(*v100.Initiator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitiatorByID indicates an expected call of GetInitiatorByID.
func (mr *MockPmaxMockRecorder) GetInitiatorByID(ctx, symID, initID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitiatorByID", reflect.TypeOf((*MockPmax)(nil).GetInitiatorByID), ctx, symID, initID)
}

// GetInitiatorList mocks base method.
func (m *MockPmax) GetInitiatorList(ctx context.Context, symID, initiatorHBA string, isISCSI, inHost bool) (*v100.InitiatorList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitiatorList", ctx, symID, initiatorHBA, isISCSI, inHost)
	ret0, _ := ret[0].(*v100.InitiatorList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitiatorList indicates an expected call of GetInitiatorList.
func (mr *MockPmaxMockRecorder) GetInitiatorList(ctx, symID, initiatorHBA, isISCSI, inHost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitiatorList", reflect.TypeOf((*MockPmax)(nil).GetInitiatorList), ctx, symID, initiatorHBA, isISCSI, inHost)
}

// GetJobByID mocks base method.
func (m *MockPmax) GetJobByID(ctx context.Context, symID, jobID string) (*v100.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", ctx, symID, jobID)
	ret0, _ := ret[0].(*v100.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockPmaxMockRecorder) GetJobByID(ctx, symID, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockPmax)(nil).GetJobByID), ctx, symID, jobID)
}

// GetJobIDList mocks base method.
func (m *MockPmax) GetJobIDList(ctx context.Context, symID, statusQuery string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobIDList", ctx, symID, statusQuery)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobIDList indicates an expected call of GetJobIDList.
func (mr *MockPmaxMockRecorder) GetJobIDList(ctx, symID, statusQuery any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobIDList", reflect.TypeOf((*MockPmax)(nil).GetJobIDList), ctx, symID, statusQuery)
}

// GetListOfTargetAddresses mocks base method.
func (m *MockPmax) GetListOfTargetAddresses(ctx context.Context, symID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOfTargetAddresses", ctx, symID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOfTargetAddresses indicates an expected call of GetListOfTargetAddresses.
func (mr *MockPmaxMockRecorder) GetListOfTargetAddresses(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfTargetAddresses", reflect.TypeOf((*MockPmax)(nil).GetListOfTargetAddresses), ctx, symID)
}

// GetLocalOnlineRDFDirs mocks base method.
func (m *MockPmax) GetLocalOnlineRDFDirs(ctx context.Context, localSymID string) (*v100.RDFDirList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalOnlineRDFDirs", ctx, localSymID)
	ret0, _ := ret[0].(*v100.RDFDirList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalOnlineRDFDirs indicates an expected call of GetLocalOnlineRDFDirs.
func (mr *MockPmaxMockRecorder) GetLocalOnlineRDFDirs(ctx, localSymID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalOnlineRDFDirs", reflect.TypeOf((*MockPmax)(nil).GetLocalOnlineRDFDirs), ctx, localSymID)
}

// GetLocalOnlineRDFPorts mocks base method.
func (m *MockPmax) GetLocalOnlineRDFPorts(ctx context.Context, rdfDir, localSymID string) (*v100.RDFPortList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalOnlineRDFPorts", ctx, rdfDir, localSymID)
	ret0, _ := ret[0].(*v100.RDFPortList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalOnlineRDFPorts indicates an expected call of GetLocalOnlineRDFPorts.
func (mr *MockPmaxMockRecorder) GetLocalOnlineRDFPorts(ctx, rdfDir, localSymID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalOnlineRDFPorts", reflect.TypeOf((*MockPmax)(nil).GetLocalOnlineRDFPorts), ctx, rdfDir, localSymID)
}

// GetLocalRDFPortDetails mocks base method.
func (m *MockPmax) GetLocalRDFPortDetails(ctx context.Context, localSymID, rdfDir string, rdfPort int) (*v100.RDFPortDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalRDFPortDetails", ctx, localSymID, rdfDir, rdfPort)
	ret0, _ := ret[0].(*v100.RDFPortDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalRDFPortDetails indicates an expected call of GetLocalRDFPortDetails.
func (mr *MockPmaxMockRecorder) GetLocalRDFPortDetails(ctx, localSymID, rdfDir, rdfPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalRDFPortDetails", reflect.TypeOf((*MockPmax)(nil).GetLocalRDFPortDetails), ctx, localSymID, rdfDir, rdfPort)
}

// GetMaskingViewByID mocks base method.
func (m *MockPmax) GetMaskingViewByID(ctx context.Context, symID, maskingViewID string) (*v100.MaskingView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaskingViewByID", ctx, symID, maskingViewID)
	ret0, _ := ret[0].(*v100.MaskingView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaskingViewByID indicates an expected call of GetMaskingViewByID.
func (mr *MockPmaxMockRecorder) GetMaskingViewByID(ctx, symID, maskingViewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaskingViewByID", reflect.TypeOf((*MockPmax)(nil).GetMaskingViewByID), ctx, symID, maskingViewID)
}

// GetMaskingViewConnections mocks base method.
func (m *MockPmax) GetMaskingViewConnections(ctx context.Context, symID, maskingViewID, volumeID string) ([]*v100.MaskingViewConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaskingViewConnections", ctx, symID, maskingViewID, volumeID)
	ret0, _ := ret[0].([]*v100.MaskingViewConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaskingViewConnections indicates an expected call of GetMaskingViewConnections.
func (mr *MockPmaxMockRecorder) GetMaskingViewConnections(ctx, symID, maskingViewID, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaskingViewConnections", reflect.TypeOf((*MockPmax)(nil).GetMaskingViewConnections), ctx, symID, maskingViewID, volumeID)
}

// GetMaskingViewList mocks base method.
func (m *MockPmax) GetMaskingViewList(ctx context.Context, symID string) (*v100.MaskingViewList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaskingViewList", ctx, symID)
	ret0, _ := ret[0].(*v100.MaskingViewList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaskingViewList indicates an expected call of GetMaskingViewList.
func (mr *MockPmaxMockRecorder) GetMaskingViewList(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaskingViewList", reflect.TypeOf((*MockPmax)(nil).GetMaskingViewList), ctx, symID)
}

// GetMigrationEnvironment mocks base method.
func (m *MockPmax) GetMigrationEnvironment(ctx context.Context, localSymID, remoteSymID string) (*v100.MigrationEnv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrationEnvironment", ctx, localSymID, remoteSymID)
	ret0, _ := ret[0].(*v100.MigrationEnv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrationEnvironment indicates an expected call of GetMigrationEnvironment.
func (mr *MockPmaxMockRecorder) GetMigrationEnvironment(ctx, localSymID, remoteSymID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrationEnvironment", reflect.TypeOf((*MockPmax)(nil).GetMigrationEnvironment), ctx, localSymID, remoteSymID)
}

// GetNASServerByID mocks base method.
func (m *MockPmax) GetNASServerByID(ctx context.Context, symID, nasID string) (*v100.NASServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNASServerByID", ctx, symID, nasID)
	ret0, _ := ret[0].(*v100.NASServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNASServerByID indicates an expected call of GetNASServerByID.
func (mr *MockPmaxMockRecorder) GetNASServerByID(ctx, symID, nasID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNASServerByID", reflect.TypeOf((*MockPmax)(nil).GetNASServerByID), ctx, symID, nasID)
}

// GetNASServerList mocks base method.
func (m *MockPmax) GetNASServerList(ctx context.Context, symID string, query v100.QueryParams) (*v100.NASServerIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNASServerList", ctx, symID, query)
	ret0, _ := ret[0].(*v100.NASServerIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNASServerList indicates an expected call of GetNASServerList.
func (mr *MockPmaxMockRecorder) GetNASServerList(ctx, symID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNASServerList", reflect.TypeOf((*MockPmax)(nil).GetNASServerList), ctx, symID, query)
}

// GetNFSExportByID mocks base method.
func (m *MockPmax) GetNFSExportByID(ctx context.Context, symID, nfsExportID string) (*v100.NFSExport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFSExportByID", ctx, symID, nfsExportID)
	ret0, _ := ret[0].(*v100.NFSExport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNFSExportByID indicates an expected call of GetNFSExportByID.
func (mr *MockPmaxMockRecorder) GetNFSExportByID(ctx, symID, nfsExportID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFSExportByID", reflect.TypeOf((*MockPmax)(nil).GetNFSExportByID), ctx, symID, nfsExportID)
}

// GetNFSExportList mocks base method.
func (m *MockPmax) GetNFSExportList(ctx context.Context, symID string, query v100.QueryParams) (*v100.NFSExportIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFSExportList", ctx, symID, query)
	ret0, _ := ret[0].(*v100.NFSExportIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNFSExportList indicates an expected call of GetNFSExportList.
func (mr *MockPmaxMockRecorder) GetNFSExportList(ctx, symID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFSExportList", reflect.TypeOf((*MockPmax)(nil).GetNFSExportList), ctx, symID, query)
}

// GetNVMeTCPTargets mocks base method.
func (m *MockPmax) GetNVMeTCPTargets(ctx context.Context, symID string) ([]pmax.NVMeTCPTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNVMeTCPTargets", ctx, symID)
	ret0, _ := ret[0].([]pmax.NVMeTCPTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNVMeTCPTargets indicates an expected call of GetNVMeTCPTargets.
func (mr *MockPmaxMockRecorder) GetNVMeTCPTargets(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNVMeTCPTargets", reflect.TypeOf((*MockPmax)(nil).GetNVMeTCPTargets), ctx, symID)
}

// GetPort mocks base method.
func (m *MockPmax) GetPort(ctx context.Context, symID, directorID, portID string) (*v100.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort", ctx, symID, directorID, portID)
	ret0, _ := ret[0].(*v100.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPort indicates an expected call of GetPort.
func (mr *MockPmaxMockRecorder) GetPort(ctx, symID, directorID, portID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockPmax)(nil).GetPort), ctx, symID, directorID, portID)
}

// GetPortGroupByID mocks base method.
func (m *MockPmax) GetPortGroupByID(ctx context.Context, symID, portGroupID string) (*v100.PortGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortGroupByID", ctx, symID, portGroupID)
	ret0, _ := ret[0].(*v100.PortGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortGroupByID indicates an expected call of GetPortGroupByID.
func (mr *MockPmaxMockRecorder) GetPortGroupByID(ctx, symID, portGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortGroupByID", reflect.TypeOf((*MockPmax)(nil).GetPortGroupByID), ctx, symID, portGroupID)
}

// GetPortGroupList mocks base method.
func (m *MockPmax) GetPortGroupList(ctx context.Context, symID, portGroupType string) (*v100.PortGroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortGroupList", ctx, symID, portGroupType)
	ret0, _ := ret[0].(*v100.PortGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortGroupList indicates an expected call of GetPortGroupList.
func (mr *MockPmaxMockRecorder) GetPortGroupList(ctx, symID, portGroupType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortGroupList", reflect.TypeOf((*MockPmax)(nil).GetPortGroupList), ctx, symID, portGroupType)
}

// GetPortList mocks base method.
func (m *MockPmax) GetPortList(ctx context.Context, symID, directorID, query string) (*v100.PortList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortList", ctx, symID, directorID, query)
	ret0, _ := ret[0].(*v100.PortList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortList indicates an expected call of GetPortList.
func (mr *MockPmaxMockRecorder) GetPortList(ctx, symID, directorID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortList", reflect.TypeOf((*MockPmax)(nil).GetPortList), ctx, symID, directorID, query)
}

// GetPrivVolumeByID mocks base method.
func (m *MockPmax) GetPrivVolumeByID(ctx context.Context, symID, volumeID string) (*v100.VolumeResultPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivVolumeByID", ctx, symID, volumeID)
	ret0, _ := ret[0].(*v100.VolumeResultPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivVolumeByID indicates an expected call of GetPrivVolumeByID.
func (mr *MockPmaxMockRecorder) GetPrivVolumeByID(ctx, symID, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivVolumeByID", reflect.TypeOf((*MockPmax)(nil).GetPrivVolumeByID), ctx, symID, volumeID)
}

// GetProtectedStorageGroup mocks base method.
func (m *MockPmax) GetProtectedStorageGroup(ctx context.Context, symID, storageGroup string) (*v100.RDFStorageGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtectedStorageGroup", ctx, symID, storageGroup)
	ret0, _ := ret[0].(*v100.RDFStorageGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtectedStorageGroup indicates an expected call of GetProtectedStorageGroup.
func (mr *MockPmaxMockRecorder) GetProtectedStorageGroup(ctx, symID, storageGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedStorageGroup", reflect.TypeOf((*MockPmax)(nil).GetProtectedStorageGroup), ctx, symID, storageGroup)
}

// GetRDFDevicePairInfo mocks base method.
func (m *MockPmax) GetRDFDevicePairInfo(ctx context.Context, symID, rdfGroup, volumeID string) (*v100.RDFDevicePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRDFDevicePairInfo", ctx, symID, rdfGroup, volumeID)
	ret0, _ := ret[0].(*v100.RDFDevicePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRDFDevicePairInfo indicates an expected call of GetRDFDevicePairInfo.
func (mr *MockPmaxMockRecorder) GetRDFDevicePairInfo(ctx, symID, rdfGroup, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRDFDevicePairInfo", reflect.TypeOf((*MockPmax)(nil).GetRDFDevicePairInfo), ctx, symID, rdfGroup, volumeID)
}

// GetRDFGroupByID mocks base method.
func (m *MockPmax) GetRDFGroupByID(ctx context.Context, symID, rdfGroup string) (*v100.RDFGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRDFGroupByID", ctx, symID, rdfGroup)
	ret0, _ := ret[0].(*v100.RDFGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRDFGroupByID indicates an expected call of GetRDFGroupByID.
func (mr *MockPmaxMockRecorder) GetRDFGroupByID(ctx, symID, rdfGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRDFGroupByID", reflect.TypeOf((*MockPmax)(nil).GetRDFGroupByID), ctx, symID, rdfGroup)
}

// GetRDFGroupList mocks base method.
func (m *MockPmax) GetRDFGroupList(ctx context.Context, symID string, queryParams v100.QueryParams) (*v100.RDFGroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRDFGroupList", ctx, symID, queryParams)
	ret0, _ := ret[0].(*v100.RDFGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRDFGroupList indicates an expected call of GetRDFGroupList.
func (mr *MockPmaxMockRecorder) GetRDFGroupList(ctx, symID, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRDFGroupList", reflect.TypeOf((*MockPmax)(nil).GetRDFGroupList), ctx, symID, queryParams)
}

// GetRemoteRDFPortOnSAN mocks base method.
func (m *MockPmax) GetRemoteRDFPortOnSAN(ctx context.Context, localSymID, rdfDir, rdfPort string) (*v100.RemoteRDFPortDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteRDFPortOnSAN", ctx, localSymID, rdfDir, rdfPort)
	ret0, _ := ret[0].(*v100.RemoteRDFPortDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteRDFPortOnSAN indicates an expected call of GetRemoteRDFPortOnSAN.
func (mr *MockPmaxMockRecorder) GetRemoteRDFPortOnSAN(ctx, localSymID, rdfDir, rdfPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteRDFPortOnSAN", reflect.TypeOf((*MockPmax)(nil).GetRemoteRDFPortOnSAN), ctx, localSymID, rdfDir, rdfPort)
}

// GetReplicationCapabilities mocks base method.
func (m *MockPmax) GetReplicationCapabilities(ctx context.Context) (*v100.SymReplicationCapabilities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationCapabilities", ctx)
	ret0, _ := ret[0].(*v100.SymReplicationCapabilities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationCapabilities indicates an expected call of GetReplicationCapabilities.
func (mr *MockPmaxMockRecorder) GetReplicationCapabilities(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationCapabilities", reflect.TypeOf((*MockPmax)(nil).GetReplicationCapabilities), ctx)
}

// GetSnapVolumeList mocks base method.
func (m *MockPmax) GetSnapVolumeList(ctx context.Context, symID string, queryParams v100.QueryParams) (*v100.SymVolumeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapVolumeList", ctx, symID, queryParams)
	ret0, _ := ret[0].(*v100.SymVolumeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapVolumeList indicates an expected call of GetSnapVolumeList.
func (mr *MockPmaxMockRecorder) GetSnapVolumeList(ctx, symID, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapVolumeList", reflect.TypeOf((*MockPmax)(nil).GetSnapVolumeList), ctx, symID, queryParams)
}

// GetSnapshotGenerationInfo mocks base method.
func (m *MockPmax) GetSnapshotGenerationInfo(ctx context.Context, symID, volume, SnapID string, generation int64) (*v100.VolumeSnapshotGeneration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotGenerationInfo", ctx, symID, volume, SnapID, generation)
	ret0, _ := ret[0].(*v100.VolumeSnapshotGeneration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotGenerationInfo indicates an expected call of GetSnapshotGenerationInfo.
func (mr *MockPmaxMockRecorder) GetSnapshotGenerationInfo(ctx, symID, volume, SnapID, generation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotGenerationInfo", reflect.TypeOf((*MockPmax)(nil).GetSnapshotGenerationInfo), ctx, symID, volume, SnapID, generation)
}

// GetSnapshotGenerations mocks base method.
func (m *MockPmax) GetSnapshotGenerations(ctx context.Context, symID, volume, SnapID string) (*v100.VolumeSnapshotGenerations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotGenerations", ctx, symID, volume, SnapID)
	ret0, _ := ret[0].(*v100.VolumeSnapshotGenerations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotGenerations indicates an expected call of GetSnapshotGenerations.
func (mr *MockPmaxMockRecorder) GetSnapshotGenerations(ctx, symID, volume, SnapID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotGenerations", reflect.TypeOf((*MockPmax)(nil).GetSnapshotGenerations), ctx, symID, volume, SnapID)
}

// GetSnapshotInfo mocks base method.
func (m *MockPmax) GetSnapshotInfo(ctx context.Context, symID, volume, SnapID string) (*v100.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotInfo", ctx, symID, volume, SnapID)
	ret0, _ := ret[0].(*v100.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotInfo indicates an expected call of GetSnapshotInfo.
func (mr *MockPmaxMockRecorder) GetSnapshotInfo(ctx, symID, volume, SnapID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotInfo", reflect.TypeOf((*MockPmax)(nil).GetSnapshotInfo), ctx, symID, volume, SnapID)
}

// GetSnapshotPolicy mocks base method.
func (m *MockPmax) GetSnapshotPolicy(ctx context.Context, symID, snapshotPolicyID string) (*v100.SnapshotPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotPolicy", ctx, symID, snapshotPolicyID)
	ret0, _ := ret[0].(*v100.SnapshotPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotPolicy indicates an expected call of GetSnapshotPolicy.
func (mr *MockPmaxMockRecorder) GetSnapshotPolicy(ctx, symID, snapshotPolicyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotPolicy", reflect.TypeOf((*MockPmax)(nil).GetSnapshotPolicy), ctx, symID, snapshotPolicyID)
}

// GetSnapshotPolicyList mocks base method.
func (m *MockPmax) GetSnapshotPolicyList(ctx context.Context, symID string) (*v100.SnapshotPolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotPolicyList", ctx, symID)
	ret0, _ := ret[0].(*v100.SnapshotPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotPolicyList indicates an expected call of GetSnapshotPolicyList.
func (mr *MockPmaxMockRecorder) GetSnapshotPolicyList(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotPolicyList", reflect.TypeOf((*MockPmax)(nil).GetSnapshotPolicyList), ctx, symID)
}

// GetStorageGroup mocks base method.
func (m *MockPmax) GetStorageGroup(ctx context.Context, symID, storageGroupID string) (*v100.StorageGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroup", ctx, symID, storageGroupID)
	ret0, _ := ret[0].(*v100.StorageGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroup indicates an expected call of GetStorageGroup.
func (mr *MockPmaxMockRecorder) GetStorageGroup(ctx, symID, storageGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroup", reflect.TypeOf((*MockPmax)(nil).GetStorageGroup), ctx, symID, storageGroupID)
}

// GetStorageGroupIDList mocks base method.
func (m *MockPmax) GetStorageGroupIDList(ctx context.Context, symID, storageGroupIDMatch string, like bool) (*v100.StorageGroupIDList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupIDList", ctx, symID, storageGroupIDMatch, like)
	ret0, _ := ret[0].(*v100.StorageGroupIDList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupIDList indicates an expected call of GetStorageGroupIDList.
func (mr *MockPmaxMockRecorder) GetStorageGroupIDList(ctx, symID, storageGroupIDMatch, like any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupIDList", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupIDList), ctx, symID, storageGroupIDMatch, like)
}

// GetStorageGroupMetrics mocks base method.
func (m *MockPmax) GetStorageGroupMetrics(ctx context.Context, symID, storageGroupID string, metricsQuery []string, firstAvailableDate, lastAvailableTime int64) (*v100.StorageGroupMetricsIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupMetrics", ctx, symID, storageGroupID, metricsQuery, firstAvailableDate, lastAvailableTime)
	ret0, _ := ret[0].(*v100.StorageGroupMetricsIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupMetrics indicates an expected call of GetStorageGroupMetrics.
func (mr *MockPmaxMockRecorder) GetStorageGroupMetrics(ctx, symID, storageGroupID, metricsQuery, firstAvailableDate, lastAvailableTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupMetrics", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupMetrics), ctx, symID, storageGroupID, metricsQuery, firstAvailableDate, lastAvailableTime)
}

// GetStorageGroupMigration mocks base method.
func (m *MockPmax) GetStorageGroupMigration(ctx context.Context, localSymID string) (*v100.MigrationStorageGroups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupMigration", ctx, localSymID)
	ret0, _ := ret[0].(*v100.MigrationStorageGroups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupMigration indicates an expected call of GetStorageGroupMigration.
func (mr *MockPmaxMockRecorder) GetStorageGroupMigration(ctx, localSymID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupMigration", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupMigration), ctx, localSymID)
}

// GetStorageGroupMigrationByID mocks base method.
func (m *MockPmax) GetStorageGroupMigrationByID(ctx context.Context, localSymID, storageGroupID string) (*v100.MigrationSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupMigrationByID", ctx, localSymID, storageGroupID)
	ret0, _ := ret[0].(*v100.MigrationSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupMigrationByID indicates an expected call of GetStorageGroupMigrationByID.
func (mr *MockPmaxMockRecorder) GetStorageGroupMigrationByID(ctx, localSymID, storageGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupMigrationByID", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupMigrationByID), ctx, localSymID, storageGroupID)
}

// GetStorageGroupPerfKeys mocks base method.
func (m *MockPmax) GetStorageGroupPerfKeys(ctx context.Context, symID string) (*v100.StorageGroupKeysResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupPerfKeys", ctx, symID)
	ret0, _ := ret[0].(*v100.StorageGroupKeysResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupPerfKeys indicates an expected call of GetStorageGroupPerfKeys.
func (mr *MockPmaxMockRecorder) GetStorageGroupPerfKeys(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupPerfKeys", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupPerfKeys), ctx, symID)
}

// GetStorageGroupRDFInfo mocks base method.
func (m *MockPmax) GetStorageGroupRDFInfo(ctx context.Context, symID, sgName, rdfGroupNo string) (*v100.StorageGroupRDFG, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupRDFInfo", ctx, symID, sgName, rdfGroupNo)
	ret0, _ := ret[0].(*v100.StorageGroupRDFG)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupRDFInfo indicates an expected call of GetStorageGroupRDFInfo.
func (mr *MockPmaxMockRecorder) GetStorageGroupRDFInfo(ctx, symID, sgName, rdfGroupNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupRDFInfo", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupRDFInfo), ctx, symID, sgName, rdfGroupNo)
}

// GetStorageGroupSnapshotPolicy mocks base method.
func (m *MockPmax) GetStorageGroupSnapshotPolicy(ctx context.Context, symID, snapshotPolicyID, storageGroupID string) (*v100.StorageGroupSnapshotPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupSnapshotPolicy", ctx, symID, snapshotPolicyID, storageGroupID)
	ret0, _ := ret[0].(*v100.StorageGroupSnapshotPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupSnapshotPolicy indicates an expected call of GetStorageGroupSnapshotPolicy.
func (mr *MockPmaxMockRecorder) GetStorageGroupSnapshotPolicy(ctx, symID, snapshotPolicyID, storageGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupSnapshotPolicy", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupSnapshotPolicy), ctx, symID, snapshotPolicyID, storageGroupID)
}

// GetStorageGroupSnapshotSnap mocks base method.
func (m *MockPmax) GetStorageGroupSnapshotSnap(ctx context.Context, symID, storageGroupID, snapshotID, snapID string) (*v100.StorageGroupSnap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupSnapshotSnap", ctx, symID, storageGroupID, snapshotID, snapID)
	ret0, _ := ret[0].(*v100.StorageGroupSnap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupSnapshotSnap indicates an expected call of GetStorageGroupSnapshotSnap.
func (mr *MockPmaxMockRecorder) GetStorageGroupSnapshotSnap(ctx, symID, storageGroupID, snapshotID, snapID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupSnapshotSnap", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupSnapshotSnap), ctx, symID, storageGroupID, snapshotID, snapID)
}

// GetStorageGroupSnapshotSnapIDs mocks base method.
func (m *MockPmax) GetStorageGroupSnapshotSnapIDs(ctx context.Context, symID, storageGroupID, snapshotID string) (*v100.SnapID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupSnapshotSnapIDs", ctx, symID, storageGroupID, snapshotID)
	ret0, _ := ret[0].(*v100.SnapID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupSnapshotSnapIDs indicates an expected call of GetStorageGroupSnapshotSnapIDs.
func (mr *MockPmaxMockRecorder) GetStorageGroupSnapshotSnapIDs(ctx, symID, storageGroupID, snapshotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupSnapshotSnapIDs", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupSnapshotSnapIDs), ctx, symID, storageGroupID, snapshotID)
}

// GetStorageGroupSnapshots mocks base method.
func (m *MockPmax) GetStorageGroupSnapshots(ctx context.Context, symID, storageGroupID string, excludeManualSnaps, excludeSlSnaps bool) (*v100.StorageGroupSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageGroupSnapshots", ctx, symID, storageGroupID, excludeManualSnaps, excludeSlSnaps)
	ret0, _ := ret[0].(*v100.StorageGroupSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageGroupSnapshots indicates an expected call of GetStorageGroupSnapshots.
func (mr *MockPmaxMockRecorder) GetStorageGroupSnapshots(ctx, symID, storageGroupID, excludeManualSnaps, excludeSlSnaps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageGroupSnapshots", reflect.TypeOf((*MockPmax)(nil).GetStorageGroupSnapshots), ctx, symID, storageGroupID, excludeManualSnaps, excludeSlSnaps)
}

// GetStoragePool mocks base method.
func (m *MockPmax) GetStoragePool(ctx context.Context, symID, storagePoolID string) (*v100.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePool", ctx, symID, storagePoolID)
	ret0, _ := ret[0].(*v100.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePool indicates an expected call of GetStoragePool.
func (mr *MockPmaxMockRecorder) GetStoragePool(ctx, symID, storagePoolID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePool", reflect.TypeOf((*MockPmax)(nil).GetStoragePool), ctx, symID, storagePoolID)
}

// GetStoragePoolList mocks base method.
func (m *MockPmax) GetStoragePoolList(ctx context.Context, symID string) (*v100.StoragePoolList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolList", ctx, symID)
	ret0, _ := ret[0].(*v100.StoragePoolList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolList indicates an expected call of GetStoragePoolList.
func (mr *MockPmaxMockRecorder) GetStoragePoolList(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolList", reflect.TypeOf((*MockPmax)(nil).GetStoragePoolList), ctx, symID)
}

// GetSymmetrixByID mocks base method.
func (m *MockPmax) GetSymmetrixByID(ctx context.Context, id string) (*v100.Symmetrix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymmetrixByID", ctx, id)
	ret0, _ := ret[0].(*v100.Symmetrix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymmetrixByID indicates an expected call of GetSymmetrixByID.
func (mr *MockPmaxMockRecorder) GetSymmetrixByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymmetrixByID", reflect.TypeOf((*MockPmax)(nil).GetSymmetrixByID), ctx, id)
}

// GetSymmetrixIDList mocks base method.
func (m *MockPmax) GetSymmetrixIDList(ctx context.Context) (*v100.SymmetrixIDList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymmetrixIDList", ctx)
	ret0, _ := ret[0].(*v100.SymmetrixIDList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymmetrixIDList indicates an expected call of GetSymmetrixIDList.
func (mr *MockPmaxMockRecorder) GetSymmetrixIDList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymmetrixIDList", reflect.TypeOf((*MockPmax)(nil).GetSymmetrixIDList), ctx)
}

// GetVolumeByID mocks base method.
func (m *MockPmax) GetVolumeByID(ctx context.Context, symID, volumeID string) (*v100.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByID", ctx, symID, volumeID)
	ret0, _ := ret[0].(*v100.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByID indicates an expected call of GetVolumeByID.
func (mr *MockPmaxMockRecorder) GetVolumeByID(ctx, symID, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByID", reflect.TypeOf((*MockPmax)(nil).GetVolumeByID), ctx, symID, volumeID)
}

// GetVolumeIDList mocks base method.
func (m *MockPmax) GetVolumeIDList(ctx context.Context, symID, volumeIdentifierMatch string, like bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeIDList", ctx, symID, volumeIdentifierMatch, like)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeIDList indicates an expected call of GetVolumeIDList.
func (mr *MockPmaxMockRecorder) GetVolumeIDList(ctx, symID, volumeIdentifierMatch, like any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeIDList", reflect.TypeOf((*MockPmax)(nil).GetVolumeIDList), ctx, symID, volumeIdentifierMatch, like)
}

// GetVolumeIDListInStorageGroup mocks base method.
func (m *MockPmax) GetVolumeIDListInStorageGroup(ctx context.Context, symID, storageGroupID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeIDListInStorageGroup", ctx, symID, storageGroupID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeIDListInStorageGroup indicates an expected call of GetVolumeIDListInStorageGroup.
func (mr *MockPmaxMockRecorder) GetVolumeIDListInStorageGroup(ctx, symID, storageGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeIDListInStorageGroup", reflect.TypeOf((*MockPmax)(nil).GetVolumeIDListInStorageGroup), ctx, symID, storageGroupID)
}

// GetVolumeIDListWithParams mocks base method.
func (m *MockPmax) GetVolumeIDListWithParams(ctx context.Context, symID string, queryParams map[string]string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeIDListWithParams", ctx, symID, queryParams)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeIDListWithParams indicates an expected call of GetVolumeIDListWithParams.
func (mr *MockPmaxMockRecorder) GetVolumeIDListWithParams(ctx, symID, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeIDListWithParams", reflect.TypeOf((*MockPmax)(nil).GetVolumeIDListWithParams), ctx, symID, queryParams)
}

// GetVolumeIDsIterator mocks base method.
func (m *MockPmax) GetVolumeIDsIterator(ctx context.Context, symID, volumeIdentifierMatch string, like bool) (*v100.VolumeIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeIDsIterator", ctx, symID, volumeIdentifierMatch, like)
	ret0, _ := ret[0].(*v100.VolumeIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeIDsIterator indicates an expected call of GetVolumeIDsIterator.
func (mr *MockPmaxMockRecorder) GetVolumeIDsIterator(ctx, symID, volumeIdentifierMatch, like any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeIDsIterator", reflect.TypeOf((*MockPmax)(nil).GetVolumeIDsIterator), ctx, symID, volumeIdentifierMatch, like)
}

// GetVolumeIDsIteratorPage mocks base method.
func (m *MockPmax) GetVolumeIDsIteratorPage(ctx context.Context, iter *v100.VolumeIterator, from, to int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeIDsIteratorPage", ctx, iter, from, to)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeIDsIteratorPage indicates an expected call of GetVolumeIDsIteratorPage.
func (mr *MockPmaxMockRecorder) GetVolumeIDsIteratorPage(ctx, iter, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeIDsIteratorPage", reflect.TypeOf((*MockPmax)(nil).GetVolumeIDsIteratorPage), ctx, iter, from, to)
}

// GetVolumeIDsIteratorWithParams mocks base method.
func (m *MockPmax) GetVolumeIDsIteratorWithParams(ctx context.Context, symID string, queryParams map[string]string) (*v100.VolumeIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeIDsIteratorWithParams", ctx, symID, queryParams)
	ret0, _ := ret[0].(*v100.VolumeIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeIDsIteratorWithParams indicates an expected call of GetVolumeIDsIteratorWithParams.
func (mr *MockPmaxMockRecorder) GetVolumeIDsIteratorWithParams(ctx, symID, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeIDsIteratorWithParams", reflect.TypeOf((*MockPmax)(nil).GetVolumeIDsIteratorWithParams), ctx, symID, queryParams)
}

// GetVolumeSnapInfo mocks base method.
func (m *MockPmax) GetVolumeSnapInfo(ctx context.Context, symID, volume string) (*v100.SnapshotVolumeGeneration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapInfo", ctx, symID, volume)
	ret0, _ := ret[0].(*v100.SnapshotVolumeGeneration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapInfo indicates an expected call of GetVolumeSnapInfo.
func (mr *MockPmaxMockRecorder) GetVolumeSnapInfo(ctx, symID, volume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapInfo", reflect.TypeOf((*MockPmax)(nil).GetVolumeSnapInfo), ctx, symID, volume)
}

// GetVolumesInStorageGroupIterator mocks base method.
func (m *MockPmax) GetVolumesInStorageGroupIterator(ctx context.Context, symID, storageGroupID string) (*v100.VolumeIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesInStorageGroupIterator", ctx, symID, storageGroupID)
	ret0, _ := ret[0].(*v100.VolumeIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesInStorageGroupIterator indicates an expected call of GetVolumesInStorageGroupIterator.
func (mr *MockPmaxMockRecorder) GetVolumesInStorageGroupIterator(ctx, symID, storageGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesInStorageGroupIterator", reflect.TypeOf((*MockPmax)(nil).GetVolumesInStorageGroupIterator), ctx, symID, storageGroupID)
}

// GetVolumesMetrics mocks base method.
func (m *MockPmax) GetVolumesMetrics(ctx context.Context, symID, storageGroups string, metricsQuery []string, firstAvailableDate, lastAvailableTime int64) (*v100.VolumeMetricsIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesMetrics", ctx, symID, storageGroups, metricsQuery, firstAvailableDate, lastAvailableTime)
	ret0, _ := ret[0].(*v100.VolumeMetricsIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesMetrics indicates an expected call of GetVolumesMetrics.
func (mr *MockPmaxMockRecorder) GetVolumesMetrics(ctx, symID, storageGroups, metricsQuery, firstAvailableDate, lastAvailableTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesMetrics", reflect.TypeOf((*MockPmax)(nil).GetVolumesMetrics), ctx, symID, storageGroups, metricsQuery, firstAvailableDate, lastAvailableTime)
}

// GetVolumesMetricsByID mocks base method.
func (m *MockPmax) GetVolumesMetricsByID(ctx context.Context, symID, volID string, metricsQuery []string, firstAvailableTime, lastAvailableTime int64) (*v100.VolumeMetricsIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesMetricsByID", ctx, symID, volID, metricsQuery, firstAvailableTime, lastAvailableTime)
	ret0, _ := ret[0].(*v100.VolumeMetricsIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesMetricsByID indicates an expected call of GetVolumesMetricsByID.
func (mr *MockPmaxMockRecorder) GetVolumesMetricsByID(ctx, symID, volID, metricsQuery, firstAvailableTime, lastAvailableTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesMetricsByID", reflect.TypeOf((*MockPmax)(nil).GetVolumesMetricsByID), ctx, symID, volID, metricsQuery, firstAvailableTime, lastAvailableTime)
}

// InitiateDeallocationOfTracksFromVolume mocks base method.
func (m *MockPmax) InitiateDeallocationOfTracksFromVolume(ctx context.Context, symID, volumeID string) (*v100.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateDeallocationOfTracksFromVolume", ctx, symID, volumeID)
	ret0, _ := ret[0].(*v100.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateDeallocationOfTracksFromVolume indicates an expected call of InitiateDeallocationOfTracksFromVolume.
func (mr *MockPmaxMockRecorder) InitiateDeallocationOfTracksFromVolume(ctx, symID, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateDeallocationOfTracksFromVolume", reflect.TypeOf((*MockPmax)(nil).InitiateDeallocationOfTracksFromVolume), ctx, symID, volumeID)
}

// IsAllowedArray mocks base method.
func (m *MockPmax) IsAllowedArray(array string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllowedArray", array)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowedArray indicates an expected call of IsAllowedArray.
func (mr *MockPmaxMockRecorder) IsAllowedArray(array any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowedArray", reflect.TypeOf((*MockPmax)(nil).IsAllowedArray), array)
}

// JobToString mocks base method.
func (m *MockPmax) JobToString(job *v100.Job) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobToString", job)
	ret0, _ := ret[0].(string)
	return ret0
}

// JobToString indicates an expected call of JobToString.
func (mr *MockPmaxMockRecorder) JobToString(job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobToString", reflect.TypeOf((*MockPmax)(nil).JobToString), job)
}

// ModifyFileSystem mocks base method.
func (m *MockPmax) ModifyFileSystem(ctx context.Context, symID, fsID string, payload v100.ModifyFileSystem) (*v100.FileSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyFileSystem", ctx, symID, fsID, payload)
	ret0, _ := ret[0].(*v100.FileSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyFileSystem indicates an expected call of ModifyFileSystem.
func (mr *MockPmaxMockRecorder) ModifyFileSystem(ctx, symID, fsID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyFileSystem", reflect.TypeOf((*MockPmax)(nil).ModifyFileSystem), ctx, symID, fsID, payload)
}

// ModifyMigrationSession mocks base method.
func (m *MockPmax) ModifyMigrationSession(ctx context.Context, localSymID, action, storageGroup string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyMigrationSession", ctx, localSymID, action, storageGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyMigrationSession indicates an expected call of ModifyMigrationSession.
func (mr *MockPmaxMockRecorder) ModifyMigrationSession(ctx, localSymID, action, storageGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyMigrationSession", reflect.TypeOf((*MockPmax)(nil).ModifyMigrationSession), ctx, localSymID, action, storageGroup)
}

// ModifyMobilityForVolume mocks base method.
func (m *MockPmax) ModifyMobilityForVolume(ctx context.Context, symID, volumeID string, mobility bool) (*v100.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyMobilityForVolume", ctx, symID, volumeID, mobility)
	ret0, _ := ret[0].(*v100.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyMobilityForVolume indicates an expected call of ModifyMobilityForVolume.
func (mr *MockPmaxMockRecorder) ModifyMobilityForVolume(ctx, symID, volumeID, mobility any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyMobilityForVolume", reflect.TypeOf((*MockPmax)(nil).ModifyMobilityForVolume), ctx, symID, volumeID, mobility)
}

// ModifyNASServer mocks base method.
func (m *MockPmax) ModifyNASServer(ctx context.Context, symID, nasID string, payload v100.ModifyNASServer) (*v100.NASServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyNASServer", ctx, symID, nasID, payload)
	ret0, _ := ret[0].(*v100.NASServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyNASServer indicates an expected call of ModifyNASServer.
func (mr *MockPmaxMockRecorder) ModifyNASServer(ctx, symID, nasID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyNASServer", reflect.TypeOf((*MockPmax)(nil).ModifyNASServer), ctx, symID, nasID, payload)
}

// ModifyNFSExport mocks base method.
func (m *MockPmax) ModifyNFSExport(ctx context.Context, symID, nfsExportID string, payload v100.ModifyNFSExport) (*v100.NFSExport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyNFSExport", ctx, symID, nfsExportID, payload)
	ret0, _ := ret[0].(*v100.NFSExport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyNFSExport indicates an expected call of ModifyNFSExport.
func (mr *MockPmaxMockRecorder) ModifyNFSExport(ctx, symID, nfsExportID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyNFSExport", reflect.TypeOf((*MockPmax)(nil).ModifyNFSExport), ctx, symID, nfsExportID, payload)
}

// ModifySnapshot mocks base method.
func (m *MockPmax) ModifySnapshot(ctx context.Context, symID string, sourceVol, targetVol []v100.VolumeList, SnapID, action, newSnapID string, generation int64, isCopy bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifySnapshot", ctx, symID, sourceVol, targetVol, SnapID, action, newSnapID, generation, isCopy)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifySnapshot indicates an expected call of ModifySnapshot.
func (mr *MockPmaxMockRecorder) ModifySnapshot(ctx, symID, sourceVol, targetVol, SnapID, action, newSnapID, generation, isCopy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifySnapshot", reflect.TypeOf((*MockPmax)(nil).ModifySnapshot), ctx, symID, sourceVol, targetVol, SnapID, action, newSnapID, generation, isCopy)
}

// ModifySnapshotS mocks base method.
func (m *MockPmax) ModifySnapshotS(ctx context.Context, symID string, sourceVol, targetVol []v100.VolumeList, SnapID, action, newSnapID string, generation int64, isCopy bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifySnapshotS", ctx, symID, sourceVol, targetVol, SnapID, action, newSnapID, generation, isCopy)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifySnapshotS indicates an expected call of ModifySnapshotS.
func (mr *MockPmaxMockRecorder) ModifySnapshotS(ctx, symID, sourceVol, targetVol, SnapID, action, newSnapID, generation, isCopy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifySnapshotS", reflect.TypeOf((*MockPmax)(nil).ModifySnapshotS), ctx, symID, sourceVol, targetVol, SnapID, action, newSnapID, generation, isCopy)
}

// ModifyStorageGroupSnapshot mocks base method.
func (m *MockPmax) ModifyStorageGroupSnapshot(ctx context.Context, symID, storageGroupID, snapshotID, snapID string, payload *v100.ModifyStorageGroupSnapshot) (*v100.StorageGroupSnap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyStorageGroupSnapshot", ctx, symID, storageGroupID, snapshotID, snapID, payload)
	ret0, _ := ret[0].(*v100.StorageGroupSnap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyStorageGroupSnapshot indicates an expected call of ModifyStorageGroupSnapshot.
func (mr *MockPmaxMockRecorder) ModifyStorageGroupSnapshot(ctx, symID, storageGroupID, snapshotID, snapID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyStorageGroupSnapshot", reflect.TypeOf((*MockPmax)(nil).ModifyStorageGroupSnapshot), ctx, symID, storageGroupID, snapshotID, snapID, payload)
}

// RefreshSymmetrix mocks base method.
func (m *MockPmax) RefreshSymmetrix(ctx context.Context, symID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSymmetrix", ctx, symID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshSymmetrix indicates an expected call of RefreshSymmetrix.
func (mr *MockPmaxMockRecorder) RefreshSymmetrix(ctx, symID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSymmetrix", reflect.TypeOf((*MockPmax)(nil).RefreshSymmetrix), ctx, symID)
}

// RemoveVolumesFromProtectedStorageGroup mocks base method.
func (m *MockPmax) RemoveVolumesFromProtectedStorageGroup(ctx context.Context, symID, storageGroupID, remoteSymID, remoteStorageGroupID string, force bool, volumeIDs ...string) (*v100.StorageGroup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, symID, storageGroupID, remoteSymID, remoteStorageGroupID, force}
	for _, a := range volumeIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveVolumesFromProtectedStorageGroup", varargs...)
	ret0, _ := ret[0].(*v100.StorageGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVolumesFromProtectedStorageGroup indicates an expected call of RemoveVolumesFromProtectedStorageGroup.
func (mr *MockPmaxMockRecorder) RemoveVolumesFromProtectedStorageGroup(ctx, symID, storageGroupID, remoteSymID, remoteStorageGroupID, force any, volumeIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, symID, storageGroupID, remoteSymID, remoteStorageGroupID, force}, volumeIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolumesFromProtectedStorageGroup", reflect.TypeOf((*MockPmax)(nil).RemoveVolumesFromProtectedStorageGroup), varargs...)
}

// RemoveVolumesFromStorageGroup mocks base method.
func (m *MockPmax) RemoveVolumesFromStorageGroup(ctx context.Context, symID, storageGroupID string, force bool, volumeIDs ...string) (*v100.StorageGroup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, symID, storageGroupID, force}
	for _, a := range volumeIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveVolumesFromStorageGroup", varargs...)
	ret0, _ := ret[0].(*v100.StorageGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVolumesFromStorageGroup indicates an expected call of RemoveVolumesFromStorageGroup.
func (mr *MockPmaxMockRecorder) RemoveVolumesFromStorageGroup(ctx, symID, storageGroupID, force any, volumeIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, symID, storageGroupID, force}, volumeIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolumesFromStorageGroup", reflect.TypeOf((*MockPmax)(nil).RemoveVolumesFromStorageGroup), varargs...)
}

// RenameMaskingView mocks base method.
func (m *MockPmax) RenameMaskingView(ctx context.Context, symID, maskingViewID, newName string) (*v100.MaskingView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameMaskingView", ctx, symID, maskingViewID, newName)
	ret0, _ := ret[0].(*v100.MaskingView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameMaskingView indicates an expected call of RenameMaskingView.
func (mr *MockPmaxMockRecorder) RenameMaskingView(ctx, symID, maskingViewID, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameMaskingView", reflect.TypeOf((*MockPmax)(nil).RenameMaskingView), ctx, symID, maskingViewID, newName)
}

// RenamePortGroup mocks base method.
func (m *MockPmax) RenamePortGroup(ctx context.Context, symID, portGroupID, newName string) (*v100.PortGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenamePortGroup", ctx, symID, portGroupID, newName)
	ret0, _ := ret[0].(*v100.PortGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenamePortGroup indicates an expected call of RenamePortGroup.
func (mr *MockPmaxMockRecorder) RenamePortGroup(ctx, symID, portGroupID, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenamePortGroup", reflect.TypeOf((*MockPmax)(nil).RenamePortGroup), ctx, symID, portGroupID, newName)
}

// RenameVolume mocks base method.
func (m *MockPmax) RenameVolume(ctx context.Context, symID, volumeID, newName string) (*v100.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameVolume", ctx, symID, volumeID, newName)
	ret0, _ := ret[0].(*v100.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameVolume indicates an expected call of RenameVolume.
func (mr *MockPmaxMockRecorder) RenameVolume(ctx, symID, volumeID, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameVolume", reflect.TypeOf((*MockPmax)(nil).RenameVolume), ctx, symID, volumeID, newName)
}

// SetAllowedArrays mocks base method.
func (m *MockPmax) SetAllowedArrays(arrays []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAllowedArrays", arrays)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAllowedArrays indicates an expected call of SetAllowedArrays.
func (mr *MockPmaxMockRecorder) SetAllowedArrays(arrays any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllowedArrays", reflect.TypeOf((*MockPmax)(nil).SetAllowedArrays), arrays)
}

// UpdateHostFlags mocks base method.
func (m *MockPmax) UpdateHostFlags(ctx context.Context, symID, hostID string, hostFlags *v100.HostFlags) (*v100.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostFlags", ctx, symID, hostID, hostFlags)
	ret0, _ := ret[0].(*v100.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostFlags indicates an expected call of UpdateHostFlags.
func (mr *MockPmaxMockRecorder) UpdateHostFlags(ctx, symID, hostID, hostFlags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostFlags", reflect.TypeOf((*MockPmax)(nil).UpdateHostFlags), ctx, symID, hostID, hostFlags)
}

// UpdateHostGroupFlags mocks base method.
func (m *MockPmax) UpdateHostGroupFlags(ctx context.Context, symID, hostGroupID string, hostFlags *v100.HostFlags) (*v100.HostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostGroupFlags", ctx, symID, hostGroupID, hostFlags)
	ret0, _ := ret[0].(*v100.HostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostGroupFlags indicates an expected call of UpdateHostGroupFlags.
func (mr *MockPmaxMockRecorder) UpdateHostGroupFlags(ctx, symID, hostGroupID, hostFlags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostGroupFlags", reflect.TypeOf((*MockPmax)(nil).UpdateHostGroupFlags), ctx, symID, hostGroupID, hostFlags)
}

// UpdateHostGroupHosts mocks base method.
func (m *MockPmax) UpdateHostGroupHosts(ctx context.Context, symID, hostGroupID string, hostIDs []string) (*v100.HostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostGroupHosts", ctx, symID, hostGroupID, hostIDs)
	ret0, _ := ret[0].(*v100.HostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostGroupHosts indicates an expected call of UpdateHostGroupHosts.
func (mr *MockPmaxMockRecorder) UpdateHostGroupHosts(ctx, symID, hostGroupID, hostIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostGroupHosts", reflect.TypeOf((*MockPmax)(nil).UpdateHostGroupHosts), ctx, symID, hostGroupID, hostIDs)
}

// UpdateHostGroupName mocks base method.
func (m *MockPmax) UpdateHostGroupName(ctx context.Context, symID, oldHostGroupID, newHostGroupID string) (*v100.HostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostGroupName", ctx, symID, oldHostGroupID, newHostGroupID)
	ret0, _ := ret[0].(*v100.HostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostGroupName indicates an expected call of UpdateHostGroupName.
func (mr *MockPmaxMockRecorder) UpdateHostGroupName(ctx, symID, oldHostGroupID, newHostGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostGroupName", reflect.TypeOf((*MockPmax)(nil).UpdateHostGroupName), ctx, symID, oldHostGroupID, newHostGroupID)
}

// UpdateHostInitiators mocks base method.
func (m *MockPmax) UpdateHostInitiators(ctx context.Context, symID string, host *v100.Host, initiatorIDs []string) (*v100.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostInitiators", ctx, symID, host, initiatorIDs)
	ret0, _ := ret[0].(*v100.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostInitiators indicates an expected call of UpdateHostInitiators.
func (mr *MockPmaxMockRecorder) UpdateHostInitiators(ctx, symID, host, initiatorIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostInitiators", reflect.TypeOf((*MockPmax)(nil).UpdateHostInitiators), ctx, symID, host, initiatorIDs)
}

// UpdateHostName mocks base method.
func (m *MockPmax) UpdateHostName(ctx context.Context, symID, oldHostID, newHostID string) (*v100.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostName", ctx, symID, oldHostID, newHostID)
	ret0, _ := ret[0].(*v100.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostName indicates an expected call of UpdateHostName.
func (mr *MockPmaxMockRecorder) UpdateHostName(ctx, symID, oldHostID, newHostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostName", reflect.TypeOf((*MockPmax)(nil).UpdateHostName), ctx, symID, oldHostID, newHostID)
}

// UpdatePortGroup mocks base method.
func (m *MockPmax) UpdatePortGroup(ctx context.Context, symID, portGroupID string, ports []v100.PortKey) (*v100.PortGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortGroup", ctx, symID, portGroupID, ports)
	ret0, _ := ret[0].(*v100.PortGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortGroup indicates an expected call of UpdatePortGroup.
func (mr *MockPmaxMockRecorder) UpdatePortGroup(ctx, symID, portGroupID, ports any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortGroup", reflect.TypeOf((*MockPmax)(nil).UpdatePortGroup), ctx, symID, portGroupID, ports)
}

// UpdateSnapshotPolicy mocks base method.
func (m *MockPmax) UpdateSnapshotPolicy(ctx context.Context, symID, action, snapshotPolicyID string, optionalPayload map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshotPolicy", ctx, symID, action, snapshotPolicyID, optionalPayload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnapshotPolicy indicates an expected call of UpdateSnapshotPolicy.
func (mr *MockPmaxMockRecorder) UpdateSnapshotPolicy(ctx, symID, action, snapshotPolicyID, optionalPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotPolicy", reflect.TypeOf((*MockPmax)(nil).UpdateSnapshotPolicy), ctx, symID, action, snapshotPolicyID, optionalPayload)
}

// UpdateStorageGroup mocks base method.
func (m *MockPmax) UpdateStorageGroup(ctx context.Context, symID, storageGroupID string, payload any) (*v100.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageGroup", ctx, symID, storageGroupID, payload)
	ret0, _ := ret[0].(*v100.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStorageGroup indicates an expected call of UpdateStorageGroup.
func (mr *MockPmaxMockRecorder) UpdateStorageGroup(ctx, symID, storageGroupID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageGroup", reflect.TypeOf((*MockPmax)(nil).UpdateStorageGroup), ctx, symID, storageGroupID, payload)
}

// UpdateStorageGroupS mocks base method.
func (m *MockPmax) UpdateStorageGroupS(ctx context.Context, symID, storageGroupID string, payload any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageGroupS", ctx, symID, storageGroupID, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStorageGroupS indicates an expected call of UpdateStorageGroupS.
func (mr *MockPmaxMockRecorder) UpdateStorageGroupS(ctx, symID, storageGroupID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageGroupS", reflect.TypeOf((*MockPmax)(nil).UpdateStorageGroupS), ctx, symID, storageGroupID, payload)
}

// WaitOnJobCompletion mocks base method.
func (m *MockPmax) WaitOnJobCompletion(ctx context.Context, symID, jobID string) (*v100.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitOnJobCompletion", ctx, symID, jobID)
	ret0, _ := ret[0].(*v100.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitOnJobCompletion indicates an expected call of WaitOnJobCompletion.
func (mr *MockPmaxMockRecorder) WaitOnJobCompletion(ctx, symID, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitOnJobCompletion", reflect.TypeOf((*MockPmax)(nil).WaitOnJobCompletion), ctx, symID, jobID)
}

// WithSymmetrixID mocks base method.
func (m *MockPmax) WithSymmetrixID(symmetrixID string) pmax.Pmax {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSymmetrixID", symmetrixID)
	ret0, _ := ret[0].(pmax.Pmax)
	return ret0
}

// WithSymmetrixID indicates an expected call of WithSymmetrixID.
func (mr *MockPmaxMockRecorder) WithSymmetrixID(symmetrixID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSymmetrixID", reflect.TypeOf((*MockPmax)(nil).WithSymmetrixID), symmetrixID)
}
