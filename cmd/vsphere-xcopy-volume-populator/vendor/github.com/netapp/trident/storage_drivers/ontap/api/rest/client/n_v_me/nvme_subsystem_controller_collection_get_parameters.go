// Code generated by go-swagger; DO NOT EDIT.

package n_v_me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNvmeSubsystemControllerCollectionGetParams creates a new NvmeSubsystemControllerCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNvmeSubsystemControllerCollectionGetParams() *NvmeSubsystemControllerCollectionGetParams {
	return &NvmeSubsystemControllerCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNvmeSubsystemControllerCollectionGetParamsWithTimeout creates a new NvmeSubsystemControllerCollectionGetParams object
// with the ability to set a timeout on a request.
func NewNvmeSubsystemControllerCollectionGetParamsWithTimeout(timeout time.Duration) *NvmeSubsystemControllerCollectionGetParams {
	return &NvmeSubsystemControllerCollectionGetParams{
		timeout: timeout,
	}
}

// NewNvmeSubsystemControllerCollectionGetParamsWithContext creates a new NvmeSubsystemControllerCollectionGetParams object
// with the ability to set a context for a request.
func NewNvmeSubsystemControllerCollectionGetParamsWithContext(ctx context.Context) *NvmeSubsystemControllerCollectionGetParams {
	return &NvmeSubsystemControllerCollectionGetParams{
		Context: ctx,
	}
}

// NewNvmeSubsystemControllerCollectionGetParamsWithHTTPClient creates a new NvmeSubsystemControllerCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNvmeSubsystemControllerCollectionGetParamsWithHTTPClient(client *http.Client) *NvmeSubsystemControllerCollectionGetParams {
	return &NvmeSubsystemControllerCollectionGetParams{
		HTTPClient: client,
	}
}

/*
NvmeSubsystemControllerCollectionGetParams contains all the parameters to send to the API endpoint

	for the nvme subsystem controller collection get operation.

	Typically these are written to a http.Request.
*/
type NvmeSubsystemControllerCollectionGetParams struct {

	/* AdminQueueDepth.

	   Filter by admin_queue.depth
	*/
	AdminQueueDepth *int64

	/* DhHmacChapGroupSize.

	   Filter by dh_hmac_chap.group_size
	*/
	DhHmacChapGroupSize *string

	/* DhHmacChapHashFunction.

	   Filter by dh_hmac_chap.hash_function
	*/
	DhHmacChapHashFunction *string

	/* DhHmacChapMode.

	   Filter by dh_hmac_chap.mode
	*/
	DhHmacChapMode *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* HostID.

	   Filter by host.id
	*/
	HostID *string

	/* HostNqn.

	   Filter by host.nqn
	*/
	HostNqn *string

	/* HostTransportAddress.

	   Filter by host.transport_address
	*/
	HostTransportAddress *string

	/* ID.

	   Filter by id
	*/
	ID *string

	/* InterfaceName.

	   Filter by interface.name
	*/
	InterfaceName *string

	/* InterfaceTransportAddress.

	   Filter by interface.transport_address
	*/
	InterfaceTransportAddress *string

	/* InterfaceUUID.

	   Filter by interface.uuid
	*/
	InterfaceUUID *string

	/* IoQueueCount.

	   Filter by io_queue.count
	*/
	IoQueueCount *int64

	/* IoQueueDepth.

	   Filter by io_queue.depth
	*/
	IoQueueDepth *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeName *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUID *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SubsystemName.

	   Filter by subsystem.name
	*/
	SubsystemName *string

	/* SubsystemUUID.

	   Filter by subsystem.uuid
	*/
	SubsystemUUID *string

	/* SvmName.

	   Filter by svm.name
	*/
	SvmName *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SvmUUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nvme subsystem controller collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeSubsystemControllerCollectionGetParams) WithDefaults() *NvmeSubsystemControllerCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nvme subsystem controller collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeSubsystemControllerCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := NvmeSubsystemControllerCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithTimeout(timeout time.Duration) *NvmeSubsystemControllerCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithContext(ctx context.Context) *NvmeSubsystemControllerCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithHTTPClient(client *http.Client) *NvmeSubsystemControllerCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAdminQueueDepth adds the adminQueueDepth to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithAdminQueueDepth(adminQueueDepth *int64) *NvmeSubsystemControllerCollectionGetParams {
	o.SetAdminQueueDepth(adminQueueDepth)
	return o
}

// SetAdminQueueDepth adds the adminQueueDepth to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetAdminQueueDepth(adminQueueDepth *int64) {
	o.AdminQueueDepth = adminQueueDepth
}

// WithDhHmacChapGroupSize adds the dhHmacChapGroupSize to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithDhHmacChapGroupSize(dhHmacChapGroupSize *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetDhHmacChapGroupSize(dhHmacChapGroupSize)
	return o
}

// SetDhHmacChapGroupSize adds the dhHmacChapGroupSize to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetDhHmacChapGroupSize(dhHmacChapGroupSize *string) {
	o.DhHmacChapGroupSize = dhHmacChapGroupSize
}

// WithDhHmacChapHashFunction adds the dhHmacChapHashFunction to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithDhHmacChapHashFunction(dhHmacChapHashFunction *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetDhHmacChapHashFunction(dhHmacChapHashFunction)
	return o
}

// SetDhHmacChapHashFunction adds the dhHmacChapHashFunction to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetDhHmacChapHashFunction(dhHmacChapHashFunction *string) {
	o.DhHmacChapHashFunction = dhHmacChapHashFunction
}

// WithDhHmacChapMode adds the dhHmacChapMode to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithDhHmacChapMode(dhHmacChapMode *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetDhHmacChapMode(dhHmacChapMode)
	return o
}

// SetDhHmacChapMode adds the dhHmacChapMode to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetDhHmacChapMode(dhHmacChapMode *string) {
	o.DhHmacChapMode = dhHmacChapMode
}

// WithFields adds the fields to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithFields(fields []string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithHostID adds the hostID to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithHostID(hostID *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetHostID(hostID)
	return o
}

// SetHostID adds the hostId to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetHostID(hostID *string) {
	o.HostID = hostID
}

// WithHostNqn adds the hostNqn to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithHostNqn(hostNqn *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetHostNqn(hostNqn)
	return o
}

// SetHostNqn adds the hostNqn to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetHostNqn(hostNqn *string) {
	o.HostNqn = hostNqn
}

// WithHostTransportAddress adds the hostTransportAddress to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithHostTransportAddress(hostTransportAddress *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetHostTransportAddress(hostTransportAddress)
	return o
}

// SetHostTransportAddress adds the hostTransportAddress to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetHostTransportAddress(hostTransportAddress *string) {
	o.HostTransportAddress = hostTransportAddress
}

// WithID adds the id to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithID(id *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetID(id *string) {
	o.ID = id
}

// WithInterfaceName adds the interfaceName to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithInterfaceName(interfaceName *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetInterfaceName(interfaceName)
	return o
}

// SetInterfaceName adds the interfaceName to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetInterfaceName(interfaceName *string) {
	o.InterfaceName = interfaceName
}

// WithInterfaceTransportAddress adds the interfaceTransportAddress to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithInterfaceTransportAddress(interfaceTransportAddress *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetInterfaceTransportAddress(interfaceTransportAddress)
	return o
}

// SetInterfaceTransportAddress adds the interfaceTransportAddress to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetInterfaceTransportAddress(interfaceTransportAddress *string) {
	o.InterfaceTransportAddress = interfaceTransportAddress
}

// WithInterfaceUUID adds the interfaceUUID to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithInterfaceUUID(interfaceUUID *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetInterfaceUUID(interfaceUUID)
	return o
}

// SetInterfaceUUID adds the interfaceUuid to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetInterfaceUUID(interfaceUUID *string) {
	o.InterfaceUUID = interfaceUUID
}

// WithIoQueueCount adds the ioQueueCount to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithIoQueueCount(ioQueueCount *int64) *NvmeSubsystemControllerCollectionGetParams {
	o.SetIoQueueCount(ioQueueCount)
	return o
}

// SetIoQueueCount adds the ioQueueCount to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetIoQueueCount(ioQueueCount *int64) {
	o.IoQueueCount = ioQueueCount
}

// WithIoQueueDepth adds the ioQueueDepth to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithIoQueueDepth(ioQueueDepth *int64) *NvmeSubsystemControllerCollectionGetParams {
	o.SetIoQueueDepth(ioQueueDepth)
	return o
}

// SetIoQueueDepth adds the ioQueueDepth to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetIoQueueDepth(ioQueueDepth *int64) {
	o.IoQueueDepth = ioQueueDepth
}

// WithMaxRecords adds the maxRecords to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithMaxRecords(maxRecords *int64) *NvmeSubsystemControllerCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNodeName adds the nodeName to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithNodeName(nodeName *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetNodeName(nodeName)
	return o
}

// SetNodeName adds the nodeName to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetNodeName(nodeName *string) {
	o.NodeName = nodeName
}

// WithNodeUUID adds the nodeUUID to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithNodeUUID(nodeUUID *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetNodeUUID(nodeUUID)
	return o
}

// SetNodeUUID adds the nodeUuid to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetNodeUUID(nodeUUID *string) {
	o.NodeUUID = nodeUUID
}

// WithOrderBy adds the orderBy to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithOrderBy(orderBy []string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithReturnRecords(returnRecords *bool) *NvmeSubsystemControllerCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *NvmeSubsystemControllerCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSubsystemName adds the subsystemName to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithSubsystemName(subsystemName *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetSubsystemName(subsystemName)
	return o
}

// SetSubsystemName adds the subsystemName to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetSubsystemName(subsystemName *string) {
	o.SubsystemName = subsystemName
}

// WithSubsystemUUID adds the subsystemUUID to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithSubsystemUUID(subsystemUUID *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetSubsystemUUID(subsystemUUID)
	return o
}

// SetSubsystemUUID adds the subsystemUuid to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetSubsystemUUID(subsystemUUID *string) {
	o.SubsystemUUID = subsystemUUID
}

// WithSvmName adds the svmName to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithSvmName(svmName *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetSvmName(svmName)
	return o
}

// SetSvmName adds the svmName to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetSvmName(svmName *string) {
	o.SvmName = svmName
}

// WithSvmUUID adds the svmUUID to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) WithSvmUUID(svmUUID *string) *NvmeSubsystemControllerCollectionGetParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the nvme subsystem controller collection get params
func (o *NvmeSubsystemControllerCollectionGetParams) SetSvmUUID(svmUUID *string) {
	o.SvmUUID = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *NvmeSubsystemControllerCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AdminQueueDepth != nil {

		// query param admin_queue.depth
		var qrAdminQueueDepth int64

		if o.AdminQueueDepth != nil {
			qrAdminQueueDepth = *o.AdminQueueDepth
		}
		qAdminQueueDepth := swag.FormatInt64(qrAdminQueueDepth)
		if qAdminQueueDepth != "" {

			if err := r.SetQueryParam("admin_queue.depth", qAdminQueueDepth); err != nil {
				return err
			}
		}
	}

	if o.DhHmacChapGroupSize != nil {

		// query param dh_hmac_chap.group_size
		var qrDhHmacChapGroupSize string

		if o.DhHmacChapGroupSize != nil {
			qrDhHmacChapGroupSize = *o.DhHmacChapGroupSize
		}
		qDhHmacChapGroupSize := qrDhHmacChapGroupSize
		if qDhHmacChapGroupSize != "" {

			if err := r.SetQueryParam("dh_hmac_chap.group_size", qDhHmacChapGroupSize); err != nil {
				return err
			}
		}
	}

	if o.DhHmacChapHashFunction != nil {

		// query param dh_hmac_chap.hash_function
		var qrDhHmacChapHashFunction string

		if o.DhHmacChapHashFunction != nil {
			qrDhHmacChapHashFunction = *o.DhHmacChapHashFunction
		}
		qDhHmacChapHashFunction := qrDhHmacChapHashFunction
		if qDhHmacChapHashFunction != "" {

			if err := r.SetQueryParam("dh_hmac_chap.hash_function", qDhHmacChapHashFunction); err != nil {
				return err
			}
		}
	}

	if o.DhHmacChapMode != nil {

		// query param dh_hmac_chap.mode
		var qrDhHmacChapMode string

		if o.DhHmacChapMode != nil {
			qrDhHmacChapMode = *o.DhHmacChapMode
		}
		qDhHmacChapMode := qrDhHmacChapMode
		if qDhHmacChapMode != "" {

			if err := r.SetQueryParam("dh_hmac_chap.mode", qDhHmacChapMode); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.HostID != nil {

		// query param host.id
		var qrHostID string

		if o.HostID != nil {
			qrHostID = *o.HostID
		}
		qHostID := qrHostID
		if qHostID != "" {

			if err := r.SetQueryParam("host.id", qHostID); err != nil {
				return err
			}
		}
	}

	if o.HostNqn != nil {

		// query param host.nqn
		var qrHostNqn string

		if o.HostNqn != nil {
			qrHostNqn = *o.HostNqn
		}
		qHostNqn := qrHostNqn
		if qHostNqn != "" {

			if err := r.SetQueryParam("host.nqn", qHostNqn); err != nil {
				return err
			}
		}
	}

	if o.HostTransportAddress != nil {

		// query param host.transport_address
		var qrHostTransportAddress string

		if o.HostTransportAddress != nil {
			qrHostTransportAddress = *o.HostTransportAddress
		}
		qHostTransportAddress := qrHostTransportAddress
		if qHostTransportAddress != "" {

			if err := r.SetQueryParam("host.transport_address", qHostTransportAddress); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.InterfaceName != nil {

		// query param interface.name
		var qrInterfaceName string

		if o.InterfaceName != nil {
			qrInterfaceName = *o.InterfaceName
		}
		qInterfaceName := qrInterfaceName
		if qInterfaceName != "" {

			if err := r.SetQueryParam("interface.name", qInterfaceName); err != nil {
				return err
			}
		}
	}

	if o.InterfaceTransportAddress != nil {

		// query param interface.transport_address
		var qrInterfaceTransportAddress string

		if o.InterfaceTransportAddress != nil {
			qrInterfaceTransportAddress = *o.InterfaceTransportAddress
		}
		qInterfaceTransportAddress := qrInterfaceTransportAddress
		if qInterfaceTransportAddress != "" {

			if err := r.SetQueryParam("interface.transport_address", qInterfaceTransportAddress); err != nil {
				return err
			}
		}
	}

	if o.InterfaceUUID != nil {

		// query param interface.uuid
		var qrInterfaceUUID string

		if o.InterfaceUUID != nil {
			qrInterfaceUUID = *o.InterfaceUUID
		}
		qInterfaceUUID := qrInterfaceUUID
		if qInterfaceUUID != "" {

			if err := r.SetQueryParam("interface.uuid", qInterfaceUUID); err != nil {
				return err
			}
		}
	}

	if o.IoQueueCount != nil {

		// query param io_queue.count
		var qrIoQueueCount int64

		if o.IoQueueCount != nil {
			qrIoQueueCount = *o.IoQueueCount
		}
		qIoQueueCount := swag.FormatInt64(qrIoQueueCount)
		if qIoQueueCount != "" {

			if err := r.SetQueryParam("io_queue.count", qIoQueueCount); err != nil {
				return err
			}
		}
	}

	if o.IoQueueDepth != nil {

		// query param io_queue.depth
		var qrIoQueueDepth int64

		if o.IoQueueDepth != nil {
			qrIoQueueDepth = *o.IoQueueDepth
		}
		qIoQueueDepth := swag.FormatInt64(qrIoQueueDepth)
		if qIoQueueDepth != "" {

			if err := r.SetQueryParam("io_queue.depth", qIoQueueDepth); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodeName != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeName != nil {
			qrNodeName = *o.NodeName
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUID != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUID != nil {
			qrNodeUUID = *o.NodeUUID
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SubsystemName != nil {

		// query param subsystem.name
		var qrSubsystemName string

		if o.SubsystemName != nil {
			qrSubsystemName = *o.SubsystemName
		}
		qSubsystemName := qrSubsystemName
		if qSubsystemName != "" {

			if err := r.SetQueryParam("subsystem.name", qSubsystemName); err != nil {
				return err
			}
		}
	}

	if o.SubsystemUUID != nil {

		// query param subsystem.uuid
		var qrSubsystemUUID string

		if o.SubsystemUUID != nil {
			qrSubsystemUUID = *o.SubsystemUUID
		}
		qSubsystemUUID := qrSubsystemUUID
		if qSubsystemUUID != "" {

			if err := r.SetQueryParam("subsystem.uuid", qSubsystemUUID); err != nil {
				return err
			}
		}
	}

	if o.SvmName != nil {

		// query param svm.name
		var qrSvmName string

		if o.SvmName != nil {
			qrSvmName = *o.SvmName
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SvmUUID != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SvmUUID != nil {
			qrSvmUUID = *o.SvmUUID
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNvmeSubsystemControllerCollectionGet binds the parameter fields
func (o *NvmeSubsystemControllerCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNvmeSubsystemControllerCollectionGet binds the parameter order_by
func (o *NvmeSubsystemControllerCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
