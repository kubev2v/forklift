// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConsistencyGroupSnapshot consistency group snapshot
//
// swagger:model consistency_group_snapshot
type ConsistencyGroupSnapshot struct {

	// links
	Links *SelfLink `json:"_links,omitempty"`

	// Comment for the Snapshot copy.
	//
	// Example: My Snapshot copy comment
	Comment *string `json:"comment,omitempty"`

	// consistency group
	ConsistencyGroup *ConsistencyGroupSnapshotInlineConsistencyGroup `json:"consistency_group,omitempty"`

	// List of volumes which are not in the Snapshot copy.
	//
	ConsistencyGroupSnapshotInlineMissingVolumes []*VolumeReference `json:"missing_volumes,omitempty"`

	// List of volume and snapshot identifiers for each volume in the Snapshot copy.
	//
	// Read Only: true
	ConsistencyGroupSnapshotInlineSnapshotVolumes []*ConsistencyGroupVolumeSnapshot `json:"snapshot_volumes,omitempty"`

	// Consistency type. This is for categorization purposes only. A Snapshot copy should not be set to 'application consistent' unless the host application is quiesced for the Snapshot copy. Valid in POST.
	//
	// Example: crash
	// Enum: [crash application]
	ConsistencyType *string `json:"consistency_type,omitempty"`

	// Time the snapshot copy was created
	//
	// Example: 2020-10-25T11:20:00Z
	// Format: date-time
	CreateTime *strfmt.DateTime `json:"create_time,omitempty"`

	// Indicates whether the Snapshot copy taken is partial or not.
	//
	// Example: false
	IsPartial *bool `json:"is_partial,omitempty"`

	// Name of the Snapshot copy.
	//
	Name *string `json:"name,omitempty"`

	// Snapmirror Label for the Snapshot copy.
	//
	// Example: sm_label
	SnapmirrorLabel *string `json:"snapmirror_label,omitempty"`

	// The SVM in which the consistency group is located.
	//
	Svm *SvmReference `json:"svm,omitempty"`

	// The unique identifier of the Snapshot copy. The UUID is generated
	// by ONTAP when the Snapshot copy is created.
	//
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this consistency group snapshot
func (m *ConsistencyGroupSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupSnapshotInlineMissingVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupSnapshotInlineSnapshotVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsistencyGroupSnapshot) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ConsistencyGroupSnapshot) validateConsistencyGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroup) { // not required
		return nil
	}

	if m.ConsistencyGroup != nil {
		if err := m.ConsistencyGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency_group")
			}
			return err
		}
	}

	return nil
}

func (m *ConsistencyGroupSnapshot) validateConsistencyGroupSnapshotInlineMissingVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupSnapshotInlineMissingVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsistencyGroupSnapshotInlineMissingVolumes); i++ {
		if swag.IsZero(m.ConsistencyGroupSnapshotInlineMissingVolumes[i]) { // not required
			continue
		}

		if m.ConsistencyGroupSnapshotInlineMissingVolumes[i] != nil {
			if err := m.ConsistencyGroupSnapshotInlineMissingVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("missing_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConsistencyGroupSnapshot) validateConsistencyGroupSnapshotInlineSnapshotVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupSnapshotInlineSnapshotVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsistencyGroupSnapshotInlineSnapshotVolumes); i++ {
		if swag.IsZero(m.ConsistencyGroupSnapshotInlineSnapshotVolumes[i]) { // not required
			continue
		}

		if m.ConsistencyGroupSnapshotInlineSnapshotVolumes[i] != nil {
			if err := m.ConsistencyGroupSnapshotInlineSnapshotVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshot_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var consistencyGroupSnapshotTypeConsistencyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["crash","application"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consistencyGroupSnapshotTypeConsistencyTypePropEnum = append(consistencyGroupSnapshotTypeConsistencyTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// consistency_group_snapshot
	// ConsistencyGroupSnapshot
	// consistency_type
	// ConsistencyType
	// crash
	// END DEBUGGING
	// ConsistencyGroupSnapshotConsistencyTypeCrash captures enum value "crash"
	ConsistencyGroupSnapshotConsistencyTypeCrash string = "crash"

	// BEGIN DEBUGGING
	// consistency_group_snapshot
	// ConsistencyGroupSnapshot
	// consistency_type
	// ConsistencyType
	// application
	// END DEBUGGING
	// ConsistencyGroupSnapshotConsistencyTypeApplication captures enum value "application"
	ConsistencyGroupSnapshotConsistencyTypeApplication string = "application"
)

// prop value enum
func (m *ConsistencyGroupSnapshot) validateConsistencyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, consistencyGroupSnapshotTypeConsistencyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConsistencyGroupSnapshot) validateConsistencyType(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyType) { // not required
		return nil
	}

	// value enum
	if err := m.validateConsistencyTypeEnum("consistency_type", "body", *m.ConsistencyType); err != nil {
		return err
	}

	return nil
}

func (m *ConsistencyGroupSnapshot) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConsistencyGroupSnapshot) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this consistency group snapshot based on the context it is used
func (m *ConsistencyGroupSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupSnapshotInlineMissingVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupSnapshotInlineSnapshotVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsistencyGroupSnapshot) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ConsistencyGroupSnapshot) contextValidateConsistencyGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsistencyGroup != nil {
		if err := m.ConsistencyGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency_group")
			}
			return err
		}
	}

	return nil
}

func (m *ConsistencyGroupSnapshot) contextValidateConsistencyGroupSnapshotInlineMissingVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConsistencyGroupSnapshotInlineMissingVolumes); i++ {

		if m.ConsistencyGroupSnapshotInlineMissingVolumes[i] != nil {
			if err := m.ConsistencyGroupSnapshotInlineMissingVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("missing_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConsistencyGroupSnapshot) contextValidateConsistencyGroupSnapshotInlineSnapshotVolumes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "snapshot_volumes", "body", []*ConsistencyGroupVolumeSnapshot(m.ConsistencyGroupSnapshotInlineSnapshotVolumes)); err != nil {
		return err
	}

	for i := 0; i < len(m.ConsistencyGroupSnapshotInlineSnapshotVolumes); i++ {

		if m.ConsistencyGroupSnapshotInlineSnapshotVolumes[i] != nil {
			if err := m.ConsistencyGroupSnapshotInlineSnapshotVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshot_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConsistencyGroupSnapshot) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsistencyGroupSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsistencyGroupSnapshot) UnmarshalBinary(b []byte) error {
	var res ConsistencyGroupSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConsistencyGroupSnapshotInlineConsistencyGroup The consistency group of the Snapshot copy.
//
// swagger:model consistency_group_snapshot_inline_consistency_group
type ConsistencyGroupSnapshotInlineConsistencyGroup struct {

	// links
	Links *SelfLink `json:"_links,omitempty"`

	// The name of the consistency group.
	// Example: my_consistency_group
	Name *string `json:"name,omitempty"`

	// The unique identifier of the consistency group.
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this consistency group snapshot inline consistency group
func (m *ConsistencyGroupSnapshotInlineConsistencyGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsistencyGroupSnapshotInlineConsistencyGroup) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency_group" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this consistency group snapshot inline consistency group based on the context it is used
func (m *ConsistencyGroupSnapshotInlineConsistencyGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsistencyGroupSnapshotInlineConsistencyGroup) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency_group" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsistencyGroupSnapshotInlineConsistencyGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsistencyGroupSnapshotInlineConsistencyGroup) UnmarshalBinary(b []byte) error {
	var res ConsistencyGroupSnapshotInlineConsistencyGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
