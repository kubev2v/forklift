// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FlexcacheWriteback flexcache writeback
//
// swagger:model flexcache_writeback
type FlexcacheWriteback struct {

	// Indicates whether or not writeback is enabled for the FlexCache volume. Writeback is a storage method where data is first written to the FlexCache volume and then written to the origin of a FlexCache volume.
	Enabled *bool `json:"enabled,omitempty"`

	// Specifies the amount of data in 4KB blocks that the system can write per inode in a FlexCache volume before a writeback is initiated for that inode. This property is only relevant to a FlexCache Volume with the writeback property enabled.
	PerInodeDirtyLimit *int64 `json:"per_inode_dirty_limit,omitempty"`

	// Specifies the threshold value in 4KB data blocks which when hit will trigger a scrub that will initiate writeback for all dirty inodes on the FlexCache volume. This property is only relevant to a FlexCache Volume with the writeback property enabled.
	ScrubThreshold *int64 `json:"scrub_threshold,omitempty"`

	// Specifies the maximum number of 4KB data blocks the system can transfer, at one time, from the cache to the origin. This process will keep on recurring until all the dirty blocks for the inode are transferred to the origin volume. This property is only relevant to a FlexCache Volume with the writeback property enabled.
	TransferLimit *int64 `json:"transfer_limit,omitempty"`
}

// Validate validates this flexcache writeback
func (m *FlexcacheWriteback) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flexcache writeback based on context it is used
func (m *FlexcacheWriteback) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FlexcacheWriteback) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlexcacheWriteback) UnmarshalBinary(b []byte) error {
	var res FlexcacheWriteback
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
