// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNetworkIPBgpPeerGroupsGetParams creates a new NetworkIPBgpPeerGroupsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNetworkIPBgpPeerGroupsGetParams() *NetworkIPBgpPeerGroupsGetParams {
	return &NetworkIPBgpPeerGroupsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNetworkIPBgpPeerGroupsGetParamsWithTimeout creates a new NetworkIPBgpPeerGroupsGetParams object
// with the ability to set a timeout on a request.
func NewNetworkIPBgpPeerGroupsGetParamsWithTimeout(timeout time.Duration) *NetworkIPBgpPeerGroupsGetParams {
	return &NetworkIPBgpPeerGroupsGetParams{
		timeout: timeout,
	}
}

// NewNetworkIPBgpPeerGroupsGetParamsWithContext creates a new NetworkIPBgpPeerGroupsGetParams object
// with the ability to set a context for a request.
func NewNetworkIPBgpPeerGroupsGetParamsWithContext(ctx context.Context) *NetworkIPBgpPeerGroupsGetParams {
	return &NetworkIPBgpPeerGroupsGetParams{
		Context: ctx,
	}
}

// NewNetworkIPBgpPeerGroupsGetParamsWithHTTPClient creates a new NetworkIPBgpPeerGroupsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNetworkIPBgpPeerGroupsGetParamsWithHTTPClient(client *http.Client) *NetworkIPBgpPeerGroupsGetParams {
	return &NetworkIPBgpPeerGroupsGetParams{
		HTTPClient: client,
	}
}

/*
NetworkIPBgpPeerGroupsGetParams contains all the parameters to send to the API endpoint

	for the network ip bgp peer groups get operation.

	Typically these are written to a http.Request.
*/
type NetworkIPBgpPeerGroupsGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* IpspaceName.

	   Filter by ipspace.name
	*/
	IpspaceName *string

	/* IpspaceUUID.

	   Filter by ipspace.uuid
	*/
	IpspaceUUID *string

	/* LocalInterfaceIPAddress.

	   Filter by local.interface.ip.address
	*/
	LocalInterfaceIPAddress *string

	/* LocalInterfaceName.

	   Filter by local.interface.name
	*/
	LocalInterfaceName *string

	/* LocalInterfaceUUID.

	   Filter by local.interface.uuid
	*/
	LocalInterfaceUUID *string

	/* LocalPortName.

	   Filter by local.port.name
	*/
	LocalPortName *string

	/* LocalPortNodeName.

	   Filter by local.port.node.name
	*/
	LocalPortNodeName *string

	/* LocalPortUUID.

	   Filter by local.port.uuid
	*/
	LocalPortUUID *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	Name *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* PeerAddress.

	   Filter by peer.address
	*/
	PeerAddress *string

	/* PeerAsn.

	   Filter by peer.asn
	*/
	PeerAsn *int64

	/* PeerIsNextHop.

	   Filter by peer.is_next_hop
	*/
	PeerIsNextHop *bool

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* State.

	   Filter by state
	*/
	State *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the network ip bgp peer groups get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NetworkIPBgpPeerGroupsGetParams) WithDefaults() *NetworkIPBgpPeerGroupsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the network ip bgp peer groups get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NetworkIPBgpPeerGroupsGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := NetworkIPBgpPeerGroupsGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithTimeout(timeout time.Duration) *NetworkIPBgpPeerGroupsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithContext(ctx context.Context) *NetworkIPBgpPeerGroupsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithHTTPClient(client *http.Client) *NetworkIPBgpPeerGroupsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithFields(fields []string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithIpspaceName adds the ipspaceName to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithIpspaceName(ipspaceName *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetIpspaceName(ipspaceName)
	return o
}

// SetIpspaceName adds the ipspaceName to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetIpspaceName(ipspaceName *string) {
	o.IpspaceName = ipspaceName
}

// WithIpspaceUUID adds the ipspaceUUID to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithIpspaceUUID(ipspaceUUID *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetIpspaceUUID(ipspaceUUID)
	return o
}

// SetIpspaceUUID adds the ipspaceUuid to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetIpspaceUUID(ipspaceUUID *string) {
	o.IpspaceUUID = ipspaceUUID
}

// WithLocalInterfaceIPAddress adds the localInterfaceIPAddress to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithLocalInterfaceIPAddress(localInterfaceIPAddress *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetLocalInterfaceIPAddress(localInterfaceIPAddress)
	return o
}

// SetLocalInterfaceIPAddress adds the localInterfaceIpAddress to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetLocalInterfaceIPAddress(localInterfaceIPAddress *string) {
	o.LocalInterfaceIPAddress = localInterfaceIPAddress
}

// WithLocalInterfaceName adds the localInterfaceName to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithLocalInterfaceName(localInterfaceName *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetLocalInterfaceName(localInterfaceName)
	return o
}

// SetLocalInterfaceName adds the localInterfaceName to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetLocalInterfaceName(localInterfaceName *string) {
	o.LocalInterfaceName = localInterfaceName
}

// WithLocalInterfaceUUID adds the localInterfaceUUID to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithLocalInterfaceUUID(localInterfaceUUID *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetLocalInterfaceUUID(localInterfaceUUID)
	return o
}

// SetLocalInterfaceUUID adds the localInterfaceUuid to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetLocalInterfaceUUID(localInterfaceUUID *string) {
	o.LocalInterfaceUUID = localInterfaceUUID
}

// WithLocalPortName adds the localPortName to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithLocalPortName(localPortName *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetLocalPortName(localPortName)
	return o
}

// SetLocalPortName adds the localPortName to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetLocalPortName(localPortName *string) {
	o.LocalPortName = localPortName
}

// WithLocalPortNodeName adds the localPortNodeName to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithLocalPortNodeName(localPortNodeName *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetLocalPortNodeName(localPortNodeName)
	return o
}

// SetLocalPortNodeName adds the localPortNodeName to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetLocalPortNodeName(localPortNodeName *string) {
	o.LocalPortNodeName = localPortNodeName
}

// WithLocalPortUUID adds the localPortUUID to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithLocalPortUUID(localPortUUID *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetLocalPortUUID(localPortUUID)
	return o
}

// SetLocalPortUUID adds the localPortUuid to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetLocalPortUUID(localPortUUID *string) {
	o.LocalPortUUID = localPortUUID
}

// WithMaxRecords adds the maxRecords to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithMaxRecords(maxRecords *int64) *NetworkIPBgpPeerGroupsGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithName adds the name to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithName(name *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetName(name *string) {
	o.Name = name
}

// WithOrderBy adds the orderBy to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithOrderBy(orderBy []string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPeerAddress adds the peerAddress to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithPeerAddress(peerAddress *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetPeerAddress(peerAddress)
	return o
}

// SetPeerAddress adds the peerAddress to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetPeerAddress(peerAddress *string) {
	o.PeerAddress = peerAddress
}

// WithPeerAsn adds the peerAsn to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithPeerAsn(peerAsn *int64) *NetworkIPBgpPeerGroupsGetParams {
	o.SetPeerAsn(peerAsn)
	return o
}

// SetPeerAsn adds the peerAsn to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetPeerAsn(peerAsn *int64) {
	o.PeerAsn = peerAsn
}

// WithPeerIsNextHop adds the peerIsNextHop to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithPeerIsNextHop(peerIsNextHop *bool) *NetworkIPBgpPeerGroupsGetParams {
	o.SetPeerIsNextHop(peerIsNextHop)
	return o
}

// SetPeerIsNextHop adds the peerIsNextHop to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetPeerIsNextHop(peerIsNextHop *bool) {
	o.PeerIsNextHop = peerIsNextHop
}

// WithReturnRecords adds the returnRecords to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithReturnRecords(returnRecords *bool) *NetworkIPBgpPeerGroupsGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithReturnTimeout(returnTimeout *int64) *NetworkIPBgpPeerGroupsGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithState adds the state to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithState(state *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetState(state *string) {
	o.State = state
}

// WithUUID adds the uuid to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) WithUUID(uuid *string) *NetworkIPBgpPeerGroupsGetParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the network ip bgp peer groups get params
func (o *NetworkIPBgpPeerGroupsGetParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *NetworkIPBgpPeerGroupsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IpspaceName != nil {

		// query param ipspace.name
		var qrIpspaceName string

		if o.IpspaceName != nil {
			qrIpspaceName = *o.IpspaceName
		}
		qIpspaceName := qrIpspaceName
		if qIpspaceName != "" {

			if err := r.SetQueryParam("ipspace.name", qIpspaceName); err != nil {
				return err
			}
		}
	}

	if o.IpspaceUUID != nil {

		// query param ipspace.uuid
		var qrIpspaceUUID string

		if o.IpspaceUUID != nil {
			qrIpspaceUUID = *o.IpspaceUUID
		}
		qIpspaceUUID := qrIpspaceUUID
		if qIpspaceUUID != "" {

			if err := r.SetQueryParam("ipspace.uuid", qIpspaceUUID); err != nil {
				return err
			}
		}
	}

	if o.LocalInterfaceIPAddress != nil {

		// query param local.interface.ip.address
		var qrLocalInterfaceIPAddress string

		if o.LocalInterfaceIPAddress != nil {
			qrLocalInterfaceIPAddress = *o.LocalInterfaceIPAddress
		}
		qLocalInterfaceIPAddress := qrLocalInterfaceIPAddress
		if qLocalInterfaceIPAddress != "" {

			if err := r.SetQueryParam("local.interface.ip.address", qLocalInterfaceIPAddress); err != nil {
				return err
			}
		}
	}

	if o.LocalInterfaceName != nil {

		// query param local.interface.name
		var qrLocalInterfaceName string

		if o.LocalInterfaceName != nil {
			qrLocalInterfaceName = *o.LocalInterfaceName
		}
		qLocalInterfaceName := qrLocalInterfaceName
		if qLocalInterfaceName != "" {

			if err := r.SetQueryParam("local.interface.name", qLocalInterfaceName); err != nil {
				return err
			}
		}
	}

	if o.LocalInterfaceUUID != nil {

		// query param local.interface.uuid
		var qrLocalInterfaceUUID string

		if o.LocalInterfaceUUID != nil {
			qrLocalInterfaceUUID = *o.LocalInterfaceUUID
		}
		qLocalInterfaceUUID := qrLocalInterfaceUUID
		if qLocalInterfaceUUID != "" {

			if err := r.SetQueryParam("local.interface.uuid", qLocalInterfaceUUID); err != nil {
				return err
			}
		}
	}

	if o.LocalPortName != nil {

		// query param local.port.name
		var qrLocalPortName string

		if o.LocalPortName != nil {
			qrLocalPortName = *o.LocalPortName
		}
		qLocalPortName := qrLocalPortName
		if qLocalPortName != "" {

			if err := r.SetQueryParam("local.port.name", qLocalPortName); err != nil {
				return err
			}
		}
	}

	if o.LocalPortNodeName != nil {

		// query param local.port.node.name
		var qrLocalPortNodeName string

		if o.LocalPortNodeName != nil {
			qrLocalPortNodeName = *o.LocalPortNodeName
		}
		qLocalPortNodeName := qrLocalPortNodeName
		if qLocalPortNodeName != "" {

			if err := r.SetQueryParam("local.port.node.name", qLocalPortNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocalPortUUID != nil {

		// query param local.port.uuid
		var qrLocalPortUUID string

		if o.LocalPortUUID != nil {
			qrLocalPortUUID = *o.LocalPortUUID
		}
		qLocalPortUUID := qrLocalPortUUID
		if qLocalPortUUID != "" {

			if err := r.SetQueryParam("local.port.uuid", qLocalPortUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PeerAddress != nil {

		// query param peer.address
		var qrPeerAddress string

		if o.PeerAddress != nil {
			qrPeerAddress = *o.PeerAddress
		}
		qPeerAddress := qrPeerAddress
		if qPeerAddress != "" {

			if err := r.SetQueryParam("peer.address", qPeerAddress); err != nil {
				return err
			}
		}
	}

	if o.PeerAsn != nil {

		// query param peer.asn
		var qrPeerAsn int64

		if o.PeerAsn != nil {
			qrPeerAsn = *o.PeerAsn
		}
		qPeerAsn := swag.FormatInt64(qrPeerAsn)
		if qPeerAsn != "" {

			if err := r.SetQueryParam("peer.asn", qPeerAsn); err != nil {
				return err
			}
		}
	}

	if o.PeerIsNextHop != nil {

		// query param peer.is_next_hop
		var qrPeerIsNextHop bool

		if o.PeerIsNextHop != nil {
			qrPeerIsNextHop = *o.PeerIsNextHop
		}
		qPeerIsNextHop := swag.FormatBool(qrPeerIsNextHop)
		if qPeerIsNextHop != "" {

			if err := r.SetQueryParam("peer.is_next_hop", qPeerIsNextHop); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNetworkIPBgpPeerGroupsGet binds the parameter fields
func (o *NetworkIPBgpPeerGroupsGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNetworkIPBgpPeerGroupsGet binds the parameter order_by
func (o *NetworkIPBgpPeerGroupsGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
