// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFpolicyEventCollectionGetParams creates a new FpolicyEventCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFpolicyEventCollectionGetParams() *FpolicyEventCollectionGetParams {
	return &FpolicyEventCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFpolicyEventCollectionGetParamsWithTimeout creates a new FpolicyEventCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFpolicyEventCollectionGetParamsWithTimeout(timeout time.Duration) *FpolicyEventCollectionGetParams {
	return &FpolicyEventCollectionGetParams{
		timeout: timeout,
	}
}

// NewFpolicyEventCollectionGetParamsWithContext creates a new FpolicyEventCollectionGetParams object
// with the ability to set a context for a request.
func NewFpolicyEventCollectionGetParamsWithContext(ctx context.Context) *FpolicyEventCollectionGetParams {
	return &FpolicyEventCollectionGetParams{
		Context: ctx,
	}
}

// NewFpolicyEventCollectionGetParamsWithHTTPClient creates a new FpolicyEventCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFpolicyEventCollectionGetParamsWithHTTPClient(client *http.Client) *FpolicyEventCollectionGetParams {
	return &FpolicyEventCollectionGetParams{
		HTTPClient: client,
	}
}

/*
FpolicyEventCollectionGetParams contains all the parameters to send to the API endpoint

	for the fpolicy event collection get operation.

	Typically these are written to a http.Request.
*/
type FpolicyEventCollectionGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* FileOperationsClose.

	   Filter by file_operations.close
	*/
	FileOperationsClose *bool

	/* FileOperationsCreate.

	   Filter by file_operations.create
	*/
	FileOperationsCreate *bool

	/* FileOperationsCreateDir.

	   Filter by file_operations.create_dir
	*/
	FileOperationsCreateDir *bool

	/* FileOperationsDelete.

	   Filter by file_operations.delete
	*/
	FileOperationsDelete *bool

	/* FileOperationsDeleteDir.

	   Filter by file_operations.delete_dir
	*/
	FileOperationsDeleteDir *bool

	/* FileOperationsGetattr.

	   Filter by file_operations.getattr
	*/
	FileOperationsGetattr *bool

	/* FileOperationsLink.

	   Filter by file_operations.link
	*/
	FileOperationsLink *bool

	/* FileOperationsLookup.

	   Filter by file_operations.lookup
	*/
	FileOperationsLookup *bool

	/* FileOperationsOpen.

	   Filter by file_operations.open
	*/
	FileOperationsOpen *bool

	/* FileOperationsRead.

	   Filter by file_operations.read
	*/
	FileOperationsRead *bool

	/* FileOperationsRename.

	   Filter by file_operations.rename
	*/
	FileOperationsRename *bool

	/* FileOperationsRenameDir.

	   Filter by file_operations.rename_dir
	*/
	FileOperationsRenameDir *bool

	/* FileOperationsSetattr.

	   Filter by file_operations.setattr
	*/
	FileOperationsSetattr *bool

	/* FileOperationsSymlink.

	   Filter by file_operations.symlink
	*/
	FileOperationsSymlink *bool

	/* FileOperationsWrite.

	   Filter by file_operations.write
	*/
	FileOperationsWrite *bool

	/* FiltersCloseWithModification.

	   Filter by filters.close_with_modification
	*/
	FiltersCloseWithModification *bool

	/* FiltersCloseWithRead.

	   Filter by filters.close_with_read
	*/
	FiltersCloseWithRead *bool

	/* FiltersCloseWithoutModification.

	   Filter by filters.close_without_modification
	*/
	FiltersCloseWithoutModification *bool

	/* FiltersExcludeDirectory.

	   Filter by filters.exclude_directory
	*/
	FiltersExcludeDirectory *bool

	/* FiltersFirstRead.

	   Filter by filters.first_read
	*/
	FiltersFirstRead *bool

	/* FiltersFirstWrite.

	   Filter by filters.first_write
	*/
	FiltersFirstWrite *bool

	/* FiltersMonitorAds.

	   Filter by filters.monitor_ads
	*/
	FiltersMonitorAds *bool

	/* FiltersOfflineBit.

	   Filter by filters.offline_bit
	*/
	FiltersOfflineBit *bool

	/* FiltersOpenWithDeleteIntent.

	   Filter by filters.open_with_delete_intent
	*/
	FiltersOpenWithDeleteIntent *bool

	/* FiltersOpenWithWriteIntent.

	   Filter by filters.open_with_write_intent
	*/
	FiltersOpenWithWriteIntent *bool

	/* FiltersSetattrWithAccessTimeChange.

	   Filter by filters.setattr_with_access_time_change
	*/
	FiltersSetattrWithAccessTimeChange *bool

	/* FiltersSetattrWithAllocationSizeChange.

	   Filter by filters.setattr_with_allocation_size_change
	*/
	FiltersSetattrWithAllocationSizeChange *bool

	/* FiltersSetattrWithCreationTimeChange.

	   Filter by filters.setattr_with_creation_time_change
	*/
	FiltersSetattrWithCreationTimeChange *bool

	/* FiltersSetattrWithDaclChange.

	   Filter by filters.setattr_with_dacl_change
	*/
	FiltersSetattrWithDaclChange *bool

	/* FiltersSetattrWithGroupChange.

	   Filter by filters.setattr_with_group_change
	*/
	FiltersSetattrWithGroupChange *bool

	/* FiltersSetattrWithModeChange.

	   Filter by filters.setattr_with_mode_change
	*/
	FiltersSetattrWithModeChange *bool

	/* FiltersSetattrWithModifyTimeChange.

	   Filter by filters.setattr_with_modify_time_change
	*/
	FiltersSetattrWithModifyTimeChange *bool

	/* FiltersSetattrWithOwnerChange.

	   Filter by filters.setattr_with_owner_change
	*/
	FiltersSetattrWithOwnerChange *bool

	/* FiltersSetattrWithSaclChange.

	   Filter by filters.setattr_with_sacl_change
	*/
	FiltersSetattrWithSaclChange *bool

	/* FiltersSetattrWithSizeChange.

	   Filter by filters.setattr_with_size_change
	*/
	FiltersSetattrWithSizeChange *bool

	/* FiltersWriteWithSizeChange.

	   Filter by filters.write_with_size_change
	*/
	FiltersWriteWithSizeChange *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	Name *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* Protocol.

	   Filter by protocol
	*/
	Protocol *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SvmUUID string

	/* VolumeMonitoring.

	   Filter by volume_monitoring
	*/
	VolumeMonitoring *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fpolicy event collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyEventCollectionGetParams) WithDefaults() *FpolicyEventCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fpolicy event collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyEventCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := FpolicyEventCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithTimeout(timeout time.Duration) *FpolicyEventCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithContext(ctx context.Context) *FpolicyEventCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithHTTPClient(client *http.Client) *FpolicyEventCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFields(fields []string) *FpolicyEventCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithFileOperationsClose adds the fileOperationsClose to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsClose(fileOperationsClose *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsClose(fileOperationsClose)
	return o
}

// SetFileOperationsClose adds the fileOperationsClose to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsClose(fileOperationsClose *bool) {
	o.FileOperationsClose = fileOperationsClose
}

// WithFileOperationsCreate adds the fileOperationsCreate to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsCreate(fileOperationsCreate *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsCreate(fileOperationsCreate)
	return o
}

// SetFileOperationsCreate adds the fileOperationsCreate to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsCreate(fileOperationsCreate *bool) {
	o.FileOperationsCreate = fileOperationsCreate
}

// WithFileOperationsCreateDir adds the fileOperationsCreateDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsCreateDir(fileOperationsCreateDir *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsCreateDir(fileOperationsCreateDir)
	return o
}

// SetFileOperationsCreateDir adds the fileOperationsCreateDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsCreateDir(fileOperationsCreateDir *bool) {
	o.FileOperationsCreateDir = fileOperationsCreateDir
}

// WithFileOperationsDelete adds the fileOperationsDelete to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsDelete(fileOperationsDelete *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsDelete(fileOperationsDelete)
	return o
}

// SetFileOperationsDelete adds the fileOperationsDelete to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsDelete(fileOperationsDelete *bool) {
	o.FileOperationsDelete = fileOperationsDelete
}

// WithFileOperationsDeleteDir adds the fileOperationsDeleteDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsDeleteDir(fileOperationsDeleteDir *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsDeleteDir(fileOperationsDeleteDir)
	return o
}

// SetFileOperationsDeleteDir adds the fileOperationsDeleteDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsDeleteDir(fileOperationsDeleteDir *bool) {
	o.FileOperationsDeleteDir = fileOperationsDeleteDir
}

// WithFileOperationsGetattr adds the fileOperationsGetattr to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsGetattr(fileOperationsGetattr *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsGetattr(fileOperationsGetattr)
	return o
}

// SetFileOperationsGetattr adds the fileOperationsGetattr to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsGetattr(fileOperationsGetattr *bool) {
	o.FileOperationsGetattr = fileOperationsGetattr
}

// WithFileOperationsLink adds the fileOperationsLink to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsLink(fileOperationsLink *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsLink(fileOperationsLink)
	return o
}

// SetFileOperationsLink adds the fileOperationsLink to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsLink(fileOperationsLink *bool) {
	o.FileOperationsLink = fileOperationsLink
}

// WithFileOperationsLookup adds the fileOperationsLookup to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsLookup(fileOperationsLookup *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsLookup(fileOperationsLookup)
	return o
}

// SetFileOperationsLookup adds the fileOperationsLookup to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsLookup(fileOperationsLookup *bool) {
	o.FileOperationsLookup = fileOperationsLookup
}

// WithFileOperationsOpen adds the fileOperationsOpen to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsOpen(fileOperationsOpen *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsOpen(fileOperationsOpen)
	return o
}

// SetFileOperationsOpen adds the fileOperationsOpen to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsOpen(fileOperationsOpen *bool) {
	o.FileOperationsOpen = fileOperationsOpen
}

// WithFileOperationsRead adds the fileOperationsRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsRead(fileOperationsRead *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsRead(fileOperationsRead)
	return o
}

// SetFileOperationsRead adds the fileOperationsRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsRead(fileOperationsRead *bool) {
	o.FileOperationsRead = fileOperationsRead
}

// WithFileOperationsRename adds the fileOperationsRename to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsRename(fileOperationsRename *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsRename(fileOperationsRename)
	return o
}

// SetFileOperationsRename adds the fileOperationsRename to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsRename(fileOperationsRename *bool) {
	o.FileOperationsRename = fileOperationsRename
}

// WithFileOperationsRenameDir adds the fileOperationsRenameDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsRenameDir(fileOperationsRenameDir *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsRenameDir(fileOperationsRenameDir)
	return o
}

// SetFileOperationsRenameDir adds the fileOperationsRenameDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsRenameDir(fileOperationsRenameDir *bool) {
	o.FileOperationsRenameDir = fileOperationsRenameDir
}

// WithFileOperationsSetattr adds the fileOperationsSetattr to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsSetattr(fileOperationsSetattr *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsSetattr(fileOperationsSetattr)
	return o
}

// SetFileOperationsSetattr adds the fileOperationsSetattr to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsSetattr(fileOperationsSetattr *bool) {
	o.FileOperationsSetattr = fileOperationsSetattr
}

// WithFileOperationsSymlink adds the fileOperationsSymlink to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsSymlink(fileOperationsSymlink *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsSymlink(fileOperationsSymlink)
	return o
}

// SetFileOperationsSymlink adds the fileOperationsSymlink to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsSymlink(fileOperationsSymlink *bool) {
	o.FileOperationsSymlink = fileOperationsSymlink
}

// WithFileOperationsWrite adds the fileOperationsWrite to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsWrite(fileOperationsWrite *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsWrite(fileOperationsWrite)
	return o
}

// SetFileOperationsWrite adds the fileOperationsWrite to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsWrite(fileOperationsWrite *bool) {
	o.FileOperationsWrite = fileOperationsWrite
}

// WithFiltersCloseWithModification adds the filtersCloseWithModification to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersCloseWithModification(filtersCloseWithModification *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersCloseWithModification(filtersCloseWithModification)
	return o
}

// SetFiltersCloseWithModification adds the filtersCloseWithModification to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersCloseWithModification(filtersCloseWithModification *bool) {
	o.FiltersCloseWithModification = filtersCloseWithModification
}

// WithFiltersCloseWithRead adds the filtersCloseWithRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersCloseWithRead(filtersCloseWithRead *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersCloseWithRead(filtersCloseWithRead)
	return o
}

// SetFiltersCloseWithRead adds the filtersCloseWithRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersCloseWithRead(filtersCloseWithRead *bool) {
	o.FiltersCloseWithRead = filtersCloseWithRead
}

// WithFiltersCloseWithoutModification adds the filtersCloseWithoutModification to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersCloseWithoutModification(filtersCloseWithoutModification *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersCloseWithoutModification(filtersCloseWithoutModification)
	return o
}

// SetFiltersCloseWithoutModification adds the filtersCloseWithoutModification to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersCloseWithoutModification(filtersCloseWithoutModification *bool) {
	o.FiltersCloseWithoutModification = filtersCloseWithoutModification
}

// WithFiltersExcludeDirectory adds the filtersExcludeDirectory to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersExcludeDirectory(filtersExcludeDirectory *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersExcludeDirectory(filtersExcludeDirectory)
	return o
}

// SetFiltersExcludeDirectory adds the filtersExcludeDirectory to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersExcludeDirectory(filtersExcludeDirectory *bool) {
	o.FiltersExcludeDirectory = filtersExcludeDirectory
}

// WithFiltersFirstRead adds the filtersFirstRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersFirstRead(filtersFirstRead *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersFirstRead(filtersFirstRead)
	return o
}

// SetFiltersFirstRead adds the filtersFirstRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersFirstRead(filtersFirstRead *bool) {
	o.FiltersFirstRead = filtersFirstRead
}

// WithFiltersFirstWrite adds the filtersFirstWrite to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersFirstWrite(filtersFirstWrite *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersFirstWrite(filtersFirstWrite)
	return o
}

// SetFiltersFirstWrite adds the filtersFirstWrite to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersFirstWrite(filtersFirstWrite *bool) {
	o.FiltersFirstWrite = filtersFirstWrite
}

// WithFiltersMonitorAds adds the filtersMonitorAds to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersMonitorAds(filtersMonitorAds *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersMonitorAds(filtersMonitorAds)
	return o
}

// SetFiltersMonitorAds adds the filtersMonitorAds to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersMonitorAds(filtersMonitorAds *bool) {
	o.FiltersMonitorAds = filtersMonitorAds
}

// WithFiltersOfflineBit adds the filtersOfflineBit to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersOfflineBit(filtersOfflineBit *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersOfflineBit(filtersOfflineBit)
	return o
}

// SetFiltersOfflineBit adds the filtersOfflineBit to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersOfflineBit(filtersOfflineBit *bool) {
	o.FiltersOfflineBit = filtersOfflineBit
}

// WithFiltersOpenWithDeleteIntent adds the filtersOpenWithDeleteIntent to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersOpenWithDeleteIntent(filtersOpenWithDeleteIntent *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersOpenWithDeleteIntent(filtersOpenWithDeleteIntent)
	return o
}

// SetFiltersOpenWithDeleteIntent adds the filtersOpenWithDeleteIntent to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersOpenWithDeleteIntent(filtersOpenWithDeleteIntent *bool) {
	o.FiltersOpenWithDeleteIntent = filtersOpenWithDeleteIntent
}

// WithFiltersOpenWithWriteIntent adds the filtersOpenWithWriteIntent to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersOpenWithWriteIntent(filtersOpenWithWriteIntent *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersOpenWithWriteIntent(filtersOpenWithWriteIntent)
	return o
}

// SetFiltersOpenWithWriteIntent adds the filtersOpenWithWriteIntent to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersOpenWithWriteIntent(filtersOpenWithWriteIntent *bool) {
	o.FiltersOpenWithWriteIntent = filtersOpenWithWriteIntent
}

// WithFiltersSetattrWithAccessTimeChange adds the filtersSetattrWithAccessTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithAccessTimeChange(filtersSetattrWithAccessTimeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithAccessTimeChange(filtersSetattrWithAccessTimeChange)
	return o
}

// SetFiltersSetattrWithAccessTimeChange adds the filtersSetattrWithAccessTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithAccessTimeChange(filtersSetattrWithAccessTimeChange *bool) {
	o.FiltersSetattrWithAccessTimeChange = filtersSetattrWithAccessTimeChange
}

// WithFiltersSetattrWithAllocationSizeChange adds the filtersSetattrWithAllocationSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithAllocationSizeChange(filtersSetattrWithAllocationSizeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithAllocationSizeChange(filtersSetattrWithAllocationSizeChange)
	return o
}

// SetFiltersSetattrWithAllocationSizeChange adds the filtersSetattrWithAllocationSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithAllocationSizeChange(filtersSetattrWithAllocationSizeChange *bool) {
	o.FiltersSetattrWithAllocationSizeChange = filtersSetattrWithAllocationSizeChange
}

// WithFiltersSetattrWithCreationTimeChange adds the filtersSetattrWithCreationTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithCreationTimeChange(filtersSetattrWithCreationTimeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithCreationTimeChange(filtersSetattrWithCreationTimeChange)
	return o
}

// SetFiltersSetattrWithCreationTimeChange adds the filtersSetattrWithCreationTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithCreationTimeChange(filtersSetattrWithCreationTimeChange *bool) {
	o.FiltersSetattrWithCreationTimeChange = filtersSetattrWithCreationTimeChange
}

// WithFiltersSetattrWithDaclChange adds the filtersSetattrWithDaclChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithDaclChange(filtersSetattrWithDaclChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithDaclChange(filtersSetattrWithDaclChange)
	return o
}

// SetFiltersSetattrWithDaclChange adds the filtersSetattrWithDaclChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithDaclChange(filtersSetattrWithDaclChange *bool) {
	o.FiltersSetattrWithDaclChange = filtersSetattrWithDaclChange
}

// WithFiltersSetattrWithGroupChange adds the filtersSetattrWithGroupChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithGroupChange(filtersSetattrWithGroupChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithGroupChange(filtersSetattrWithGroupChange)
	return o
}

// SetFiltersSetattrWithGroupChange adds the filtersSetattrWithGroupChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithGroupChange(filtersSetattrWithGroupChange *bool) {
	o.FiltersSetattrWithGroupChange = filtersSetattrWithGroupChange
}

// WithFiltersSetattrWithModeChange adds the filtersSetattrWithModeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithModeChange(filtersSetattrWithModeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithModeChange(filtersSetattrWithModeChange)
	return o
}

// SetFiltersSetattrWithModeChange adds the filtersSetattrWithModeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithModeChange(filtersSetattrWithModeChange *bool) {
	o.FiltersSetattrWithModeChange = filtersSetattrWithModeChange
}

// WithFiltersSetattrWithModifyTimeChange adds the filtersSetattrWithModifyTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithModifyTimeChange(filtersSetattrWithModifyTimeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithModifyTimeChange(filtersSetattrWithModifyTimeChange)
	return o
}

// SetFiltersSetattrWithModifyTimeChange adds the filtersSetattrWithModifyTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithModifyTimeChange(filtersSetattrWithModifyTimeChange *bool) {
	o.FiltersSetattrWithModifyTimeChange = filtersSetattrWithModifyTimeChange
}

// WithFiltersSetattrWithOwnerChange adds the filtersSetattrWithOwnerChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithOwnerChange(filtersSetattrWithOwnerChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithOwnerChange(filtersSetattrWithOwnerChange)
	return o
}

// SetFiltersSetattrWithOwnerChange adds the filtersSetattrWithOwnerChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithOwnerChange(filtersSetattrWithOwnerChange *bool) {
	o.FiltersSetattrWithOwnerChange = filtersSetattrWithOwnerChange
}

// WithFiltersSetattrWithSaclChange adds the filtersSetattrWithSaclChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithSaclChange(filtersSetattrWithSaclChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithSaclChange(filtersSetattrWithSaclChange)
	return o
}

// SetFiltersSetattrWithSaclChange adds the filtersSetattrWithSaclChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithSaclChange(filtersSetattrWithSaclChange *bool) {
	o.FiltersSetattrWithSaclChange = filtersSetattrWithSaclChange
}

// WithFiltersSetattrWithSizeChange adds the filtersSetattrWithSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithSizeChange(filtersSetattrWithSizeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithSizeChange(filtersSetattrWithSizeChange)
	return o
}

// SetFiltersSetattrWithSizeChange adds the filtersSetattrWithSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithSizeChange(filtersSetattrWithSizeChange *bool) {
	o.FiltersSetattrWithSizeChange = filtersSetattrWithSizeChange
}

// WithFiltersWriteWithSizeChange adds the filtersWriteWithSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersWriteWithSizeChange(filtersWriteWithSizeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersWriteWithSizeChange(filtersWriteWithSizeChange)
	return o
}

// SetFiltersWriteWithSizeChange adds the filtersWriteWithSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersWriteWithSizeChange(filtersWriteWithSizeChange *bool) {
	o.FiltersWriteWithSizeChange = filtersWriteWithSizeChange
}

// WithMaxRecords adds the maxRecords to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithMaxRecords(maxRecords *int64) *FpolicyEventCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithName adds the name to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithName(name *string) *FpolicyEventCollectionGetParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetName(name *string) {
	o.Name = name
}

// WithOrderBy adds the orderBy to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithOrderBy(orderBy []string) *FpolicyEventCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithProtocol adds the protocol to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithProtocol(protocol *string) *FpolicyEventCollectionGetParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WithReturnRecords adds the returnRecords to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithReturnRecords(returnRecords *bool) *FpolicyEventCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *FpolicyEventCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSvmUUID adds the svmUUID to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithSvmUUID(svmUUID string) *FpolicyEventCollectionGetParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetSvmUUID(svmUUID string) {
	o.SvmUUID = svmUUID
}

// WithVolumeMonitoring adds the volumeMonitoring to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithVolumeMonitoring(volumeMonitoring *bool) *FpolicyEventCollectionGetParams {
	o.SetVolumeMonitoring(volumeMonitoring)
	return o
}

// SetVolumeMonitoring adds the volumeMonitoring to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetVolumeMonitoring(volumeMonitoring *bool) {
	o.VolumeMonitoring = volumeMonitoring
}

// WriteToRequest writes these params to a swagger request
func (o *FpolicyEventCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FileOperationsClose != nil {

		// query param file_operations.close
		var qrFileOperationsClose bool

		if o.FileOperationsClose != nil {
			qrFileOperationsClose = *o.FileOperationsClose
		}
		qFileOperationsClose := swag.FormatBool(qrFileOperationsClose)
		if qFileOperationsClose != "" {

			if err := r.SetQueryParam("file_operations.close", qFileOperationsClose); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsCreate != nil {

		// query param file_operations.create
		var qrFileOperationsCreate bool

		if o.FileOperationsCreate != nil {
			qrFileOperationsCreate = *o.FileOperationsCreate
		}
		qFileOperationsCreate := swag.FormatBool(qrFileOperationsCreate)
		if qFileOperationsCreate != "" {

			if err := r.SetQueryParam("file_operations.create", qFileOperationsCreate); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsCreateDir != nil {

		// query param file_operations.create_dir
		var qrFileOperationsCreateDir bool

		if o.FileOperationsCreateDir != nil {
			qrFileOperationsCreateDir = *o.FileOperationsCreateDir
		}
		qFileOperationsCreateDir := swag.FormatBool(qrFileOperationsCreateDir)
		if qFileOperationsCreateDir != "" {

			if err := r.SetQueryParam("file_operations.create_dir", qFileOperationsCreateDir); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsDelete != nil {

		// query param file_operations.delete
		var qrFileOperationsDelete bool

		if o.FileOperationsDelete != nil {
			qrFileOperationsDelete = *o.FileOperationsDelete
		}
		qFileOperationsDelete := swag.FormatBool(qrFileOperationsDelete)
		if qFileOperationsDelete != "" {

			if err := r.SetQueryParam("file_operations.delete", qFileOperationsDelete); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsDeleteDir != nil {

		// query param file_operations.delete_dir
		var qrFileOperationsDeleteDir bool

		if o.FileOperationsDeleteDir != nil {
			qrFileOperationsDeleteDir = *o.FileOperationsDeleteDir
		}
		qFileOperationsDeleteDir := swag.FormatBool(qrFileOperationsDeleteDir)
		if qFileOperationsDeleteDir != "" {

			if err := r.SetQueryParam("file_operations.delete_dir", qFileOperationsDeleteDir); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsGetattr != nil {

		// query param file_operations.getattr
		var qrFileOperationsGetattr bool

		if o.FileOperationsGetattr != nil {
			qrFileOperationsGetattr = *o.FileOperationsGetattr
		}
		qFileOperationsGetattr := swag.FormatBool(qrFileOperationsGetattr)
		if qFileOperationsGetattr != "" {

			if err := r.SetQueryParam("file_operations.getattr", qFileOperationsGetattr); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsLink != nil {

		// query param file_operations.link
		var qrFileOperationsLink bool

		if o.FileOperationsLink != nil {
			qrFileOperationsLink = *o.FileOperationsLink
		}
		qFileOperationsLink := swag.FormatBool(qrFileOperationsLink)
		if qFileOperationsLink != "" {

			if err := r.SetQueryParam("file_operations.link", qFileOperationsLink); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsLookup != nil {

		// query param file_operations.lookup
		var qrFileOperationsLookup bool

		if o.FileOperationsLookup != nil {
			qrFileOperationsLookup = *o.FileOperationsLookup
		}
		qFileOperationsLookup := swag.FormatBool(qrFileOperationsLookup)
		if qFileOperationsLookup != "" {

			if err := r.SetQueryParam("file_operations.lookup", qFileOperationsLookup); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsOpen != nil {

		// query param file_operations.open
		var qrFileOperationsOpen bool

		if o.FileOperationsOpen != nil {
			qrFileOperationsOpen = *o.FileOperationsOpen
		}
		qFileOperationsOpen := swag.FormatBool(qrFileOperationsOpen)
		if qFileOperationsOpen != "" {

			if err := r.SetQueryParam("file_operations.open", qFileOperationsOpen); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsRead != nil {

		// query param file_operations.read
		var qrFileOperationsRead bool

		if o.FileOperationsRead != nil {
			qrFileOperationsRead = *o.FileOperationsRead
		}
		qFileOperationsRead := swag.FormatBool(qrFileOperationsRead)
		if qFileOperationsRead != "" {

			if err := r.SetQueryParam("file_operations.read", qFileOperationsRead); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsRename != nil {

		// query param file_operations.rename
		var qrFileOperationsRename bool

		if o.FileOperationsRename != nil {
			qrFileOperationsRename = *o.FileOperationsRename
		}
		qFileOperationsRename := swag.FormatBool(qrFileOperationsRename)
		if qFileOperationsRename != "" {

			if err := r.SetQueryParam("file_operations.rename", qFileOperationsRename); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsRenameDir != nil {

		// query param file_operations.rename_dir
		var qrFileOperationsRenameDir bool

		if o.FileOperationsRenameDir != nil {
			qrFileOperationsRenameDir = *o.FileOperationsRenameDir
		}
		qFileOperationsRenameDir := swag.FormatBool(qrFileOperationsRenameDir)
		if qFileOperationsRenameDir != "" {

			if err := r.SetQueryParam("file_operations.rename_dir", qFileOperationsRenameDir); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsSetattr != nil {

		// query param file_operations.setattr
		var qrFileOperationsSetattr bool

		if o.FileOperationsSetattr != nil {
			qrFileOperationsSetattr = *o.FileOperationsSetattr
		}
		qFileOperationsSetattr := swag.FormatBool(qrFileOperationsSetattr)
		if qFileOperationsSetattr != "" {

			if err := r.SetQueryParam("file_operations.setattr", qFileOperationsSetattr); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsSymlink != nil {

		// query param file_operations.symlink
		var qrFileOperationsSymlink bool

		if o.FileOperationsSymlink != nil {
			qrFileOperationsSymlink = *o.FileOperationsSymlink
		}
		qFileOperationsSymlink := swag.FormatBool(qrFileOperationsSymlink)
		if qFileOperationsSymlink != "" {

			if err := r.SetQueryParam("file_operations.symlink", qFileOperationsSymlink); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsWrite != nil {

		// query param file_operations.write
		var qrFileOperationsWrite bool

		if o.FileOperationsWrite != nil {
			qrFileOperationsWrite = *o.FileOperationsWrite
		}
		qFileOperationsWrite := swag.FormatBool(qrFileOperationsWrite)
		if qFileOperationsWrite != "" {

			if err := r.SetQueryParam("file_operations.write", qFileOperationsWrite); err != nil {
				return err
			}
		}
	}

	if o.FiltersCloseWithModification != nil {

		// query param filters.close_with_modification
		var qrFiltersCloseWithModification bool

		if o.FiltersCloseWithModification != nil {
			qrFiltersCloseWithModification = *o.FiltersCloseWithModification
		}
		qFiltersCloseWithModification := swag.FormatBool(qrFiltersCloseWithModification)
		if qFiltersCloseWithModification != "" {

			if err := r.SetQueryParam("filters.close_with_modification", qFiltersCloseWithModification); err != nil {
				return err
			}
		}
	}

	if o.FiltersCloseWithRead != nil {

		// query param filters.close_with_read
		var qrFiltersCloseWithRead bool

		if o.FiltersCloseWithRead != nil {
			qrFiltersCloseWithRead = *o.FiltersCloseWithRead
		}
		qFiltersCloseWithRead := swag.FormatBool(qrFiltersCloseWithRead)
		if qFiltersCloseWithRead != "" {

			if err := r.SetQueryParam("filters.close_with_read", qFiltersCloseWithRead); err != nil {
				return err
			}
		}
	}

	if o.FiltersCloseWithoutModification != nil {

		// query param filters.close_without_modification
		var qrFiltersCloseWithoutModification bool

		if o.FiltersCloseWithoutModification != nil {
			qrFiltersCloseWithoutModification = *o.FiltersCloseWithoutModification
		}
		qFiltersCloseWithoutModification := swag.FormatBool(qrFiltersCloseWithoutModification)
		if qFiltersCloseWithoutModification != "" {

			if err := r.SetQueryParam("filters.close_without_modification", qFiltersCloseWithoutModification); err != nil {
				return err
			}
		}
	}

	if o.FiltersExcludeDirectory != nil {

		// query param filters.exclude_directory
		var qrFiltersExcludeDirectory bool

		if o.FiltersExcludeDirectory != nil {
			qrFiltersExcludeDirectory = *o.FiltersExcludeDirectory
		}
		qFiltersExcludeDirectory := swag.FormatBool(qrFiltersExcludeDirectory)
		if qFiltersExcludeDirectory != "" {

			if err := r.SetQueryParam("filters.exclude_directory", qFiltersExcludeDirectory); err != nil {
				return err
			}
		}
	}

	if o.FiltersFirstRead != nil {

		// query param filters.first_read
		var qrFiltersFirstRead bool

		if o.FiltersFirstRead != nil {
			qrFiltersFirstRead = *o.FiltersFirstRead
		}
		qFiltersFirstRead := swag.FormatBool(qrFiltersFirstRead)
		if qFiltersFirstRead != "" {

			if err := r.SetQueryParam("filters.first_read", qFiltersFirstRead); err != nil {
				return err
			}
		}
	}

	if o.FiltersFirstWrite != nil {

		// query param filters.first_write
		var qrFiltersFirstWrite bool

		if o.FiltersFirstWrite != nil {
			qrFiltersFirstWrite = *o.FiltersFirstWrite
		}
		qFiltersFirstWrite := swag.FormatBool(qrFiltersFirstWrite)
		if qFiltersFirstWrite != "" {

			if err := r.SetQueryParam("filters.first_write", qFiltersFirstWrite); err != nil {
				return err
			}
		}
	}

	if o.FiltersMonitorAds != nil {

		// query param filters.monitor_ads
		var qrFiltersMonitorAds bool

		if o.FiltersMonitorAds != nil {
			qrFiltersMonitorAds = *o.FiltersMonitorAds
		}
		qFiltersMonitorAds := swag.FormatBool(qrFiltersMonitorAds)
		if qFiltersMonitorAds != "" {

			if err := r.SetQueryParam("filters.monitor_ads", qFiltersMonitorAds); err != nil {
				return err
			}
		}
	}

	if o.FiltersOfflineBit != nil {

		// query param filters.offline_bit
		var qrFiltersOfflineBit bool

		if o.FiltersOfflineBit != nil {
			qrFiltersOfflineBit = *o.FiltersOfflineBit
		}
		qFiltersOfflineBit := swag.FormatBool(qrFiltersOfflineBit)
		if qFiltersOfflineBit != "" {

			if err := r.SetQueryParam("filters.offline_bit", qFiltersOfflineBit); err != nil {
				return err
			}
		}
	}

	if o.FiltersOpenWithDeleteIntent != nil {

		// query param filters.open_with_delete_intent
		var qrFiltersOpenWithDeleteIntent bool

		if o.FiltersOpenWithDeleteIntent != nil {
			qrFiltersOpenWithDeleteIntent = *o.FiltersOpenWithDeleteIntent
		}
		qFiltersOpenWithDeleteIntent := swag.FormatBool(qrFiltersOpenWithDeleteIntent)
		if qFiltersOpenWithDeleteIntent != "" {

			if err := r.SetQueryParam("filters.open_with_delete_intent", qFiltersOpenWithDeleteIntent); err != nil {
				return err
			}
		}
	}

	if o.FiltersOpenWithWriteIntent != nil {

		// query param filters.open_with_write_intent
		var qrFiltersOpenWithWriteIntent bool

		if o.FiltersOpenWithWriteIntent != nil {
			qrFiltersOpenWithWriteIntent = *o.FiltersOpenWithWriteIntent
		}
		qFiltersOpenWithWriteIntent := swag.FormatBool(qrFiltersOpenWithWriteIntent)
		if qFiltersOpenWithWriteIntent != "" {

			if err := r.SetQueryParam("filters.open_with_write_intent", qFiltersOpenWithWriteIntent); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithAccessTimeChange != nil {

		// query param filters.setattr_with_access_time_change
		var qrFiltersSetattrWithAccessTimeChange bool

		if o.FiltersSetattrWithAccessTimeChange != nil {
			qrFiltersSetattrWithAccessTimeChange = *o.FiltersSetattrWithAccessTimeChange
		}
		qFiltersSetattrWithAccessTimeChange := swag.FormatBool(qrFiltersSetattrWithAccessTimeChange)
		if qFiltersSetattrWithAccessTimeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_access_time_change", qFiltersSetattrWithAccessTimeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithAllocationSizeChange != nil {

		// query param filters.setattr_with_allocation_size_change
		var qrFiltersSetattrWithAllocationSizeChange bool

		if o.FiltersSetattrWithAllocationSizeChange != nil {
			qrFiltersSetattrWithAllocationSizeChange = *o.FiltersSetattrWithAllocationSizeChange
		}
		qFiltersSetattrWithAllocationSizeChange := swag.FormatBool(qrFiltersSetattrWithAllocationSizeChange)
		if qFiltersSetattrWithAllocationSizeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_allocation_size_change", qFiltersSetattrWithAllocationSizeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithCreationTimeChange != nil {

		// query param filters.setattr_with_creation_time_change
		var qrFiltersSetattrWithCreationTimeChange bool

		if o.FiltersSetattrWithCreationTimeChange != nil {
			qrFiltersSetattrWithCreationTimeChange = *o.FiltersSetattrWithCreationTimeChange
		}
		qFiltersSetattrWithCreationTimeChange := swag.FormatBool(qrFiltersSetattrWithCreationTimeChange)
		if qFiltersSetattrWithCreationTimeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_creation_time_change", qFiltersSetattrWithCreationTimeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithDaclChange != nil {

		// query param filters.setattr_with_dacl_change
		var qrFiltersSetattrWithDaclChange bool

		if o.FiltersSetattrWithDaclChange != nil {
			qrFiltersSetattrWithDaclChange = *o.FiltersSetattrWithDaclChange
		}
		qFiltersSetattrWithDaclChange := swag.FormatBool(qrFiltersSetattrWithDaclChange)
		if qFiltersSetattrWithDaclChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_dacl_change", qFiltersSetattrWithDaclChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithGroupChange != nil {

		// query param filters.setattr_with_group_change
		var qrFiltersSetattrWithGroupChange bool

		if o.FiltersSetattrWithGroupChange != nil {
			qrFiltersSetattrWithGroupChange = *o.FiltersSetattrWithGroupChange
		}
		qFiltersSetattrWithGroupChange := swag.FormatBool(qrFiltersSetattrWithGroupChange)
		if qFiltersSetattrWithGroupChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_group_change", qFiltersSetattrWithGroupChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithModeChange != nil {

		// query param filters.setattr_with_mode_change
		var qrFiltersSetattrWithModeChange bool

		if o.FiltersSetattrWithModeChange != nil {
			qrFiltersSetattrWithModeChange = *o.FiltersSetattrWithModeChange
		}
		qFiltersSetattrWithModeChange := swag.FormatBool(qrFiltersSetattrWithModeChange)
		if qFiltersSetattrWithModeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_mode_change", qFiltersSetattrWithModeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithModifyTimeChange != nil {

		// query param filters.setattr_with_modify_time_change
		var qrFiltersSetattrWithModifyTimeChange bool

		if o.FiltersSetattrWithModifyTimeChange != nil {
			qrFiltersSetattrWithModifyTimeChange = *o.FiltersSetattrWithModifyTimeChange
		}
		qFiltersSetattrWithModifyTimeChange := swag.FormatBool(qrFiltersSetattrWithModifyTimeChange)
		if qFiltersSetattrWithModifyTimeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_modify_time_change", qFiltersSetattrWithModifyTimeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithOwnerChange != nil {

		// query param filters.setattr_with_owner_change
		var qrFiltersSetattrWithOwnerChange bool

		if o.FiltersSetattrWithOwnerChange != nil {
			qrFiltersSetattrWithOwnerChange = *o.FiltersSetattrWithOwnerChange
		}
		qFiltersSetattrWithOwnerChange := swag.FormatBool(qrFiltersSetattrWithOwnerChange)
		if qFiltersSetattrWithOwnerChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_owner_change", qFiltersSetattrWithOwnerChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithSaclChange != nil {

		// query param filters.setattr_with_sacl_change
		var qrFiltersSetattrWithSaclChange bool

		if o.FiltersSetattrWithSaclChange != nil {
			qrFiltersSetattrWithSaclChange = *o.FiltersSetattrWithSaclChange
		}
		qFiltersSetattrWithSaclChange := swag.FormatBool(qrFiltersSetattrWithSaclChange)
		if qFiltersSetattrWithSaclChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_sacl_change", qFiltersSetattrWithSaclChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithSizeChange != nil {

		// query param filters.setattr_with_size_change
		var qrFiltersSetattrWithSizeChange bool

		if o.FiltersSetattrWithSizeChange != nil {
			qrFiltersSetattrWithSizeChange = *o.FiltersSetattrWithSizeChange
		}
		qFiltersSetattrWithSizeChange := swag.FormatBool(qrFiltersSetattrWithSizeChange)
		if qFiltersSetattrWithSizeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_size_change", qFiltersSetattrWithSizeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersWriteWithSizeChange != nil {

		// query param filters.write_with_size_change
		var qrFiltersWriteWithSizeChange bool

		if o.FiltersWriteWithSizeChange != nil {
			qrFiltersWriteWithSizeChange = *o.FiltersWriteWithSizeChange
		}
		qFiltersWriteWithSizeChange := swag.FormatBool(qrFiltersWriteWithSizeChange)
		if qFiltersWriteWithSizeChange != "" {

			if err := r.SetQueryParam("filters.write_with_size_change", qFiltersWriteWithSizeChange); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.Protocol != nil {

		// query param protocol
		var qrProtocol string

		if o.Protocol != nil {
			qrProtocol = *o.Protocol
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SvmUUID); err != nil {
		return err
	}

	if o.VolumeMonitoring != nil {

		// query param volume_monitoring
		var qrVolumeMonitoring bool

		if o.VolumeMonitoring != nil {
			qrVolumeMonitoring = *o.VolumeMonitoring
		}
		qVolumeMonitoring := swag.FormatBool(qrVolumeMonitoring)
		if qVolumeMonitoring != "" {

			if err := r.SetQueryParam("volume_monitoring", qVolumeMonitoring); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFpolicyEventCollectionGet binds the parameter fields
func (o *FpolicyEventCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFpolicyEventCollectionGet binds the parameter order_by
func (o *FpolicyEventCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
