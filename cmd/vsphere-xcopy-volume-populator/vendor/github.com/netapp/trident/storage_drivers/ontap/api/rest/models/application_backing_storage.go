// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationBackingStorage application backing storage
//
// swagger:model application_backing_storage
type ApplicationBackingStorage struct {

	// application backing storage inline luns
	ApplicationBackingStorageInlineLuns []*ApplicationLunObject `json:"luns,omitempty"`

	// application backing storage inline namespaces
	ApplicationBackingStorageInlineNamespaces []*ApplicationNamespaceObject `json:"namespaces,omitempty"`

	// application backing storage inline volumes
	ApplicationBackingStorageInlineVolumes []*ApplicationVolumeObject `json:"volumes,omitempty"`
}

// Validate validates this application backing storage
func (m *ApplicationBackingStorage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationBackingStorageInlineLuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationBackingStorageInlineNamespaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationBackingStorageInlineVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationBackingStorage) validateApplicationBackingStorageInlineLuns(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationBackingStorageInlineLuns) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationBackingStorageInlineLuns); i++ {
		if swag.IsZero(m.ApplicationBackingStorageInlineLuns[i]) { // not required
			continue
		}

		if m.ApplicationBackingStorageInlineLuns[i] != nil {
			if err := m.ApplicationBackingStorageInlineLuns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationBackingStorage) validateApplicationBackingStorageInlineNamespaces(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationBackingStorageInlineNamespaces) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationBackingStorageInlineNamespaces); i++ {
		if swag.IsZero(m.ApplicationBackingStorageInlineNamespaces[i]) { // not required
			continue
		}

		if m.ApplicationBackingStorageInlineNamespaces[i] != nil {
			if err := m.ApplicationBackingStorageInlineNamespaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationBackingStorage) validateApplicationBackingStorageInlineVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationBackingStorageInlineVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationBackingStorageInlineVolumes); i++ {
		if swag.IsZero(m.ApplicationBackingStorageInlineVolumes[i]) { // not required
			continue
		}

		if m.ApplicationBackingStorageInlineVolumes[i] != nil {
			if err := m.ApplicationBackingStorageInlineVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this application backing storage based on the context it is used
func (m *ApplicationBackingStorage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationBackingStorageInlineLuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApplicationBackingStorageInlineNamespaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApplicationBackingStorageInlineVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationBackingStorage) contextValidateApplicationBackingStorageInlineLuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationBackingStorageInlineLuns); i++ {

		if m.ApplicationBackingStorageInlineLuns[i] != nil {
			if err := m.ApplicationBackingStorageInlineLuns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationBackingStorage) contextValidateApplicationBackingStorageInlineNamespaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationBackingStorageInlineNamespaces); i++ {

		if m.ApplicationBackingStorageInlineNamespaces[i] != nil {
			if err := m.ApplicationBackingStorageInlineNamespaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationBackingStorage) contextValidateApplicationBackingStorageInlineVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationBackingStorageInlineVolumes); i++ {

		if m.ApplicationBackingStorageInlineVolumes[i] != nil {
			if err := m.ApplicationBackingStorageInlineVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationBackingStorage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationBackingStorage) UnmarshalBinary(b []byte) error {
	var res ApplicationBackingStorage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
