// Code generated by MockGen. DO NOT EDIT.
// Source: command.go

// Package utils is a generated GoMock package.
package utils

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommandExecutor is a mock of CommandExecutor interface.
type MockCommandExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecutorMockRecorder
}

// MockCommandExecutorMockRecorder is the mock recorder for MockCommandExecutor.
type MockCommandExecutorMockRecorder struct {
	mock *MockCommandExecutor
}

// NewMockCommandExecutor creates a new mock instance.
func NewMockCommandExecutor(ctrl *gomock.Controller) *MockCommandExecutor {
	mock := &MockCommandExecutor{ctrl: ctrl}
	mock.recorder = &MockCommandExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandExecutor) EXPECT() *MockCommandExecutorMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCommandExecutor) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCommandExecutorMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandExecutor)(nil).Run))
}

// SetStderr mocks base method.
func (m *MockCommandExecutor) SetStderr(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStderr", arg0)
}

// SetStderr indicates an expected call of SetStderr.
func (mr *MockCommandExecutorMockRecorder) SetStderr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStderr", reflect.TypeOf((*MockCommandExecutor)(nil).SetStderr), arg0)
}

// SetStdin mocks base method.
func (m *MockCommandExecutor) SetStdin(read io.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStdin", read)
}

// SetStdin indicates an expected call of SetStdin.
func (mr *MockCommandExecutorMockRecorder) SetStdin(read interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdin", reflect.TypeOf((*MockCommandExecutor)(nil).SetStdin), read)
}

// SetStdout mocks base method.
func (m *MockCommandExecutor) SetStdout(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStdout", arg0)
}

// SetStdout indicates an expected call of SetStdout.
func (mr *MockCommandExecutorMockRecorder) SetStdout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdout", reflect.TypeOf((*MockCommandExecutor)(nil).SetStdout), arg0)
}

// Start mocks base method.
func (m *MockCommandExecutor) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCommandExecutorMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCommandExecutor)(nil).Start))
}

// Wait mocks base method.
func (m *MockCommandExecutor) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockCommandExecutorMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockCommandExecutor)(nil).Wait))
}

// MockCommandBuilder is a mock of CommandBuilder interface.
type MockCommandBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBuilderMockRecorder
}

// MockCommandBuilderMockRecorder is the mock recorder for MockCommandBuilder.
type MockCommandBuilderMockRecorder struct {
	mock *MockCommandBuilder
}

// NewMockCommandBuilder creates a new mock instance.
func NewMockCommandBuilder(ctrl *gomock.Controller) *MockCommandBuilder {
	mock := &MockCommandBuilder{ctrl: ctrl}
	mock.recorder = &MockCommandBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBuilder) EXPECT() *MockCommandBuilderMockRecorder {
	return m.recorder
}

// AddArg mocks base method.
func (m *MockCommandBuilder) AddArg(flag, value string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArg", flag, value)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// AddArg indicates an expected call of AddArg.
func (mr *MockCommandBuilderMockRecorder) AddArg(flag, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArg", reflect.TypeOf((*MockCommandBuilder)(nil).AddArg), flag, value)
}

// AddArgs mocks base method.
func (m *MockCommandBuilder) AddArgs(flag string, values ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{flag}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddArgs", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// AddArgs indicates an expected call of AddArgs.
func (mr *MockCommandBuilderMockRecorder) AddArgs(flag interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{flag}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArgs", reflect.TypeOf((*MockCommandBuilder)(nil).AddArgs), varargs...)
}

// AddExtraArgs mocks base method.
func (m *MockCommandBuilder) AddExtraArgs(values ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddExtraArgs", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// AddExtraArgs indicates an expected call of AddExtraArgs.
func (mr *MockCommandBuilderMockRecorder) AddExtraArgs(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExtraArgs", reflect.TypeOf((*MockCommandBuilder)(nil).AddExtraArgs), values...)
}

// AddFlag mocks base method.
func (m *MockCommandBuilder) AddFlag(flag string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlag", flag)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// AddFlag indicates an expected call of AddFlag.
func (mr *MockCommandBuilderMockRecorder) AddFlag(flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlag", reflect.TypeOf((*MockCommandBuilder)(nil).AddFlag), flag)
}

// AddPositional mocks base method.
func (m *MockCommandBuilder) AddPositional(value string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPositional", value)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// AddPositional indicates an expected call of AddPositional.
func (mr *MockCommandBuilderMockRecorder) AddPositional(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPositional", reflect.TypeOf((*MockCommandBuilder)(nil).AddPositional), value)
}

// Build mocks base method.
func (m *MockCommandBuilder) Build() CommandExecutor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(CommandExecutor)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockCommandBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockCommandBuilder)(nil).Build))
}

// New mocks base method.
func (m *MockCommandBuilder) New(cmd string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", cmd)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockCommandBuilderMockRecorder) New(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockCommandBuilder)(nil).New), cmd)
}
