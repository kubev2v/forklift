// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareDqpRecordCount firmware dqp record count
//
// swagger:model firmware_dqp_record_count
type FirmwareDqpRecordCount struct {

	// Alias record count
	// Example: 200
	// Read Only: true
	Alias *int64 `json:"alias,omitempty"`

	// Device record count
	// Example: 29
	// Read Only: true
	Device *int64 `json:"device,omitempty"`

	// Drive record count
	// Example: 680
	// Read Only: true
	Drive *int64 `json:"drive,omitempty"`

	// System record count
	// Example: 3
	// Read Only: true
	System *int64 `json:"system,omitempty"`
}

// Validate validates this firmware dqp record count
func (m *FirmwareDqpRecordCount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this firmware dqp record count based on the context it is used
func (m *FirmwareDqpRecordCount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlias(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDrive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareDqpRecordCount) contextValidateAlias(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "alias", "body", m.Alias); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareDqpRecordCount) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "device", "body", m.Device); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareDqpRecordCount) contextValidateDrive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "drive", "body", m.Drive); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareDqpRecordCount) contextValidateSystem(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "system", "body", m.System); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareDqpRecordCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareDqpRecordCount) UnmarshalBinary(b []byte) error {
	var res FirmwareDqpRecordCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
