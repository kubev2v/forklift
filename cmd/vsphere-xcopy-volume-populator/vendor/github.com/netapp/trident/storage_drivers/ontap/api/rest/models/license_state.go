// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LicenseState license state
// Example: compliant
//
// swagger:model license_state
type LicenseState string

func NewLicenseState(value LicenseState) *LicenseState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LicenseState.
func (m LicenseState) Pointer() *LicenseState {
	return &m
}

const (

	// LicenseStateCompliant captures enum value "compliant"
	LicenseStateCompliant LicenseState = "compliant"

	// LicenseStateNoncompliant captures enum value "noncompliant"
	LicenseStateNoncompliant LicenseState = "noncompliant"

	// LicenseStateUnlicensed captures enum value "unlicensed"
	LicenseStateUnlicensed LicenseState = "unlicensed"

	// LicenseStateUnknown captures enum value "unknown"
	LicenseStateUnknown LicenseState = "unknown"
)

// for schema
var licenseStateEnum []interface{}

func init() {
	var res []LicenseState
	if err := json.Unmarshal([]byte(`["compliant","noncompliant","unlicensed","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseStateEnum = append(licenseStateEnum, v)
	}
}

func (m LicenseState) validateLicenseStateEnum(path, location string, value LicenseState) error {
	if err := validate.EnumCase(path, location, value, licenseStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this license state
func (m LicenseState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLicenseStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this license state based on the context it is used
func (m LicenseState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", LicenseState(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
