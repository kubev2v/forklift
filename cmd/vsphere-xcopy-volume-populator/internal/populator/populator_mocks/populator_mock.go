// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubev2v/forklift/cmd/vsphere-xcopy-volume-populator/internal/populator (interfaces: Populator)
//
// Generated by this command:
//
//	mockgen -destination=internal/populator/mocks/populator_mock.go -package=mocks github.com/kubev2v/forklift/cmd/vsphere-xcopy-volume-populator/internal/populator Populator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	populator "github.com/kubev2v/forklift/cmd/vsphere-xcopy-volume-populator/internal/populator"
	gomock "go.uber.org/mock/gomock"
)

// MockPopulator is a mock of Populator interface.
type MockPopulator struct {
	ctrl     *gomock.Controller
	recorder *MockPopulatorMockRecorder
	isgomock struct{}
}

// MockPopulatorMockRecorder is the mock recorder for MockPopulator.
type MockPopulatorMockRecorder struct {
	mock *MockPopulator
}

// NewMockPopulator creates a new mock instance.
func NewMockPopulator(ctrl *gomock.Controller) *MockPopulator {
	mock := &MockPopulator{ctrl: ctrl}
	mock.recorder = &MockPopulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPopulator) EXPECT() *MockPopulatorMockRecorder {
	return m.recorder
}

// Populate mocks base method.
func (m *MockPopulator) Populate(vmId, sourceVMDKFile string, persistentVolume populator.PersistentVolume, progress chan<- uint, quit chan error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Populate", vmId, sourceVMDKFile, persistentVolume, progress, quit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Populate indicates an expected call of Populate.
func (mr *MockPopulatorMockRecorder) Populate(vmId, sourceVMDKFile, persistentVolume, progress, quit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Populate", reflect.TypeOf((*MockPopulator)(nil).Populate), vmId, sourceVMDKFile, persistentVolume, progress, quit)
}
