// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubev2v/forklift/cmd/vsphere-xcopy-volume-populator/internal/vmware (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mocks/vmware_mock_client.go -package=vmware_mocks . Client
//

// Package vmware_mocks is a generated GoMock package.
package vmware_mocks

import (
	context "context"
	reflect "reflect"

	esx "github.com/vmware/govmomi/cli/esx"
	object "github.com/vmware/govmomi/object"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetDatastore mocks base method.
func (m *MockClient) GetDatastore(ctx context.Context, datastore string) (*object.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastore", ctx, datastore)
	ret0, _ := ret[0].(*object.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastore indicates an expected call of GetDatastore.
func (mr *MockClientMockRecorder) GetDatastore(ctx, datastore any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastore", reflect.TypeOf((*MockClient)(nil).GetDatastore), ctx, datastore)
}

// GetEsxByVm mocks base method.
func (m *MockClient) GetEsxByVm(ctx context.Context, vmName string) (*object.HostSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEsxByVm", ctx, vmName)
	ret0, _ := ret[0].(*object.HostSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEsxByVm indicates an expected call of GetEsxByVm.
func (mr *MockClientMockRecorder) GetEsxByVm(ctx, vmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEsxByVm", reflect.TypeOf((*MockClient)(nil).GetEsxByVm), ctx, vmName)
}

// RunEsxCommand mocks base method.
func (m *MockClient) RunEsxCommand(ctx context.Context, host *object.HostSystem, command []string) ([]esx.Values, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunEsxCommand", ctx, host, command)
	ret0, _ := ret[0].([]esx.Values)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunEsxCommand indicates an expected call of RunEsxCommand.
func (mr *MockClientMockRecorder) RunEsxCommand(ctx, host, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunEsxCommand", reflect.TypeOf((*MockClient)(nil).RunEsxCommand), ctx, host, command)
}
