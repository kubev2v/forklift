// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubev2v/forklift/cmd/vsphere-xcopy-volume-populator/internal/populator (interfaces: StorageApi)
//
// Generated by this command:
//
//	mockgen -destination=mocks/storage_mock_client.go -package=storage_mocks . StorageApi
//

// Package storage_mocks is a generated GoMock package.
package storage_mocks

import (
	reflect "reflect"

	populator "github.com/kubev2v/forklift/cmd/vsphere-xcopy-volume-populator/internal/populator"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageApi is a mock of StorageApi interface.
type MockStorageApi struct {
	ctrl     *gomock.Controller
	recorder *MockStorageApiMockRecorder
	isgomock struct{}
}

// MockStorageApiMockRecorder is the mock recorder for MockStorageApi.
type MockStorageApiMockRecorder struct {
	mock *MockStorageApi
}

// NewMockStorageApi creates a new mock instance.
func NewMockStorageApi(ctrl *gomock.Controller) *MockStorageApi {
	mock := &MockStorageApi{ctrl: ctrl}
	mock.recorder = &MockStorageApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageApi) EXPECT() *MockStorageApiMockRecorder {
	return m.recorder
}

// CurrentMappedGroups mocks base method.
func (m *MockStorageApi) CurrentMappedGroups(targetLUN populator.LUN, context populator.MappingContext) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentMappedGroups", targetLUN, context)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentMappedGroups indicates an expected call of CurrentMappedGroups.
func (mr *MockStorageApiMockRecorder) CurrentMappedGroups(targetLUN, context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentMappedGroups", reflect.TypeOf((*MockStorageApi)(nil).CurrentMappedGroups), targetLUN, context)
}

// EnsureClonnerIgroup mocks base method.
func (m *MockStorageApi) EnsureClonnerIgroup(initiatorGroup, clonnerIqn string) (populator.MappingContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureClonnerIgroup", initiatorGroup, clonnerIqn)
	ret0, _ := ret[0].(populator.MappingContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureClonnerIgroup indicates an expected call of EnsureClonnerIgroup.
func (mr *MockStorageApiMockRecorder) EnsureClonnerIgroup(initiatorGroup, clonnerIqn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureClonnerIgroup", reflect.TypeOf((*MockStorageApi)(nil).EnsureClonnerIgroup), initiatorGroup, clonnerIqn)
}

// Map mocks base method.
func (m *MockStorageApi) Map(initatorGroup string, targetLUN populator.LUN, context populator.MappingContext) (populator.LUN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map", initatorGroup, targetLUN, context)
	ret0, _ := ret[0].(populator.LUN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Map indicates an expected call of Map.
func (mr *MockStorageApiMockRecorder) Map(initatorGroup, targetLUN, context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockStorageApi)(nil).Map), initatorGroup, targetLUN, context)
}

// ResolveVolumeHandleToLUN mocks base method.
func (m *MockStorageApi) ResolveVolumeHandleToLUN(volumeHandle string) (populator.LUN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveVolumeHandleToLUN", volumeHandle)
	ret0, _ := ret[0].(populator.LUN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveVolumeHandleToLUN indicates an expected call of ResolveVolumeHandleToLUN.
func (mr *MockStorageApiMockRecorder) ResolveVolumeHandleToLUN(volumeHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveVolumeHandleToLUN", reflect.TypeOf((*MockStorageApi)(nil).ResolveVolumeHandleToLUN), volumeHandle)
}

// UnMap mocks base method.
func (m *MockStorageApi) UnMap(initatorGroup string, targetLUN populator.LUN, context populator.MappingContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnMap", initatorGroup, targetLUN, context)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnMap indicates an expected call of UnMap.
func (mr *MockStorageApiMockRecorder) UnMap(initatorGroup, targetLUN, context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnMap", reflect.TypeOf((*MockStorageApi)(nil).UnMap), initatorGroup, targetLUN, context)
}
