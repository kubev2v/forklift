// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMultiAdminVerifyRuleCollectionGetParams creates a new MultiAdminVerifyRuleCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMultiAdminVerifyRuleCollectionGetParams() *MultiAdminVerifyRuleCollectionGetParams {
	return &MultiAdminVerifyRuleCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMultiAdminVerifyRuleCollectionGetParamsWithTimeout creates a new MultiAdminVerifyRuleCollectionGetParams object
// with the ability to set a timeout on a request.
func NewMultiAdminVerifyRuleCollectionGetParamsWithTimeout(timeout time.Duration) *MultiAdminVerifyRuleCollectionGetParams {
	return &MultiAdminVerifyRuleCollectionGetParams{
		timeout: timeout,
	}
}

// NewMultiAdminVerifyRuleCollectionGetParamsWithContext creates a new MultiAdminVerifyRuleCollectionGetParams object
// with the ability to set a context for a request.
func NewMultiAdminVerifyRuleCollectionGetParamsWithContext(ctx context.Context) *MultiAdminVerifyRuleCollectionGetParams {
	return &MultiAdminVerifyRuleCollectionGetParams{
		Context: ctx,
	}
}

// NewMultiAdminVerifyRuleCollectionGetParamsWithHTTPClient creates a new MultiAdminVerifyRuleCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewMultiAdminVerifyRuleCollectionGetParamsWithHTTPClient(client *http.Client) *MultiAdminVerifyRuleCollectionGetParams {
	return &MultiAdminVerifyRuleCollectionGetParams{
		HTTPClient: client,
	}
}

/*
MultiAdminVerifyRuleCollectionGetParams contains all the parameters to send to the API endpoint

	for the multi admin verify rule collection get operation.

	Typically these are written to a http.Request.
*/
type MultiAdminVerifyRuleCollectionGetParams struct {

	/* ApprovalExpiry.

	   Filter by approval_expiry
	*/
	ApprovalExpiry *string

	/* ApprovalGroupsName.

	   Filter by approval_groups.name
	*/
	ApprovalGroupsName *string

	/* AutoRequestCreate.

	   Filter by auto_request_create
	*/
	AutoRequestCreate *bool

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTime *string

	/* ExecutionExpiry.

	   Filter by execution_expiry
	*/
	ExecutionExpiry *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Operation.

	   Filter by operation
	*/
	Operation *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* OwnerName.

	   Filter by owner.name
	*/
	OwnerName *string

	/* OwnerUUID.

	   Filter by owner.uuid
	*/
	OwnerUUID *string

	/* Query.

	   Filter by query
	*/
	Query *string

	/* RequiredApprovers.

	   Filter by required_approvers
	*/
	RequiredApprovers *int64

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SystemDefined.

	   Filter by system_defined
	*/
	SystemDefined *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the multi admin verify rule collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MultiAdminVerifyRuleCollectionGetParams) WithDefaults() *MultiAdminVerifyRuleCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the multi admin verify rule collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MultiAdminVerifyRuleCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := MultiAdminVerifyRuleCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithTimeout(timeout time.Duration) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithContext(ctx context.Context) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithHTTPClient(client *http.Client) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApprovalExpiry adds the approvalExpiry to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithApprovalExpiry(approvalExpiry *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetApprovalExpiry(approvalExpiry)
	return o
}

// SetApprovalExpiry adds the approvalExpiry to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetApprovalExpiry(approvalExpiry *string) {
	o.ApprovalExpiry = approvalExpiry
}

// WithApprovalGroupsName adds the approvalGroupsName to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithApprovalGroupsName(approvalGroupsName *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetApprovalGroupsName(approvalGroupsName)
	return o
}

// SetApprovalGroupsName adds the approvalGroupsName to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetApprovalGroupsName(approvalGroupsName *string) {
	o.ApprovalGroupsName = approvalGroupsName
}

// WithAutoRequestCreate adds the autoRequestCreate to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithAutoRequestCreate(autoRequestCreate *bool) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetAutoRequestCreate(autoRequestCreate)
	return o
}

// SetAutoRequestCreate adds the autoRequestCreate to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetAutoRequestCreate(autoRequestCreate *bool) {
	o.AutoRequestCreate = autoRequestCreate
}

// WithCreateTime adds the createTime to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithCreateTime(createTime *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetCreateTime(createTime)
	return o
}

// SetCreateTime adds the createTime to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetCreateTime(createTime *string) {
	o.CreateTime = createTime
}

// WithExecutionExpiry adds the executionExpiry to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithExecutionExpiry(executionExpiry *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetExecutionExpiry(executionExpiry)
	return o
}

// SetExecutionExpiry adds the executionExpiry to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetExecutionExpiry(executionExpiry *string) {
	o.ExecutionExpiry = executionExpiry
}

// WithFields adds the fields to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithFields(fields []string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithMaxRecords adds the maxRecords to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithMaxRecords(maxRecords *int64) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithOperation adds the operation to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithOperation(operation *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetOperation(operation)
	return o
}

// SetOperation adds the operation to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetOperation(operation *string) {
	o.Operation = operation
}

// WithOrderBy adds the orderBy to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithOrderBy(orderBy []string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithOwnerName adds the ownerName to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithOwnerName(ownerName *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetOwnerName(ownerName)
	return o
}

// SetOwnerName adds the ownerName to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetOwnerName(ownerName *string) {
	o.OwnerName = ownerName
}

// WithOwnerUUID adds the ownerUUID to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithOwnerUUID(ownerUUID *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetOwnerUUID(ownerUUID)
	return o
}

// SetOwnerUUID adds the ownerUuid to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetOwnerUUID(ownerUUID *string) {
	o.OwnerUUID = ownerUUID
}

// WithQuery adds the query to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithQuery(query *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetQuery(query *string) {
	o.Query = query
}

// WithRequiredApprovers adds the requiredApprovers to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithRequiredApprovers(requiredApprovers *int64) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetRequiredApprovers(requiredApprovers)
	return o
}

// SetRequiredApprovers adds the requiredApprovers to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetRequiredApprovers(requiredApprovers *int64) {
	o.RequiredApprovers = requiredApprovers
}

// WithReturnRecords adds the returnRecords to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithReturnRecords(returnRecords *bool) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSystemDefined adds the systemDefined to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithSystemDefined(systemDefined *bool) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetSystemDefined(systemDefined)
	return o
}

// SetSystemDefined adds the systemDefined to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetSystemDefined(systemDefined *bool) {
	o.SystemDefined = systemDefined
}

// WriteToRequest writes these params to a swagger request
func (o *MultiAdminVerifyRuleCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApprovalExpiry != nil {

		// query param approval_expiry
		var qrApprovalExpiry string

		if o.ApprovalExpiry != nil {
			qrApprovalExpiry = *o.ApprovalExpiry
		}
		qApprovalExpiry := qrApprovalExpiry
		if qApprovalExpiry != "" {

			if err := r.SetQueryParam("approval_expiry", qApprovalExpiry); err != nil {
				return err
			}
		}
	}

	if o.ApprovalGroupsName != nil {

		// query param approval_groups.name
		var qrApprovalGroupsName string

		if o.ApprovalGroupsName != nil {
			qrApprovalGroupsName = *o.ApprovalGroupsName
		}
		qApprovalGroupsName := qrApprovalGroupsName
		if qApprovalGroupsName != "" {

			if err := r.SetQueryParam("approval_groups.name", qApprovalGroupsName); err != nil {
				return err
			}
		}
	}

	if o.AutoRequestCreate != nil {

		// query param auto_request_create
		var qrAutoRequestCreate bool

		if o.AutoRequestCreate != nil {
			qrAutoRequestCreate = *o.AutoRequestCreate
		}
		qAutoRequestCreate := swag.FormatBool(qrAutoRequestCreate)
		if qAutoRequestCreate != "" {

			if err := r.SetQueryParam("auto_request_create", qAutoRequestCreate); err != nil {
				return err
			}
		}
	}

	if o.CreateTime != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTime != nil {
			qrCreateTime = *o.CreateTime
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.ExecutionExpiry != nil {

		// query param execution_expiry
		var qrExecutionExpiry string

		if o.ExecutionExpiry != nil {
			qrExecutionExpiry = *o.ExecutionExpiry
		}
		qExecutionExpiry := qrExecutionExpiry
		if qExecutionExpiry != "" {

			if err := r.SetQueryParam("execution_expiry", qExecutionExpiry); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.Operation != nil {

		// query param operation
		var qrOperation string

		if o.Operation != nil {
			qrOperation = *o.Operation
		}
		qOperation := qrOperation
		if qOperation != "" {

			if err := r.SetQueryParam("operation", qOperation); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OwnerName != nil {

		// query param owner.name
		var qrOwnerName string

		if o.OwnerName != nil {
			qrOwnerName = *o.OwnerName
		}
		qOwnerName := qrOwnerName
		if qOwnerName != "" {

			if err := r.SetQueryParam("owner.name", qOwnerName); err != nil {
				return err
			}
		}
	}

	if o.OwnerUUID != nil {

		// query param owner.uuid
		var qrOwnerUUID string

		if o.OwnerUUID != nil {
			qrOwnerUUID = *o.OwnerUUID
		}
		qOwnerUUID := qrOwnerUUID
		if qOwnerUUID != "" {

			if err := r.SetQueryParam("owner.uuid", qOwnerUUID); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.RequiredApprovers != nil {

		// query param required_approvers
		var qrRequiredApprovers int64

		if o.RequiredApprovers != nil {
			qrRequiredApprovers = *o.RequiredApprovers
		}
		qRequiredApprovers := swag.FormatInt64(qrRequiredApprovers)
		if qRequiredApprovers != "" {

			if err := r.SetQueryParam("required_approvers", qRequiredApprovers); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SystemDefined != nil {

		// query param system_defined
		var qrSystemDefined bool

		if o.SystemDefined != nil {
			qrSystemDefined = *o.SystemDefined
		}
		qSystemDefined := swag.FormatBool(qrSystemDefined)
		if qSystemDefined != "" {

			if err := r.SetQueryParam("system_defined", qSystemDefined); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamMultiAdminVerifyRuleCollectionGet binds the parameter fields
func (o *MultiAdminVerifyRuleCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamMultiAdminVerifyRuleCollectionGet binds the parameter order_by
func (o *MultiAdminVerifyRuleCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
