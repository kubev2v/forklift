// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGroupPoliciesToBeAppliedModifyParams creates a new GroupPoliciesToBeAppliedModifyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGroupPoliciesToBeAppliedModifyParams() *GroupPoliciesToBeAppliedModifyParams {
	return &GroupPoliciesToBeAppliedModifyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGroupPoliciesToBeAppliedModifyParamsWithTimeout creates a new GroupPoliciesToBeAppliedModifyParams object
// with the ability to set a timeout on a request.
func NewGroupPoliciesToBeAppliedModifyParamsWithTimeout(timeout time.Duration) *GroupPoliciesToBeAppliedModifyParams {
	return &GroupPoliciesToBeAppliedModifyParams{
		timeout: timeout,
	}
}

// NewGroupPoliciesToBeAppliedModifyParamsWithContext creates a new GroupPoliciesToBeAppliedModifyParams object
// with the ability to set a context for a request.
func NewGroupPoliciesToBeAppliedModifyParamsWithContext(ctx context.Context) *GroupPoliciesToBeAppliedModifyParams {
	return &GroupPoliciesToBeAppliedModifyParams{
		Context: ctx,
	}
}

// NewGroupPoliciesToBeAppliedModifyParamsWithHTTPClient creates a new GroupPoliciesToBeAppliedModifyParams object
// with the ability to set a custom HTTPClient for a request.
func NewGroupPoliciesToBeAppliedModifyParamsWithHTTPClient(client *http.Client) *GroupPoliciesToBeAppliedModifyParams {
	return &GroupPoliciesToBeAppliedModifyParams{
		HTTPClient: client,
	}
}

/*
GroupPoliciesToBeAppliedModifyParams contains all the parameters to send to the API endpoint

	for the group policies to be applied modify operation.

	Typically these are written to a http.Request.
*/
type GroupPoliciesToBeAppliedModifyParams struct {

	/* ApplyUpdates.

	   Indicates whether to apply updates or not.

	   Default: true
	*/
	ApplyUpdates *bool

	/* ForceReapplyAllSettings.

	   Indicates whether or not a re-applying of all settings is enforced.
	*/
	ForceReapplyAllSettings *bool

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SvmUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the group policies to be applied modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GroupPoliciesToBeAppliedModifyParams) WithDefaults() *GroupPoliciesToBeAppliedModifyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the group policies to be applied modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GroupPoliciesToBeAppliedModifyParams) SetDefaults() {
	var (
		applyUpdatesDefault = bool(true)

		forceReapplyAllSettingsDefault = bool(false)
	)

	val := GroupPoliciesToBeAppliedModifyParams{
		ApplyUpdates:            &applyUpdatesDefault,
		ForceReapplyAllSettings: &forceReapplyAllSettingsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) WithTimeout(timeout time.Duration) *GroupPoliciesToBeAppliedModifyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) WithContext(ctx context.Context) *GroupPoliciesToBeAppliedModifyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) WithHTTPClient(client *http.Client) *GroupPoliciesToBeAppliedModifyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplyUpdates adds the applyUpdates to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) WithApplyUpdates(applyUpdates *bool) *GroupPoliciesToBeAppliedModifyParams {
	o.SetApplyUpdates(applyUpdates)
	return o
}

// SetApplyUpdates adds the applyUpdates to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) SetApplyUpdates(applyUpdates *bool) {
	o.ApplyUpdates = applyUpdates
}

// WithForceReapplyAllSettings adds the forceReapplyAllSettings to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) WithForceReapplyAllSettings(forceReapplyAllSettings *bool) *GroupPoliciesToBeAppliedModifyParams {
	o.SetForceReapplyAllSettings(forceReapplyAllSettings)
	return o
}

// SetForceReapplyAllSettings adds the forceReapplyAllSettings to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) SetForceReapplyAllSettings(forceReapplyAllSettings *bool) {
	o.ForceReapplyAllSettings = forceReapplyAllSettings
}

// WithSvmUUID adds the svmUUID to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) WithSvmUUID(svmUUID string) *GroupPoliciesToBeAppliedModifyParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the group policies to be applied modify params
func (o *GroupPoliciesToBeAppliedModifyParams) SetSvmUUID(svmUUID string) {
	o.SvmUUID = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *GroupPoliciesToBeAppliedModifyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplyUpdates != nil {

		// query param apply_updates
		var qrApplyUpdates bool

		if o.ApplyUpdates != nil {
			qrApplyUpdates = *o.ApplyUpdates
		}
		qApplyUpdates := swag.FormatBool(qrApplyUpdates)
		if qApplyUpdates != "" {

			if err := r.SetQueryParam("apply_updates", qApplyUpdates); err != nil {
				return err
			}
		}
	}

	if o.ForceReapplyAllSettings != nil {

		// query param force_reapply_all_settings
		var qrForceReapplyAllSettings bool

		if o.ForceReapplyAllSettings != nil {
			qrForceReapplyAllSettings = *o.ForceReapplyAllSettings
		}
		qForceReapplyAllSettings := swag.FormatBool(qrForceReapplyAllSettings)
		if qForceReapplyAllSettings != "" {

			if err := r.SetQueryParam("force_reapply_all_settings", qForceReapplyAllSettings); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SvmUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
