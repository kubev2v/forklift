// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NdmpAddrType The different NDMP connection types.
//
// swagger:model ndmp_addr_type
type NdmpAddrType string

func NewNdmpAddrType(value NdmpAddrType) *NdmpAddrType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NdmpAddrType.
func (m NdmpAddrType) Pointer() *NdmpAddrType {
	return &m
}

const (

	// NdmpAddrTypeLocal captures enum value "local"
	NdmpAddrTypeLocal NdmpAddrType = "local"

	// NdmpAddrTypeTCP captures enum value "tcp"
	NdmpAddrTypeTCP NdmpAddrType = "tcp"
)

// for schema
var ndmpAddrTypeEnum []interface{}

func init() {
	var res []NdmpAddrType
	if err := json.Unmarshal([]byte(`["local","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ndmpAddrTypeEnum = append(ndmpAddrTypeEnum, v)
	}
}

func (m NdmpAddrType) validateNdmpAddrTypeEnum(path, location string, value NdmpAddrType) error {
	if err := validate.EnumCase(path, location, value, ndmpAddrTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ndmp addr type
func (m NdmpAddrType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNdmpAddrTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ndmp addr type based on context it is used
func (m NdmpAddrType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
