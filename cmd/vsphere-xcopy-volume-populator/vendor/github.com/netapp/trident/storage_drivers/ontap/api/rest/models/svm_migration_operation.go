// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SvmMigrationOperation svm migration operation
//
// swagger:model svm_migration_operation
type SvmMigrationOperation string

func NewSvmMigrationOperation(value SvmMigrationOperation) *SvmMigrationOperation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SvmMigrationOperation.
func (m SvmMigrationOperation) Pointer() *SvmMigrationOperation {
	return &m
}

const (

	// SvmMigrationOperationNone captures enum value "none"
	SvmMigrationOperationNone SvmMigrationOperation = "none"

	// SvmMigrationOperationStart captures enum value "start"
	SvmMigrationOperationStart SvmMigrationOperation = "start"

	// SvmMigrationOperationResume captures enum value "resume"
	SvmMigrationOperationResume SvmMigrationOperation = "resume"

	// SvmMigrationOperationPause captures enum value "pause"
	SvmMigrationOperationPause SvmMigrationOperation = "pause"

	// SvmMigrationOperationCleanup captures enum value "cleanup"
	SvmMigrationOperationCleanup SvmMigrationOperation = "cleanup"

	// SvmMigrationOperationCutover captures enum value "cutover"
	SvmMigrationOperationCutover SvmMigrationOperation = "cutover"
)

// for schema
var svmMigrationOperationEnum []interface{}

func init() {
	var res []SvmMigrationOperation
	if err := json.Unmarshal([]byte(`["none","start","resume","pause","cleanup","cutover"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		svmMigrationOperationEnum = append(svmMigrationOperationEnum, v)
	}
}

func (m SvmMigrationOperation) validateSvmMigrationOperationEnum(path, location string, value SvmMigrationOperation) error {
	if err := validate.EnumCase(path, location, value, svmMigrationOperationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this svm migration operation
func (m SvmMigrationOperation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSvmMigrationOperationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this svm migration operation based on the context it is used
func (m SvmMigrationOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", SvmMigrationOperation(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
