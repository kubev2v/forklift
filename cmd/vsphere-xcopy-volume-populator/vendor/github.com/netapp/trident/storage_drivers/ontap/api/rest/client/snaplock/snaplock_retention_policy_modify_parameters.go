// Code generated by go-swagger; DO NOT EDIT.

package snaplock

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// NewSnaplockRetentionPolicyModifyParams creates a new SnaplockRetentionPolicyModifyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSnaplockRetentionPolicyModifyParams() *SnaplockRetentionPolicyModifyParams {
	return &SnaplockRetentionPolicyModifyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSnaplockRetentionPolicyModifyParamsWithTimeout creates a new SnaplockRetentionPolicyModifyParams object
// with the ability to set a timeout on a request.
func NewSnaplockRetentionPolicyModifyParamsWithTimeout(timeout time.Duration) *SnaplockRetentionPolicyModifyParams {
	return &SnaplockRetentionPolicyModifyParams{
		timeout: timeout,
	}
}

// NewSnaplockRetentionPolicyModifyParamsWithContext creates a new SnaplockRetentionPolicyModifyParams object
// with the ability to set a context for a request.
func NewSnaplockRetentionPolicyModifyParamsWithContext(ctx context.Context) *SnaplockRetentionPolicyModifyParams {
	return &SnaplockRetentionPolicyModifyParams{
		Context: ctx,
	}
}

// NewSnaplockRetentionPolicyModifyParamsWithHTTPClient creates a new SnaplockRetentionPolicyModifyParams object
// with the ability to set a custom HTTPClient for a request.
func NewSnaplockRetentionPolicyModifyParamsWithHTTPClient(client *http.Client) *SnaplockRetentionPolicyModifyParams {
	return &SnaplockRetentionPolicyModifyParams{
		HTTPClient: client,
	}
}

/*
SnaplockRetentionPolicyModifyParams contains all the parameters to send to the API endpoint

	for the snaplock retention policy modify operation.

	Typically these are written to a http.Request.
*/
type SnaplockRetentionPolicyModifyParams struct {

	/* Info.

	   Info specification
	*/
	Info *models.SnaplockRetentionPolicy

	/* PolicyName.

	   Name of the retention policy
	*/
	PolicyName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the snaplock retention policy modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnaplockRetentionPolicyModifyParams) WithDefaults() *SnaplockRetentionPolicyModifyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the snaplock retention policy modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnaplockRetentionPolicyModifyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) WithTimeout(timeout time.Duration) *SnaplockRetentionPolicyModifyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) WithContext(ctx context.Context) *SnaplockRetentionPolicyModifyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) WithHTTPClient(client *http.Client) *SnaplockRetentionPolicyModifyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInfo adds the info to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) WithInfo(info *models.SnaplockRetentionPolicy) *SnaplockRetentionPolicyModifyParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) SetInfo(info *models.SnaplockRetentionPolicy) {
	o.Info = info
}

// WithPolicyName adds the policyName to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) WithPolicyName(policyName string) *SnaplockRetentionPolicyModifyParams {
	o.SetPolicyName(policyName)
	return o
}

// SetPolicyName adds the policyName to the snaplock retention policy modify params
func (o *SnaplockRetentionPolicyModifyParams) SetPolicyName(policyName string) {
	o.PolicyName = policyName
}

// WriteToRequest writes these params to a swagger request
func (o *SnaplockRetentionPolicyModifyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Info != nil {
		if err := r.SetBodyParam(o.Info); err != nil {
			return err
		}
	}

	// path param policy.name
	if err := r.SetPathParam("policy.name", o.PolicyName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
