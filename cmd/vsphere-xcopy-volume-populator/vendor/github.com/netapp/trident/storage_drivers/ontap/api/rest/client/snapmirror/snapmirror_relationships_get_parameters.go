// Code generated by go-swagger; DO NOT EDIT.

package snapmirror

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSnapmirrorRelationshipsGetParams creates a new SnapmirrorRelationshipsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSnapmirrorRelationshipsGetParams() *SnapmirrorRelationshipsGetParams {
	return &SnapmirrorRelationshipsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSnapmirrorRelationshipsGetParamsWithTimeout creates a new SnapmirrorRelationshipsGetParams object
// with the ability to set a timeout on a request.
func NewSnapmirrorRelationshipsGetParamsWithTimeout(timeout time.Duration) *SnapmirrorRelationshipsGetParams {
	return &SnapmirrorRelationshipsGetParams{
		timeout: timeout,
	}
}

// NewSnapmirrorRelationshipsGetParamsWithContext creates a new SnapmirrorRelationshipsGetParams object
// with the ability to set a context for a request.
func NewSnapmirrorRelationshipsGetParamsWithContext(ctx context.Context) *SnapmirrorRelationshipsGetParams {
	return &SnapmirrorRelationshipsGetParams{
		Context: ctx,
	}
}

// NewSnapmirrorRelationshipsGetParamsWithHTTPClient creates a new SnapmirrorRelationshipsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSnapmirrorRelationshipsGetParamsWithHTTPClient(client *http.Client) *SnapmirrorRelationshipsGetParams {
	return &SnapmirrorRelationshipsGetParams{
		HTTPClient: client,
	}
}

/*
SnapmirrorRelationshipsGetParams contains all the parameters to send to the API endpoint

	for the snapmirror relationships get operation.

	Typically these are written to a http.Request.
*/
type SnapmirrorRelationshipsGetParams struct {

	/* ConsistencyGroupFailoverErrorArgumentsCode.

	   Filter by consistency_group_failover.error.arguments.code
	*/
	ConsistencyGroupFailoverErrorArgumentsCode *string

	/* ConsistencyGroupFailoverErrorArgumentsMessage.

	   Filter by consistency_group_failover.error.arguments.message
	*/
	ConsistencyGroupFailoverErrorArgumentsMessage *string

	/* ConsistencyGroupFailoverErrorCode.

	   Filter by consistency_group_failover.error.code
	*/
	ConsistencyGroupFailoverErrorCode *string

	/* ConsistencyGroupFailoverErrorMessage.

	   Filter by consistency_group_failover.error.message
	*/
	ConsistencyGroupFailoverErrorMessage *string

	/* ConsistencyGroupFailoverErrorTarget.

	   Filter by consistency_group_failover.error.target
	*/
	ConsistencyGroupFailoverErrorTarget *string

	/* ConsistencyGroupFailoverStatusCode.

	   Filter by consistency_group_failover.status.code
	*/
	ConsistencyGroupFailoverStatusCode *string

	/* ConsistencyGroupFailoverStatusMessage.

	   Filter by consistency_group_failover.status.message
	*/
	ConsistencyGroupFailoverStatusMessage *string

	/* DestinationClusterName.

	   Filter by destination.cluster.name
	*/
	DestinationClusterName *string

	/* DestinationClusterUUID.

	   Filter by destination.cluster.uuid
	*/
	DestinationClusterUUID *string

	/* DestinationConsistencyGroupVolumesName.

	   Filter by destination.consistency_group_volumes.name
	*/
	DestinationConsistencyGroupVolumesName *string

	/* DestinationPath.

	   Filter by destination.path
	*/
	DestinationPath *string

	/* DestinationSvmName.

	   Filter by destination.svm.name
	*/
	DestinationSvmName *string

	/* DestinationSvmUUID.

	   Filter by destination.svm.uuid
	*/
	DestinationSvmUUID *string

	/* DestinationUUID.

	   Filter by destination.uuid
	*/
	DestinationUUID *string

	/* ExportedSnapshot.

	   Filter by exported_snapshot
	*/
	ExportedSnapshot *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* GroupType.

	   Filter by group_type
	*/
	GroupType *string

	/* Healthy.

	   Filter by healthy
	*/
	Healthy *bool

	/* IdentityPreservation.

	   Filter by identity_preservation
	*/
	IdentityPreservation *string

	/* LagTime.

	   Filter by lag_time
	*/
	LagTime *string

	/* LastTransferType.

	   Filter by last_transfer_type
	*/
	LastTransferType *string

	/* ListDestinationsOnly.

	   Set to true to show relationships from the source only.
	*/
	ListDestinationsOnly *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* PolicyName.

	   Filter by policy.name
	*/
	PolicyName *string

	/* PolicyType.

	   Filter by policy.type
	*/
	PolicyType *string

	/* PolicyUUID.

	   Filter by policy.uuid
	*/
	PolicyUUID *string

	/* Restore.

	   Filter by restore
	*/
	Restore *bool

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SourceClusterName.

	   Filter by source.cluster.name
	*/
	SourceClusterName *string

	/* SourceClusterUUID.

	   Filter by source.cluster.uuid
	*/
	SourceClusterUUID *string

	/* SourceConsistencyGroupVolumesName.

	   Filter by source.consistency_group_volumes.name
	*/
	SourceConsistencyGroupVolumesName *string

	/* SourcePath.

	   Filter by source.path
	*/
	SourcePath *string

	/* SourceSvmName.

	   Filter by source.svm.name
	*/
	SourceSvmName *string

	/* SourceSvmUUID.

	   Filter by source.svm.uuid
	*/
	SourceSvmUUID *string

	/* SourceUUID.

	   Filter by source.uuid
	*/
	SourceUUID *string

	/* State.

	   Filter by state
	*/
	State *string

	/* Throttle.

	   Filter by throttle
	*/
	Throttle *int64

	/* TransferBytesTransferred.

	   Filter by transfer.bytes_transferred
	*/
	TransferBytesTransferred *int64

	/* TransferEndTime.

	   Filter by transfer.end_time
	*/
	TransferEndTime *string

	/* TransferState.

	   Filter by transfer.state
	*/
	TransferState *string

	/* TransferTotalDuration.

	   Filter by transfer.total_duration
	*/
	TransferTotalDuration *string

	/* TransferUUID.

	   Filter by transfer.uuid
	*/
	TransferUUID *string

	/* TransferScheduleName.

	   Filter by transfer_schedule.name
	*/
	TransferScheduleName *string

	/* TransferScheduleUUID.

	   Filter by transfer_schedule.uuid
	*/
	TransferScheduleUUID *string

	/* UnhealthyReasonCode.

	   Filter by unhealthy_reason.code
	*/
	UnhealthyReasonCode *int64

	/* UnhealthyReasonMessage.

	   Filter by unhealthy_reason.message
	*/
	UnhealthyReasonMessage *string

	/* UnhealthyReasonParameters.

	   Filter by unhealthy_reason.parameters
	*/
	UnhealthyReasonParameters *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the snapmirror relationships get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipsGetParams) WithDefaults() *SnapmirrorRelationshipsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the snapmirror relationships get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipsGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := SnapmirrorRelationshipsGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTimeout(timeout time.Duration) *SnapmirrorRelationshipsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithContext(ctx context.Context) *SnapmirrorRelationshipsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithHTTPClient(client *http.Client) *SnapmirrorRelationshipsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConsistencyGroupFailoverErrorArgumentsCode adds the consistencyGroupFailoverErrorArgumentsCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorArgumentsCode(consistencyGroupFailoverErrorArgumentsCode *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorArgumentsCode(consistencyGroupFailoverErrorArgumentsCode)
	return o
}

// SetConsistencyGroupFailoverErrorArgumentsCode adds the consistencyGroupFailoverErrorArgumentsCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorArgumentsCode(consistencyGroupFailoverErrorArgumentsCode *string) {
	o.ConsistencyGroupFailoverErrorArgumentsCode = consistencyGroupFailoverErrorArgumentsCode
}

// WithConsistencyGroupFailoverErrorArgumentsMessage adds the consistencyGroupFailoverErrorArgumentsMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorArgumentsMessage(consistencyGroupFailoverErrorArgumentsMessage *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorArgumentsMessage(consistencyGroupFailoverErrorArgumentsMessage)
	return o
}

// SetConsistencyGroupFailoverErrorArgumentsMessage adds the consistencyGroupFailoverErrorArgumentsMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorArgumentsMessage(consistencyGroupFailoverErrorArgumentsMessage *string) {
	o.ConsistencyGroupFailoverErrorArgumentsMessage = consistencyGroupFailoverErrorArgumentsMessage
}

// WithConsistencyGroupFailoverErrorCode adds the consistencyGroupFailoverErrorCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorCode(consistencyGroupFailoverErrorCode *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorCode(consistencyGroupFailoverErrorCode)
	return o
}

// SetConsistencyGroupFailoverErrorCode adds the consistencyGroupFailoverErrorCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorCode(consistencyGroupFailoverErrorCode *string) {
	o.ConsistencyGroupFailoverErrorCode = consistencyGroupFailoverErrorCode
}

// WithConsistencyGroupFailoverErrorMessage adds the consistencyGroupFailoverErrorMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorMessage(consistencyGroupFailoverErrorMessage *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorMessage(consistencyGroupFailoverErrorMessage)
	return o
}

// SetConsistencyGroupFailoverErrorMessage adds the consistencyGroupFailoverErrorMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorMessage(consistencyGroupFailoverErrorMessage *string) {
	o.ConsistencyGroupFailoverErrorMessage = consistencyGroupFailoverErrorMessage
}

// WithConsistencyGroupFailoverErrorTarget adds the consistencyGroupFailoverErrorTarget to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorTarget(consistencyGroupFailoverErrorTarget *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorTarget(consistencyGroupFailoverErrorTarget)
	return o
}

// SetConsistencyGroupFailoverErrorTarget adds the consistencyGroupFailoverErrorTarget to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorTarget(consistencyGroupFailoverErrorTarget *string) {
	o.ConsistencyGroupFailoverErrorTarget = consistencyGroupFailoverErrorTarget
}

// WithConsistencyGroupFailoverStatusCode adds the consistencyGroupFailoverStatusCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverStatusCode(consistencyGroupFailoverStatusCode *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverStatusCode(consistencyGroupFailoverStatusCode)
	return o
}

// SetConsistencyGroupFailoverStatusCode adds the consistencyGroupFailoverStatusCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverStatusCode(consistencyGroupFailoverStatusCode *string) {
	o.ConsistencyGroupFailoverStatusCode = consistencyGroupFailoverStatusCode
}

// WithConsistencyGroupFailoverStatusMessage adds the consistencyGroupFailoverStatusMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverStatusMessage(consistencyGroupFailoverStatusMessage *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverStatusMessage(consistencyGroupFailoverStatusMessage)
	return o
}

// SetConsistencyGroupFailoverStatusMessage adds the consistencyGroupFailoverStatusMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverStatusMessage(consistencyGroupFailoverStatusMessage *string) {
	o.ConsistencyGroupFailoverStatusMessage = consistencyGroupFailoverStatusMessage
}

// WithDestinationClusterName adds the destinationClusterName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationClusterName(destinationClusterName *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationClusterName(destinationClusterName)
	return o
}

// SetDestinationClusterName adds the destinationClusterName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationClusterName(destinationClusterName *string) {
	o.DestinationClusterName = destinationClusterName
}

// WithDestinationClusterUUID adds the destinationClusterUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationClusterUUID(destinationClusterUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationClusterUUID(destinationClusterUUID)
	return o
}

// SetDestinationClusterUUID adds the destinationClusterUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationClusterUUID(destinationClusterUUID *string) {
	o.DestinationClusterUUID = destinationClusterUUID
}

// WithDestinationConsistencyGroupVolumesName adds the destinationConsistencyGroupVolumesName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationConsistencyGroupVolumesName(destinationConsistencyGroupVolumesName *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationConsistencyGroupVolumesName(destinationConsistencyGroupVolumesName)
	return o
}

// SetDestinationConsistencyGroupVolumesName adds the destinationConsistencyGroupVolumesName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationConsistencyGroupVolumesName(destinationConsistencyGroupVolumesName *string) {
	o.DestinationConsistencyGroupVolumesName = destinationConsistencyGroupVolumesName
}

// WithDestinationPath adds the destinationPath to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationPath(destinationPath *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationPath(destinationPath)
	return o
}

// SetDestinationPath adds the destinationPath to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationPath(destinationPath *string) {
	o.DestinationPath = destinationPath
}

// WithDestinationSvmName adds the destinationSvmName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationSvmName(destinationSvmName *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationSvmName(destinationSvmName)
	return o
}

// SetDestinationSvmName adds the destinationSvmName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationSvmName(destinationSvmName *string) {
	o.DestinationSvmName = destinationSvmName
}

// WithDestinationSvmUUID adds the destinationSvmUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationSvmUUID(destinationSvmUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationSvmUUID(destinationSvmUUID)
	return o
}

// SetDestinationSvmUUID adds the destinationSvmUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationSvmUUID(destinationSvmUUID *string) {
	o.DestinationSvmUUID = destinationSvmUUID
}

// WithDestinationUUID adds the destinationUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationUUID(destinationUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationUUID(destinationUUID)
	return o
}

// SetDestinationUUID adds the destinationUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationUUID(destinationUUID *string) {
	o.DestinationUUID = destinationUUID
}

// WithExportedSnapshot adds the exportedSnapshot to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithExportedSnapshot(exportedSnapshot *string) *SnapmirrorRelationshipsGetParams {
	o.SetExportedSnapshot(exportedSnapshot)
	return o
}

// SetExportedSnapshot adds the exportedSnapshot to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetExportedSnapshot(exportedSnapshot *string) {
	o.ExportedSnapshot = exportedSnapshot
}

// WithFields adds the fields to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFields(fields []string) *SnapmirrorRelationshipsGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithGroupType adds the groupType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithGroupType(groupType *string) *SnapmirrorRelationshipsGetParams {
	o.SetGroupType(groupType)
	return o
}

// SetGroupType adds the groupType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetGroupType(groupType *string) {
	o.GroupType = groupType
}

// WithHealthy adds the healthy to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithHealthy(healthy *bool) *SnapmirrorRelationshipsGetParams {
	o.SetHealthy(healthy)
	return o
}

// SetHealthy adds the healthy to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetHealthy(healthy *bool) {
	o.Healthy = healthy
}

// WithIdentityPreservation adds the identityPreservation to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithIdentityPreservation(identityPreservation *string) *SnapmirrorRelationshipsGetParams {
	o.SetIdentityPreservation(identityPreservation)
	return o
}

// SetIdentityPreservation adds the identityPreservation to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetIdentityPreservation(identityPreservation *string) {
	o.IdentityPreservation = identityPreservation
}

// WithLagTime adds the lagTime to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithLagTime(lagTime *string) *SnapmirrorRelationshipsGetParams {
	o.SetLagTime(lagTime)
	return o
}

// SetLagTime adds the lagTime to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetLagTime(lagTime *string) {
	o.LagTime = lagTime
}

// WithLastTransferType adds the lastTransferType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithLastTransferType(lastTransferType *string) *SnapmirrorRelationshipsGetParams {
	o.SetLastTransferType(lastTransferType)
	return o
}

// SetLastTransferType adds the lastTransferType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetLastTransferType(lastTransferType *string) {
	o.LastTransferType = lastTransferType
}

// WithListDestinationsOnly adds the listDestinationsOnly to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithListDestinationsOnly(listDestinationsOnly *bool) *SnapmirrorRelationshipsGetParams {
	o.SetListDestinationsOnly(listDestinationsOnly)
	return o
}

// SetListDestinationsOnly adds the listDestinationsOnly to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetListDestinationsOnly(listDestinationsOnly *bool) {
	o.ListDestinationsOnly = listDestinationsOnly
}

// WithMaxRecords adds the maxRecords to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithMaxRecords(maxRecords *int64) *SnapmirrorRelationshipsGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithOrderBy adds the orderBy to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithOrderBy(orderBy []string) *SnapmirrorRelationshipsGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPolicyName adds the policyName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithPolicyName(policyName *string) *SnapmirrorRelationshipsGetParams {
	o.SetPolicyName(policyName)
	return o
}

// SetPolicyName adds the policyName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetPolicyName(policyName *string) {
	o.PolicyName = policyName
}

// WithPolicyType adds the policyType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithPolicyType(policyType *string) *SnapmirrorRelationshipsGetParams {
	o.SetPolicyType(policyType)
	return o
}

// SetPolicyType adds the policyType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetPolicyType(policyType *string) {
	o.PolicyType = policyType
}

// WithPolicyUUID adds the policyUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithPolicyUUID(policyUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetPolicyUUID(policyUUID)
	return o
}

// SetPolicyUUID adds the policyUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetPolicyUUID(policyUUID *string) {
	o.PolicyUUID = policyUUID
}

// WithRestore adds the restore to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithRestore(restore *bool) *SnapmirrorRelationshipsGetParams {
	o.SetRestore(restore)
	return o
}

// SetRestore adds the restore to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetRestore(restore *bool) {
	o.Restore = restore
}

// WithReturnRecords adds the returnRecords to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithReturnRecords(returnRecords *bool) *SnapmirrorRelationshipsGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithReturnTimeout(returnTimeout *int64) *SnapmirrorRelationshipsGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSourceClusterName adds the sourceClusterName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceClusterName(sourceClusterName *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceClusterName(sourceClusterName)
	return o
}

// SetSourceClusterName adds the sourceClusterName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceClusterName(sourceClusterName *string) {
	o.SourceClusterName = sourceClusterName
}

// WithSourceClusterUUID adds the sourceClusterUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceClusterUUID(sourceClusterUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceClusterUUID(sourceClusterUUID)
	return o
}

// SetSourceClusterUUID adds the sourceClusterUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceClusterUUID(sourceClusterUUID *string) {
	o.SourceClusterUUID = sourceClusterUUID
}

// WithSourceConsistencyGroupVolumesName adds the sourceConsistencyGroupVolumesName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceConsistencyGroupVolumesName(sourceConsistencyGroupVolumesName *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceConsistencyGroupVolumesName(sourceConsistencyGroupVolumesName)
	return o
}

// SetSourceConsistencyGroupVolumesName adds the sourceConsistencyGroupVolumesName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceConsistencyGroupVolumesName(sourceConsistencyGroupVolumesName *string) {
	o.SourceConsistencyGroupVolumesName = sourceConsistencyGroupVolumesName
}

// WithSourcePath adds the sourcePath to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourcePath(sourcePath *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourcePath(sourcePath)
	return o
}

// SetSourcePath adds the sourcePath to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourcePath(sourcePath *string) {
	o.SourcePath = sourcePath
}

// WithSourceSvmName adds the sourceSvmName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceSvmName(sourceSvmName *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceSvmName(sourceSvmName)
	return o
}

// SetSourceSvmName adds the sourceSvmName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceSvmName(sourceSvmName *string) {
	o.SourceSvmName = sourceSvmName
}

// WithSourceSvmUUID adds the sourceSvmUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceSvmUUID(sourceSvmUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceSvmUUID(sourceSvmUUID)
	return o
}

// SetSourceSvmUUID adds the sourceSvmUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceSvmUUID(sourceSvmUUID *string) {
	o.SourceSvmUUID = sourceSvmUUID
}

// WithSourceUUID adds the sourceUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceUUID(sourceUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceUUID(sourceUUID)
	return o
}

// SetSourceUUID adds the sourceUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceUUID(sourceUUID *string) {
	o.SourceUUID = sourceUUID
}

// WithState adds the state to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithState(state *string) *SnapmirrorRelationshipsGetParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetState(state *string) {
	o.State = state
}

// WithThrottle adds the throttle to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithThrottle(throttle *int64) *SnapmirrorRelationshipsGetParams {
	o.SetThrottle(throttle)
	return o
}

// SetThrottle adds the throttle to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetThrottle(throttle *int64) {
	o.Throttle = throttle
}

// WithTransferBytesTransferred adds the transferBytesTransferred to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferBytesTransferred(transferBytesTransferred *int64) *SnapmirrorRelationshipsGetParams {
	o.SetTransferBytesTransferred(transferBytesTransferred)
	return o
}

// SetTransferBytesTransferred adds the transferBytesTransferred to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferBytesTransferred(transferBytesTransferred *int64) {
	o.TransferBytesTransferred = transferBytesTransferred
}

// WithTransferEndTime adds the transferEndTime to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferEndTime(transferEndTime *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferEndTime(transferEndTime)
	return o
}

// SetTransferEndTime adds the transferEndTime to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferEndTime(transferEndTime *string) {
	o.TransferEndTime = transferEndTime
}

// WithTransferState adds the transferState to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferState(transferState *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferState(transferState)
	return o
}

// SetTransferState adds the transferState to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferState(transferState *string) {
	o.TransferState = transferState
}

// WithTransferTotalDuration adds the transferTotalDuration to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferTotalDuration(transferTotalDuration *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferTotalDuration(transferTotalDuration)
	return o
}

// SetTransferTotalDuration adds the transferTotalDuration to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferTotalDuration(transferTotalDuration *string) {
	o.TransferTotalDuration = transferTotalDuration
}

// WithTransferUUID adds the transferUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferUUID(transferUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferUUID(transferUUID)
	return o
}

// SetTransferUUID adds the transferUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferUUID(transferUUID *string) {
	o.TransferUUID = transferUUID
}

// WithTransferScheduleName adds the transferScheduleName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferScheduleName(transferScheduleName *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferScheduleName(transferScheduleName)
	return o
}

// SetTransferScheduleName adds the transferScheduleName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferScheduleName(transferScheduleName *string) {
	o.TransferScheduleName = transferScheduleName
}

// WithTransferScheduleUUID adds the transferScheduleUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferScheduleUUID(transferScheduleUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferScheduleUUID(transferScheduleUUID)
	return o
}

// SetTransferScheduleUUID adds the transferScheduleUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferScheduleUUID(transferScheduleUUID *string) {
	o.TransferScheduleUUID = transferScheduleUUID
}

// WithUnhealthyReasonCode adds the unhealthyReasonCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithUnhealthyReasonCode(unhealthyReasonCode *int64) *SnapmirrorRelationshipsGetParams {
	o.SetUnhealthyReasonCode(unhealthyReasonCode)
	return o
}

// SetUnhealthyReasonCode adds the unhealthyReasonCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetUnhealthyReasonCode(unhealthyReasonCode *int64) {
	o.UnhealthyReasonCode = unhealthyReasonCode
}

// WithUnhealthyReasonMessage adds the unhealthyReasonMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithUnhealthyReasonMessage(unhealthyReasonMessage *string) *SnapmirrorRelationshipsGetParams {
	o.SetUnhealthyReasonMessage(unhealthyReasonMessage)
	return o
}

// SetUnhealthyReasonMessage adds the unhealthyReasonMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetUnhealthyReasonMessage(unhealthyReasonMessage *string) {
	o.UnhealthyReasonMessage = unhealthyReasonMessage
}

// WithUnhealthyReasonParameters adds the unhealthyReasonParameters to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithUnhealthyReasonParameters(unhealthyReasonParameters *string) *SnapmirrorRelationshipsGetParams {
	o.SetUnhealthyReasonParameters(unhealthyReasonParameters)
	return o
}

// SetUnhealthyReasonParameters adds the unhealthyReasonParameters to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetUnhealthyReasonParameters(unhealthyReasonParameters *string) {
	o.UnhealthyReasonParameters = unhealthyReasonParameters
}

// WithUUID adds the uuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithUUID(uuid *string) *SnapmirrorRelationshipsGetParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *SnapmirrorRelationshipsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConsistencyGroupFailoverErrorArgumentsCode != nil {

		// query param consistency_group_failover.error.arguments.code
		var qrConsistencyGroupFailoverErrorArgumentsCode string

		if o.ConsistencyGroupFailoverErrorArgumentsCode != nil {
			qrConsistencyGroupFailoverErrorArgumentsCode = *o.ConsistencyGroupFailoverErrorArgumentsCode
		}
		qConsistencyGroupFailoverErrorArgumentsCode := qrConsistencyGroupFailoverErrorArgumentsCode
		if qConsistencyGroupFailoverErrorArgumentsCode != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.arguments.code", qConsistencyGroupFailoverErrorArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverErrorArgumentsMessage != nil {

		// query param consistency_group_failover.error.arguments.message
		var qrConsistencyGroupFailoverErrorArgumentsMessage string

		if o.ConsistencyGroupFailoverErrorArgumentsMessage != nil {
			qrConsistencyGroupFailoverErrorArgumentsMessage = *o.ConsistencyGroupFailoverErrorArgumentsMessage
		}
		qConsistencyGroupFailoverErrorArgumentsMessage := qrConsistencyGroupFailoverErrorArgumentsMessage
		if qConsistencyGroupFailoverErrorArgumentsMessage != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.arguments.message", qConsistencyGroupFailoverErrorArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverErrorCode != nil {

		// query param consistency_group_failover.error.code
		var qrConsistencyGroupFailoverErrorCode string

		if o.ConsistencyGroupFailoverErrorCode != nil {
			qrConsistencyGroupFailoverErrorCode = *o.ConsistencyGroupFailoverErrorCode
		}
		qConsistencyGroupFailoverErrorCode := qrConsistencyGroupFailoverErrorCode
		if qConsistencyGroupFailoverErrorCode != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.code", qConsistencyGroupFailoverErrorCode); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverErrorMessage != nil {

		// query param consistency_group_failover.error.message
		var qrConsistencyGroupFailoverErrorMessage string

		if o.ConsistencyGroupFailoverErrorMessage != nil {
			qrConsistencyGroupFailoverErrorMessage = *o.ConsistencyGroupFailoverErrorMessage
		}
		qConsistencyGroupFailoverErrorMessage := qrConsistencyGroupFailoverErrorMessage
		if qConsistencyGroupFailoverErrorMessage != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.message", qConsistencyGroupFailoverErrorMessage); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverErrorTarget != nil {

		// query param consistency_group_failover.error.target
		var qrConsistencyGroupFailoverErrorTarget string

		if o.ConsistencyGroupFailoverErrorTarget != nil {
			qrConsistencyGroupFailoverErrorTarget = *o.ConsistencyGroupFailoverErrorTarget
		}
		qConsistencyGroupFailoverErrorTarget := qrConsistencyGroupFailoverErrorTarget
		if qConsistencyGroupFailoverErrorTarget != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.target", qConsistencyGroupFailoverErrorTarget); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverStatusCode != nil {

		// query param consistency_group_failover.status.code
		var qrConsistencyGroupFailoverStatusCode string

		if o.ConsistencyGroupFailoverStatusCode != nil {
			qrConsistencyGroupFailoverStatusCode = *o.ConsistencyGroupFailoverStatusCode
		}
		qConsistencyGroupFailoverStatusCode := qrConsistencyGroupFailoverStatusCode
		if qConsistencyGroupFailoverStatusCode != "" {

			if err := r.SetQueryParam("consistency_group_failover.status.code", qConsistencyGroupFailoverStatusCode); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverStatusMessage != nil {

		// query param consistency_group_failover.status.message
		var qrConsistencyGroupFailoverStatusMessage string

		if o.ConsistencyGroupFailoverStatusMessage != nil {
			qrConsistencyGroupFailoverStatusMessage = *o.ConsistencyGroupFailoverStatusMessage
		}
		qConsistencyGroupFailoverStatusMessage := qrConsistencyGroupFailoverStatusMessage
		if qConsistencyGroupFailoverStatusMessage != "" {

			if err := r.SetQueryParam("consistency_group_failover.status.message", qConsistencyGroupFailoverStatusMessage); err != nil {
				return err
			}
		}
	}

	if o.DestinationClusterName != nil {

		// query param destination.cluster.name
		var qrDestinationClusterName string

		if o.DestinationClusterName != nil {
			qrDestinationClusterName = *o.DestinationClusterName
		}
		qDestinationClusterName := qrDestinationClusterName
		if qDestinationClusterName != "" {

			if err := r.SetQueryParam("destination.cluster.name", qDestinationClusterName); err != nil {
				return err
			}
		}
	}

	if o.DestinationClusterUUID != nil {

		// query param destination.cluster.uuid
		var qrDestinationClusterUUID string

		if o.DestinationClusterUUID != nil {
			qrDestinationClusterUUID = *o.DestinationClusterUUID
		}
		qDestinationClusterUUID := qrDestinationClusterUUID
		if qDestinationClusterUUID != "" {

			if err := r.SetQueryParam("destination.cluster.uuid", qDestinationClusterUUID); err != nil {
				return err
			}
		}
	}

	if o.DestinationConsistencyGroupVolumesName != nil {

		// query param destination.consistency_group_volumes.name
		var qrDestinationConsistencyGroupVolumesName string

		if o.DestinationConsistencyGroupVolumesName != nil {
			qrDestinationConsistencyGroupVolumesName = *o.DestinationConsistencyGroupVolumesName
		}
		qDestinationConsistencyGroupVolumesName := qrDestinationConsistencyGroupVolumesName
		if qDestinationConsistencyGroupVolumesName != "" {

			if err := r.SetQueryParam("destination.consistency_group_volumes.name", qDestinationConsistencyGroupVolumesName); err != nil {
				return err
			}
		}
	}

	if o.DestinationPath != nil {

		// query param destination.path
		var qrDestinationPath string

		if o.DestinationPath != nil {
			qrDestinationPath = *o.DestinationPath
		}
		qDestinationPath := qrDestinationPath
		if qDestinationPath != "" {

			if err := r.SetQueryParam("destination.path", qDestinationPath); err != nil {
				return err
			}
		}
	}

	if o.DestinationSvmName != nil {

		// query param destination.svm.name
		var qrDestinationSvmName string

		if o.DestinationSvmName != nil {
			qrDestinationSvmName = *o.DestinationSvmName
		}
		qDestinationSvmName := qrDestinationSvmName
		if qDestinationSvmName != "" {

			if err := r.SetQueryParam("destination.svm.name", qDestinationSvmName); err != nil {
				return err
			}
		}
	}

	if o.DestinationSvmUUID != nil {

		// query param destination.svm.uuid
		var qrDestinationSvmUUID string

		if o.DestinationSvmUUID != nil {
			qrDestinationSvmUUID = *o.DestinationSvmUUID
		}
		qDestinationSvmUUID := qrDestinationSvmUUID
		if qDestinationSvmUUID != "" {

			if err := r.SetQueryParam("destination.svm.uuid", qDestinationSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.DestinationUUID != nil {

		// query param destination.uuid
		var qrDestinationUUID string

		if o.DestinationUUID != nil {
			qrDestinationUUID = *o.DestinationUUID
		}
		qDestinationUUID := qrDestinationUUID
		if qDestinationUUID != "" {

			if err := r.SetQueryParam("destination.uuid", qDestinationUUID); err != nil {
				return err
			}
		}
	}

	if o.ExportedSnapshot != nil {

		// query param exported_snapshot
		var qrExportedSnapshot string

		if o.ExportedSnapshot != nil {
			qrExportedSnapshot = *o.ExportedSnapshot
		}
		qExportedSnapshot := qrExportedSnapshot
		if qExportedSnapshot != "" {

			if err := r.SetQueryParam("exported_snapshot", qExportedSnapshot); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.GroupType != nil {

		// query param group_type
		var qrGroupType string

		if o.GroupType != nil {
			qrGroupType = *o.GroupType
		}
		qGroupType := qrGroupType
		if qGroupType != "" {

			if err := r.SetQueryParam("group_type", qGroupType); err != nil {
				return err
			}
		}
	}

	if o.Healthy != nil {

		// query param healthy
		var qrHealthy bool

		if o.Healthy != nil {
			qrHealthy = *o.Healthy
		}
		qHealthy := swag.FormatBool(qrHealthy)
		if qHealthy != "" {

			if err := r.SetQueryParam("healthy", qHealthy); err != nil {
				return err
			}
		}
	}

	if o.IdentityPreservation != nil {

		// query param identity_preservation
		var qrIdentityPreservation string

		if o.IdentityPreservation != nil {
			qrIdentityPreservation = *o.IdentityPreservation
		}
		qIdentityPreservation := qrIdentityPreservation
		if qIdentityPreservation != "" {

			if err := r.SetQueryParam("identity_preservation", qIdentityPreservation); err != nil {
				return err
			}
		}
	}

	if o.LagTime != nil {

		// query param lag_time
		var qrLagTime string

		if o.LagTime != nil {
			qrLagTime = *o.LagTime
		}
		qLagTime := qrLagTime
		if qLagTime != "" {

			if err := r.SetQueryParam("lag_time", qLagTime); err != nil {
				return err
			}
		}
	}

	if o.LastTransferType != nil {

		// query param last_transfer_type
		var qrLastTransferType string

		if o.LastTransferType != nil {
			qrLastTransferType = *o.LastTransferType
		}
		qLastTransferType := qrLastTransferType
		if qLastTransferType != "" {

			if err := r.SetQueryParam("last_transfer_type", qLastTransferType); err != nil {
				return err
			}
		}
	}

	if o.ListDestinationsOnly != nil {

		// query param list_destinations_only
		var qrListDestinationsOnly bool

		if o.ListDestinationsOnly != nil {
			qrListDestinationsOnly = *o.ListDestinationsOnly
		}
		qListDestinationsOnly := swag.FormatBool(qrListDestinationsOnly)
		if qListDestinationsOnly != "" {

			if err := r.SetQueryParam("list_destinations_only", qListDestinationsOnly); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PolicyName != nil {

		// query param policy.name
		var qrPolicyName string

		if o.PolicyName != nil {
			qrPolicyName = *o.PolicyName
		}
		qPolicyName := qrPolicyName
		if qPolicyName != "" {

			if err := r.SetQueryParam("policy.name", qPolicyName); err != nil {
				return err
			}
		}
	}

	if o.PolicyType != nil {

		// query param policy.type
		var qrPolicyType string

		if o.PolicyType != nil {
			qrPolicyType = *o.PolicyType
		}
		qPolicyType := qrPolicyType
		if qPolicyType != "" {

			if err := r.SetQueryParam("policy.type", qPolicyType); err != nil {
				return err
			}
		}
	}

	if o.PolicyUUID != nil {

		// query param policy.uuid
		var qrPolicyUUID string

		if o.PolicyUUID != nil {
			qrPolicyUUID = *o.PolicyUUID
		}
		qPolicyUUID := qrPolicyUUID
		if qPolicyUUID != "" {

			if err := r.SetQueryParam("policy.uuid", qPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.Restore != nil {

		// query param restore
		var qrRestore bool

		if o.Restore != nil {
			qrRestore = *o.Restore
		}
		qRestore := swag.FormatBool(qrRestore)
		if qRestore != "" {

			if err := r.SetQueryParam("restore", qRestore); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SourceClusterName != nil {

		// query param source.cluster.name
		var qrSourceClusterName string

		if o.SourceClusterName != nil {
			qrSourceClusterName = *o.SourceClusterName
		}
		qSourceClusterName := qrSourceClusterName
		if qSourceClusterName != "" {

			if err := r.SetQueryParam("source.cluster.name", qSourceClusterName); err != nil {
				return err
			}
		}
	}

	if o.SourceClusterUUID != nil {

		// query param source.cluster.uuid
		var qrSourceClusterUUID string

		if o.SourceClusterUUID != nil {
			qrSourceClusterUUID = *o.SourceClusterUUID
		}
		qSourceClusterUUID := qrSourceClusterUUID
		if qSourceClusterUUID != "" {

			if err := r.SetQueryParam("source.cluster.uuid", qSourceClusterUUID); err != nil {
				return err
			}
		}
	}

	if o.SourceConsistencyGroupVolumesName != nil {

		// query param source.consistency_group_volumes.name
		var qrSourceConsistencyGroupVolumesName string

		if o.SourceConsistencyGroupVolumesName != nil {
			qrSourceConsistencyGroupVolumesName = *o.SourceConsistencyGroupVolumesName
		}
		qSourceConsistencyGroupVolumesName := qrSourceConsistencyGroupVolumesName
		if qSourceConsistencyGroupVolumesName != "" {

			if err := r.SetQueryParam("source.consistency_group_volumes.name", qSourceConsistencyGroupVolumesName); err != nil {
				return err
			}
		}
	}

	if o.SourcePath != nil {

		// query param source.path
		var qrSourcePath string

		if o.SourcePath != nil {
			qrSourcePath = *o.SourcePath
		}
		qSourcePath := qrSourcePath
		if qSourcePath != "" {

			if err := r.SetQueryParam("source.path", qSourcePath); err != nil {
				return err
			}
		}
	}

	if o.SourceSvmName != nil {

		// query param source.svm.name
		var qrSourceSvmName string

		if o.SourceSvmName != nil {
			qrSourceSvmName = *o.SourceSvmName
		}
		qSourceSvmName := qrSourceSvmName
		if qSourceSvmName != "" {

			if err := r.SetQueryParam("source.svm.name", qSourceSvmName); err != nil {
				return err
			}
		}
	}

	if o.SourceSvmUUID != nil {

		// query param source.svm.uuid
		var qrSourceSvmUUID string

		if o.SourceSvmUUID != nil {
			qrSourceSvmUUID = *o.SourceSvmUUID
		}
		qSourceSvmUUID := qrSourceSvmUUID
		if qSourceSvmUUID != "" {

			if err := r.SetQueryParam("source.svm.uuid", qSourceSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.SourceUUID != nil {

		// query param source.uuid
		var qrSourceUUID string

		if o.SourceUUID != nil {
			qrSourceUUID = *o.SourceUUID
		}
		qSourceUUID := qrSourceUUID
		if qSourceUUID != "" {

			if err := r.SetQueryParam("source.uuid", qSourceUUID); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Throttle != nil {

		// query param throttle
		var qrThrottle int64

		if o.Throttle != nil {
			qrThrottle = *o.Throttle
		}
		qThrottle := swag.FormatInt64(qrThrottle)
		if qThrottle != "" {

			if err := r.SetQueryParam("throttle", qThrottle); err != nil {
				return err
			}
		}
	}

	if o.TransferBytesTransferred != nil {

		// query param transfer.bytes_transferred
		var qrTransferBytesTransferred int64

		if o.TransferBytesTransferred != nil {
			qrTransferBytesTransferred = *o.TransferBytesTransferred
		}
		qTransferBytesTransferred := swag.FormatInt64(qrTransferBytesTransferred)
		if qTransferBytesTransferred != "" {

			if err := r.SetQueryParam("transfer.bytes_transferred", qTransferBytesTransferred); err != nil {
				return err
			}
		}
	}

	if o.TransferEndTime != nil {

		// query param transfer.end_time
		var qrTransferEndTime string

		if o.TransferEndTime != nil {
			qrTransferEndTime = *o.TransferEndTime
		}
		qTransferEndTime := qrTransferEndTime
		if qTransferEndTime != "" {

			if err := r.SetQueryParam("transfer.end_time", qTransferEndTime); err != nil {
				return err
			}
		}
	}

	if o.TransferState != nil {

		// query param transfer.state
		var qrTransferState string

		if o.TransferState != nil {
			qrTransferState = *o.TransferState
		}
		qTransferState := qrTransferState
		if qTransferState != "" {

			if err := r.SetQueryParam("transfer.state", qTransferState); err != nil {
				return err
			}
		}
	}

	if o.TransferTotalDuration != nil {

		// query param transfer.total_duration
		var qrTransferTotalDuration string

		if o.TransferTotalDuration != nil {
			qrTransferTotalDuration = *o.TransferTotalDuration
		}
		qTransferTotalDuration := qrTransferTotalDuration
		if qTransferTotalDuration != "" {

			if err := r.SetQueryParam("transfer.total_duration", qTransferTotalDuration); err != nil {
				return err
			}
		}
	}

	if o.TransferUUID != nil {

		// query param transfer.uuid
		var qrTransferUUID string

		if o.TransferUUID != nil {
			qrTransferUUID = *o.TransferUUID
		}
		qTransferUUID := qrTransferUUID
		if qTransferUUID != "" {

			if err := r.SetQueryParam("transfer.uuid", qTransferUUID); err != nil {
				return err
			}
		}
	}

	if o.TransferScheduleName != nil {

		// query param transfer_schedule.name
		var qrTransferScheduleName string

		if o.TransferScheduleName != nil {
			qrTransferScheduleName = *o.TransferScheduleName
		}
		qTransferScheduleName := qrTransferScheduleName
		if qTransferScheduleName != "" {

			if err := r.SetQueryParam("transfer_schedule.name", qTransferScheduleName); err != nil {
				return err
			}
		}
	}

	if o.TransferScheduleUUID != nil {

		// query param transfer_schedule.uuid
		var qrTransferScheduleUUID string

		if o.TransferScheduleUUID != nil {
			qrTransferScheduleUUID = *o.TransferScheduleUUID
		}
		qTransferScheduleUUID := qrTransferScheduleUUID
		if qTransferScheduleUUID != "" {

			if err := r.SetQueryParam("transfer_schedule.uuid", qTransferScheduleUUID); err != nil {
				return err
			}
		}
	}

	if o.UnhealthyReasonCode != nil {

		// query param unhealthy_reason.code
		var qrUnhealthyReasonCode int64

		if o.UnhealthyReasonCode != nil {
			qrUnhealthyReasonCode = *o.UnhealthyReasonCode
		}
		qUnhealthyReasonCode := swag.FormatInt64(qrUnhealthyReasonCode)
		if qUnhealthyReasonCode != "" {

			if err := r.SetQueryParam("unhealthy_reason.code", qUnhealthyReasonCode); err != nil {
				return err
			}
		}
	}

	if o.UnhealthyReasonMessage != nil {

		// query param unhealthy_reason.message
		var qrUnhealthyReasonMessage string

		if o.UnhealthyReasonMessage != nil {
			qrUnhealthyReasonMessage = *o.UnhealthyReasonMessage
		}
		qUnhealthyReasonMessage := qrUnhealthyReasonMessage
		if qUnhealthyReasonMessage != "" {

			if err := r.SetQueryParam("unhealthy_reason.message", qUnhealthyReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.UnhealthyReasonParameters != nil {

		// query param unhealthy_reason.parameters
		var qrUnhealthyReasonParameters string

		if o.UnhealthyReasonParameters != nil {
			qrUnhealthyReasonParameters = *o.UnhealthyReasonParameters
		}
		qUnhealthyReasonParameters := qrUnhealthyReasonParameters
		if qUnhealthyReasonParameters != "" {

			if err := r.SetQueryParam("unhealthy_reason.parameters", qUnhealthyReasonParameters); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSnapmirrorRelationshipsGet binds the parameter fields
func (o *SnapmirrorRelationshipsGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSnapmirrorRelationshipsGet binds the parameter order_by
func (o *SnapmirrorRelationshipsGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
