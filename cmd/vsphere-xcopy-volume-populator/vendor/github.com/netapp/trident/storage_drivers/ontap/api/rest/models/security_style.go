// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecurityStyle Security style. Valid in POST or PATCH.
//
// swagger:model security_style
type SecurityStyle string

func NewSecurityStyle(value SecurityStyle) *SecurityStyle {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecurityStyle.
func (m SecurityStyle) Pointer() *SecurityStyle {
	return &m
}

const (

	// SecurityStyleUnix captures enum value "unix"
	SecurityStyleUnix SecurityStyle = "unix"

	// SecurityStyleNtfs captures enum value "ntfs"
	SecurityStyleNtfs SecurityStyle = "ntfs"

	// SecurityStyleMixed captures enum value "mixed"
	SecurityStyleMixed SecurityStyle = "mixed"
)

// for schema
var securityStyleEnum []interface{}

func init() {
	var res []SecurityStyle
	if err := json.Unmarshal([]byte(`["unix","ntfs","mixed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityStyleEnum = append(securityStyleEnum, v)
	}
}

func (m SecurityStyle) validateSecurityStyleEnum(path, location string, value SecurityStyle) error {
	if err := validate.EnumCase(path, location, value, securityStyleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this security style
func (m SecurityStyle) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecurityStyleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this security style based on context it is used
func (m SecurityStyle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
