// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMetroclusterOperationCollectionGetParams creates a new MetroclusterOperationCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMetroclusterOperationCollectionGetParams() *MetroclusterOperationCollectionGetParams {
	return &MetroclusterOperationCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMetroclusterOperationCollectionGetParamsWithTimeout creates a new MetroclusterOperationCollectionGetParams object
// with the ability to set a timeout on a request.
func NewMetroclusterOperationCollectionGetParamsWithTimeout(timeout time.Duration) *MetroclusterOperationCollectionGetParams {
	return &MetroclusterOperationCollectionGetParams{
		timeout: timeout,
	}
}

// NewMetroclusterOperationCollectionGetParamsWithContext creates a new MetroclusterOperationCollectionGetParams object
// with the ability to set a context for a request.
func NewMetroclusterOperationCollectionGetParamsWithContext(ctx context.Context) *MetroclusterOperationCollectionGetParams {
	return &MetroclusterOperationCollectionGetParams{
		Context: ctx,
	}
}

// NewMetroclusterOperationCollectionGetParamsWithHTTPClient creates a new MetroclusterOperationCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewMetroclusterOperationCollectionGetParamsWithHTTPClient(client *http.Client) *MetroclusterOperationCollectionGetParams {
	return &MetroclusterOperationCollectionGetParams{
		HTTPClient: client,
	}
}

/*
MetroclusterOperationCollectionGetParams contains all the parameters to send to the API endpoint

	for the metrocluster operation collection get operation.

	Typically these are written to a http.Request.
*/
type MetroclusterOperationCollectionGetParams struct {

	/* AdditionalInfo.

	   Filter by additional_info
	*/
	AdditionalInfo *string

	/* CommandLine.

	   Filter by command_line
	*/
	CommandLine *string

	/* EndTime.

	   Filter by end_time
	*/
	EndTime *string

	/* Errors.

	   Filter by errors
	*/
	Errors *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeName *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUID *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* StartTime.

	   Filter by start_time
	*/
	StartTime *string

	/* State.

	   Filter by state
	*/
	State *string

	/* Type.

	   Filter by type
	*/
	Type *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the metrocluster operation collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MetroclusterOperationCollectionGetParams) WithDefaults() *MetroclusterOperationCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the metrocluster operation collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MetroclusterOperationCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := MetroclusterOperationCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithTimeout(timeout time.Duration) *MetroclusterOperationCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithContext(ctx context.Context) *MetroclusterOperationCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithHTTPClient(client *http.Client) *MetroclusterOperationCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAdditionalInfo adds the additionalInfo to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithAdditionalInfo(additionalInfo *string) *MetroclusterOperationCollectionGetParams {
	o.SetAdditionalInfo(additionalInfo)
	return o
}

// SetAdditionalInfo adds the additionalInfo to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetAdditionalInfo(additionalInfo *string) {
	o.AdditionalInfo = additionalInfo
}

// WithCommandLine adds the commandLine to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithCommandLine(commandLine *string) *MetroclusterOperationCollectionGetParams {
	o.SetCommandLine(commandLine)
	return o
}

// SetCommandLine adds the commandLine to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetCommandLine(commandLine *string) {
	o.CommandLine = commandLine
}

// WithEndTime adds the endTime to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithEndTime(endTime *string) *MetroclusterOperationCollectionGetParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithErrors adds the errors to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithErrors(errors *string) *MetroclusterOperationCollectionGetParams {
	o.SetErrors(errors)
	return o
}

// SetErrors adds the errors to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetErrors(errors *string) {
	o.Errors = errors
}

// WithFields adds the fields to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithFields(fields []string) *MetroclusterOperationCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithMaxRecords adds the maxRecords to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithMaxRecords(maxRecords *int64) *MetroclusterOperationCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNodeName adds the nodeName to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithNodeName(nodeName *string) *MetroclusterOperationCollectionGetParams {
	o.SetNodeName(nodeName)
	return o
}

// SetNodeName adds the nodeName to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetNodeName(nodeName *string) {
	o.NodeName = nodeName
}

// WithNodeUUID adds the nodeUUID to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithNodeUUID(nodeUUID *string) *MetroclusterOperationCollectionGetParams {
	o.SetNodeUUID(nodeUUID)
	return o
}

// SetNodeUUID adds the nodeUuid to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetNodeUUID(nodeUUID *string) {
	o.NodeUUID = nodeUUID
}

// WithOrderBy adds the orderBy to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithOrderBy(orderBy []string) *MetroclusterOperationCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithReturnRecords(returnRecords *bool) *MetroclusterOperationCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *MetroclusterOperationCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithStartTime adds the startTime to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithStartTime(startTime *string) *MetroclusterOperationCollectionGetParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WithState adds the state to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithState(state *string) *MetroclusterOperationCollectionGetParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetState(state *string) {
	o.State = state
}

// WithType adds the typeVar to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithType(typeVar *string) *MetroclusterOperationCollectionGetParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUUID adds the uuid to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) WithUUID(uuid *string) *MetroclusterOperationCollectionGetParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the metrocluster operation collection get params
func (o *MetroclusterOperationCollectionGetParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *MetroclusterOperationCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AdditionalInfo != nil {

		// query param additional_info
		var qrAdditionalInfo string

		if o.AdditionalInfo != nil {
			qrAdditionalInfo = *o.AdditionalInfo
		}
		qAdditionalInfo := qrAdditionalInfo
		if qAdditionalInfo != "" {

			if err := r.SetQueryParam("additional_info", qAdditionalInfo); err != nil {
				return err
			}
		}
	}

	if o.CommandLine != nil {

		// query param command_line
		var qrCommandLine string

		if o.CommandLine != nil {
			qrCommandLine = *o.CommandLine
		}
		qCommandLine := qrCommandLine
		if qCommandLine != "" {

			if err := r.SetQueryParam("command_line", qCommandLine); err != nil {
				return err
			}
		}
	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Errors != nil {

		// query param errors
		var qrErrors string

		if o.Errors != nil {
			qrErrors = *o.Errors
		}
		qErrors := qrErrors
		if qErrors != "" {

			if err := r.SetQueryParam("errors", qErrors); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodeName != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeName != nil {
			qrNodeName = *o.NodeName
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUID != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUID != nil {
			qrNodeUUID = *o.NodeUUID
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param start_time
		var qrStartTime string

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("start_time", qStartTime); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamMetroclusterOperationCollectionGet binds the parameter fields
func (o *MetroclusterOperationCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamMetroclusterOperationCollectionGet binds the parameter order_by
func (o *MetroclusterOperationCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
