load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "manager",
    srcs = [
        "doc.go",
        "internal.go",
        "manager.go",
    ],
    importmap = "github.com/konveyor/forklift-controller/vendor/sigs.k8s.io/controller-runtime/pkg/manager",
    importpath = "sigs.k8s.io/controller-runtime/pkg/manager",
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/go-logr/logr",
        "//vendor/github.com/prometheus/client_golang/prometheus/promhttp",
        "//vendor/k8s.io/apimachinery/pkg/api/meta",
        "//vendor/k8s.io/apimachinery/pkg/runtime",
        "//vendor/k8s.io/apimachinery/pkg/util/errors",
        "//vendor/k8s.io/client-go/kubernetes/scheme",
        "//vendor/k8s.io/client-go/rest",
        "//vendor/k8s.io/client-go/tools/leaderelection",
        "//vendor/k8s.io/client-go/tools/leaderelection/resourcelock",
        "//vendor/k8s.io/client-go/tools/record",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/cache",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/client",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/client/apiutil",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/healthz",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/internal/log",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/internal/recorder",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/leaderelection",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/log",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/metrics",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/recorder",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/runtime/inject",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/webhook",
    ],
)
