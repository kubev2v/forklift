// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NdmpState The various states of the NDMP state machine during a backup or restore workflow.
//
// swagger:model ndmp_state
type NdmpState string

func NewNdmpState(value NdmpState) *NdmpState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NdmpState.
func (m NdmpState) Pointer() *NdmpState {
	return &m
}

const (

	// NdmpStateActive captures enum value "active"
	NdmpStateActive NdmpState = "active"

	// NdmpStateConnected captures enum value "connected"
	NdmpStateConnected NdmpState = "connected"

	// NdmpStateHalted captures enum value "halted"
	NdmpStateHalted NdmpState = "halted"

	// NdmpStateIdle captures enum value "idle"
	NdmpStateIdle NdmpState = "idle"

	// NdmpStateListening captures enum value "listening"
	NdmpStateListening NdmpState = "listening"

	// NdmpStatePaused captures enum value "paused"
	NdmpStatePaused NdmpState = "paused"
)

// for schema
var ndmpStateEnum []interface{}

func init() {
	var res []NdmpState
	if err := json.Unmarshal([]byte(`["active","connected","halted","idle","listening","paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ndmpStateEnum = append(ndmpStateEnum, v)
	}
}

func (m NdmpState) validateNdmpStateEnum(path, location string, value NdmpState) error {
	if err := validate.EnumCase(path, location, value, ndmpStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ndmp state
func (m NdmpState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNdmpStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ndmp state based on context it is used
func (m NdmpState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
