#This script configures static IP settings on legacy Windows network interfaces
#based on input that maps MAC addresses to IP configuration details.
#Input string will be added to the script while creating the virt-v2v pod
#Input string format: MAC:ip:IP,Gateway,Prefix,DNS1,DNS2

# Input string
$inputString = "{{.InputString}}"


function Convert-PrefixToMask($prefix) {
    $bin = ("1" * $prefix).PadRight(32, "0")
    $mask = ""
    for ($i = 0; $i -lt 32; $i += 8) {
        $chunk = $bin.Substring($i, 8)
        $num = [Convert]::ToInt32($chunk, 2)
        if ($mask -ne "") {
            $mask = $mask + "."
        }
        $mask = $mask + $num
    }
    return $mask
}

# Split entries by '_'
$entries = $inputString.Split("_")

# Extract parts
foreach ($entry in $entries) {
    if ($entry -match "^([0-9A-Fa-f:\-]+):ip:([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)$") {
        $mac = $matches[1]
        $mac = $mac.ToUpper()
        $mac = $mac.Replace(":", "-")
        $ip = $matches[2]
        $gw = $matches[3]
        $prefix = [int]$matches[4]
        $dns1 = $matches[5]
        $dns2 = $matches[6]
        $mask = Convert-PrefixToMask $prefix

        Write-Host "Searching for MAC: $mac`n"

        $adapters = Get-WmiObject Win32_NetworkAdapter
        $adapter = $null

        foreach ($a in $adapters) {
            if ($a.MACAddress -and $a.NetConnectionID) {
                $aMac = $a.MACAddress.ToUpper().Replace(":", "-")
                if ($aMac -eq $mac) {
                    $adapter = $a
                    break
                }
            }
        }

        if ($adapter -eq $null) {
            Write-Warning "Adapter with MAC $mac not found!`n"
            exit 1
        }

        $iface = $adapter.NetConnectionID
        Write-Host "Using interface: $iface`n"

       $cmd = "netsh interface ip set address name=`"$iface`" static $ip $mask $gw"
       # Use WScript.Shell COM object to run netsh commands:
       # - The '0' parameter hides the command window (runs silently)
       # - The '$true' parameter ensures the script waits for the command to finish before continuing
       $wshell = New-Object -ComObject WScript.Shell
       $wshell.Run($cmd, 0, $true)

       $cmd = "netsh interface ip set dns name=`"$iface`" static $dns1"
       $wshell.Run($cmd, 0, $true)
        
        if ($dns2 -ne "") {
            $cmd = "netsh interface ip add dns name=`"$iface`" $dns2 index=2"
            $wshell.Run($cmd, 0, $true)
        } 
        
        Write-Host "IP configuration applied`n"
    }
    else {
        Write-Warning "Input string format is invalid`n"
    }
}

