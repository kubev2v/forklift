// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCifsShareCollectionGetParams creates a new CifsShareCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCifsShareCollectionGetParams() *CifsShareCollectionGetParams {
	return &CifsShareCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCifsShareCollectionGetParamsWithTimeout creates a new CifsShareCollectionGetParams object
// with the ability to set a timeout on a request.
func NewCifsShareCollectionGetParamsWithTimeout(timeout time.Duration) *CifsShareCollectionGetParams {
	return &CifsShareCollectionGetParams{
		timeout: timeout,
	}
}

// NewCifsShareCollectionGetParamsWithContext creates a new CifsShareCollectionGetParams object
// with the ability to set a context for a request.
func NewCifsShareCollectionGetParamsWithContext(ctx context.Context) *CifsShareCollectionGetParams {
	return &CifsShareCollectionGetParams{
		Context: ctx,
	}
}

// NewCifsShareCollectionGetParamsWithHTTPClient creates a new CifsShareCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewCifsShareCollectionGetParamsWithHTTPClient(client *http.Client) *CifsShareCollectionGetParams {
	return &CifsShareCollectionGetParams{
		HTTPClient: client,
	}
}

/*
CifsShareCollectionGetParams contains all the parameters to send to the API endpoint

	for the cifs share collection get operation.

	Typically these are written to a http.Request.
*/
type CifsShareCollectionGetParams struct {

	/* AccessBasedEnumeration.

	   Filter by access_based_enumeration
	*/
	AccessBasedEnumeration *bool

	/* AclsPermission.

	   Filter by acls.permission
	*/
	AclsPermission *string

	/* AclsType.

	   Filter by acls.type
	*/
	AclsType *string

	/* AclsUserOrGroup.

	   Filter by acls.user_or_group
	*/
	AclsUserOrGroup *string

	/* AllowUnencryptedAccess.

	   Filter by allow_unencrypted_access
	*/
	AllowUnencryptedAccess *bool

	/* ChangeNotify.

	   Filter by change_notify
	*/
	ChangeNotify *bool

	/* Comment.

	   Filter by comment
	*/
	Comment *string

	/* ContinuouslyAvailable.

	   Filter by continuously_available
	*/
	ContinuouslyAvailable *bool

	/* DirUmask.

	   Filter by dir_umask
	*/
	DirUmask *int64

	/* Encryption.

	   Filter by encryption
	*/
	Encryption *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* FileUmask.

	   Filter by file_umask
	*/
	FileUmask *int64

	/* ForceGroupForCreate.

	   Filter by force_group_for_create
	*/
	ForceGroupForCreate *string

	/* HomeDirectory.

	   Filter by home_directory
	*/
	HomeDirectory *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	Name *string

	/* NamespaceCaching.

	   Filter by namespace_caching
	*/
	NamespaceCaching *bool

	/* NoStrictSecurity.

	   Filter by no_strict_security
	*/
	NoStrictSecurity *bool

	/* OfflineFiles.

	   Filter by offline_files
	*/
	OfflineFiles *string

	/* Oplocks.

	   Filter by oplocks
	*/
	Oplocks *bool

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* Path.

	   Filter by path
	*/
	Path *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* ShowSnapshot.

	   Filter by show_snapshot
	*/
	ShowSnapshot *bool

	/* SvmName.

	   Filter by svm.name
	*/
	SvmName *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SvmUUID *string

	/* UnixSymlink.

	   Filter by unix_symlink
	*/
	UnixSymlink *string

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeName *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUID *string

	/* VscanProfile.

	   Filter by vscan_profile
	*/
	VscanProfile *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cifs share collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CifsShareCollectionGetParams) WithDefaults() *CifsShareCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cifs share collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CifsShareCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := CifsShareCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithTimeout(timeout time.Duration) *CifsShareCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithContext(ctx context.Context) *CifsShareCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithHTTPClient(client *http.Client) *CifsShareCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessBasedEnumeration adds the accessBasedEnumeration to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithAccessBasedEnumeration(accessBasedEnumeration *bool) *CifsShareCollectionGetParams {
	o.SetAccessBasedEnumeration(accessBasedEnumeration)
	return o
}

// SetAccessBasedEnumeration adds the accessBasedEnumeration to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetAccessBasedEnumeration(accessBasedEnumeration *bool) {
	o.AccessBasedEnumeration = accessBasedEnumeration
}

// WithAclsPermission adds the aclsPermission to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithAclsPermission(aclsPermission *string) *CifsShareCollectionGetParams {
	o.SetAclsPermission(aclsPermission)
	return o
}

// SetAclsPermission adds the aclsPermission to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetAclsPermission(aclsPermission *string) {
	o.AclsPermission = aclsPermission
}

// WithAclsType adds the aclsType to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithAclsType(aclsType *string) *CifsShareCollectionGetParams {
	o.SetAclsType(aclsType)
	return o
}

// SetAclsType adds the aclsType to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetAclsType(aclsType *string) {
	o.AclsType = aclsType
}

// WithAclsUserOrGroup adds the aclsUserOrGroup to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithAclsUserOrGroup(aclsUserOrGroup *string) *CifsShareCollectionGetParams {
	o.SetAclsUserOrGroup(aclsUserOrGroup)
	return o
}

// SetAclsUserOrGroup adds the aclsUserOrGroup to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetAclsUserOrGroup(aclsUserOrGroup *string) {
	o.AclsUserOrGroup = aclsUserOrGroup
}

// WithAllowUnencryptedAccess adds the allowUnencryptedAccess to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithAllowUnencryptedAccess(allowUnencryptedAccess *bool) *CifsShareCollectionGetParams {
	o.SetAllowUnencryptedAccess(allowUnencryptedAccess)
	return o
}

// SetAllowUnencryptedAccess adds the allowUnencryptedAccess to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetAllowUnencryptedAccess(allowUnencryptedAccess *bool) {
	o.AllowUnencryptedAccess = allowUnencryptedAccess
}

// WithChangeNotify adds the changeNotify to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithChangeNotify(changeNotify *bool) *CifsShareCollectionGetParams {
	o.SetChangeNotify(changeNotify)
	return o
}

// SetChangeNotify adds the changeNotify to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetChangeNotify(changeNotify *bool) {
	o.ChangeNotify = changeNotify
}

// WithComment adds the comment to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithComment(comment *string) *CifsShareCollectionGetParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithContinuouslyAvailable adds the continuouslyAvailable to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithContinuouslyAvailable(continuouslyAvailable *bool) *CifsShareCollectionGetParams {
	o.SetContinuouslyAvailable(continuouslyAvailable)
	return o
}

// SetContinuouslyAvailable adds the continuouslyAvailable to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetContinuouslyAvailable(continuouslyAvailable *bool) {
	o.ContinuouslyAvailable = continuouslyAvailable
}

// WithDirUmask adds the dirUmask to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithDirUmask(dirUmask *int64) *CifsShareCollectionGetParams {
	o.SetDirUmask(dirUmask)
	return o
}

// SetDirUmask adds the dirUmask to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetDirUmask(dirUmask *int64) {
	o.DirUmask = dirUmask
}

// WithEncryption adds the encryption to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithEncryption(encryption *bool) *CifsShareCollectionGetParams {
	o.SetEncryption(encryption)
	return o
}

// SetEncryption adds the encryption to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetEncryption(encryption *bool) {
	o.Encryption = encryption
}

// WithFields adds the fields to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithFields(fields []string) *CifsShareCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithFileUmask adds the fileUmask to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithFileUmask(fileUmask *int64) *CifsShareCollectionGetParams {
	o.SetFileUmask(fileUmask)
	return o
}

// SetFileUmask adds the fileUmask to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetFileUmask(fileUmask *int64) {
	o.FileUmask = fileUmask
}

// WithForceGroupForCreate adds the forceGroupForCreate to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithForceGroupForCreate(forceGroupForCreate *string) *CifsShareCollectionGetParams {
	o.SetForceGroupForCreate(forceGroupForCreate)
	return o
}

// SetForceGroupForCreate adds the forceGroupForCreate to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetForceGroupForCreate(forceGroupForCreate *string) {
	o.ForceGroupForCreate = forceGroupForCreate
}

// WithHomeDirectory adds the homeDirectory to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithHomeDirectory(homeDirectory *bool) *CifsShareCollectionGetParams {
	o.SetHomeDirectory(homeDirectory)
	return o
}

// SetHomeDirectory adds the homeDirectory to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetHomeDirectory(homeDirectory *bool) {
	o.HomeDirectory = homeDirectory
}

// WithMaxRecords adds the maxRecords to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithMaxRecords(maxRecords *int64) *CifsShareCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithName adds the name to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithName(name *string) *CifsShareCollectionGetParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetName(name *string) {
	o.Name = name
}

// WithNamespaceCaching adds the namespaceCaching to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithNamespaceCaching(namespaceCaching *bool) *CifsShareCollectionGetParams {
	o.SetNamespaceCaching(namespaceCaching)
	return o
}

// SetNamespaceCaching adds the namespaceCaching to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetNamespaceCaching(namespaceCaching *bool) {
	o.NamespaceCaching = namespaceCaching
}

// WithNoStrictSecurity adds the noStrictSecurity to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithNoStrictSecurity(noStrictSecurity *bool) *CifsShareCollectionGetParams {
	o.SetNoStrictSecurity(noStrictSecurity)
	return o
}

// SetNoStrictSecurity adds the noStrictSecurity to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetNoStrictSecurity(noStrictSecurity *bool) {
	o.NoStrictSecurity = noStrictSecurity
}

// WithOfflineFiles adds the offlineFiles to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithOfflineFiles(offlineFiles *string) *CifsShareCollectionGetParams {
	o.SetOfflineFiles(offlineFiles)
	return o
}

// SetOfflineFiles adds the offlineFiles to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetOfflineFiles(offlineFiles *string) {
	o.OfflineFiles = offlineFiles
}

// WithOplocks adds the oplocks to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithOplocks(oplocks *bool) *CifsShareCollectionGetParams {
	o.SetOplocks(oplocks)
	return o
}

// SetOplocks adds the oplocks to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetOplocks(oplocks *bool) {
	o.Oplocks = oplocks
}

// WithOrderBy adds the orderBy to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithOrderBy(orderBy []string) *CifsShareCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPath adds the path to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithPath(path *string) *CifsShareCollectionGetParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetPath(path *string) {
	o.Path = path
}

// WithReturnRecords adds the returnRecords to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithReturnRecords(returnRecords *bool) *CifsShareCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *CifsShareCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithShowSnapshot adds the showSnapshot to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithShowSnapshot(showSnapshot *bool) *CifsShareCollectionGetParams {
	o.SetShowSnapshot(showSnapshot)
	return o
}

// SetShowSnapshot adds the showSnapshot to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetShowSnapshot(showSnapshot *bool) {
	o.ShowSnapshot = showSnapshot
}

// WithSvmName adds the svmName to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithSvmName(svmName *string) *CifsShareCollectionGetParams {
	o.SetSvmName(svmName)
	return o
}

// SetSvmName adds the svmName to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetSvmName(svmName *string) {
	o.SvmName = svmName
}

// WithSvmUUID adds the svmUUID to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithSvmUUID(svmUUID *string) *CifsShareCollectionGetParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetSvmUUID(svmUUID *string) {
	o.SvmUUID = svmUUID
}

// WithUnixSymlink adds the unixSymlink to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithUnixSymlink(unixSymlink *string) *CifsShareCollectionGetParams {
	o.SetUnixSymlink(unixSymlink)
	return o
}

// SetUnixSymlink adds the unixSymlink to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetUnixSymlink(unixSymlink *string) {
	o.UnixSymlink = unixSymlink
}

// WithVolumeName adds the volumeName to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithVolumeName(volumeName *string) *CifsShareCollectionGetParams {
	o.SetVolumeName(volumeName)
	return o
}

// SetVolumeName adds the volumeName to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetVolumeName(volumeName *string) {
	o.VolumeName = volumeName
}

// WithVolumeUUID adds the volumeUUID to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithVolumeUUID(volumeUUID *string) *CifsShareCollectionGetParams {
	o.SetVolumeUUID(volumeUUID)
	return o
}

// SetVolumeUUID adds the volumeUuid to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetVolumeUUID(volumeUUID *string) {
	o.VolumeUUID = volumeUUID
}

// WithVscanProfile adds the vscanProfile to the cifs share collection get params
func (o *CifsShareCollectionGetParams) WithVscanProfile(vscanProfile *string) *CifsShareCollectionGetParams {
	o.SetVscanProfile(vscanProfile)
	return o
}

// SetVscanProfile adds the vscanProfile to the cifs share collection get params
func (o *CifsShareCollectionGetParams) SetVscanProfile(vscanProfile *string) {
	o.VscanProfile = vscanProfile
}

// WriteToRequest writes these params to a swagger request
func (o *CifsShareCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessBasedEnumeration != nil {

		// query param access_based_enumeration
		var qrAccessBasedEnumeration bool

		if o.AccessBasedEnumeration != nil {
			qrAccessBasedEnumeration = *o.AccessBasedEnumeration
		}
		qAccessBasedEnumeration := swag.FormatBool(qrAccessBasedEnumeration)
		if qAccessBasedEnumeration != "" {

			if err := r.SetQueryParam("access_based_enumeration", qAccessBasedEnumeration); err != nil {
				return err
			}
		}
	}

	if o.AclsPermission != nil {

		// query param acls.permission
		var qrAclsPermission string

		if o.AclsPermission != nil {
			qrAclsPermission = *o.AclsPermission
		}
		qAclsPermission := qrAclsPermission
		if qAclsPermission != "" {

			if err := r.SetQueryParam("acls.permission", qAclsPermission); err != nil {
				return err
			}
		}
	}

	if o.AclsType != nil {

		// query param acls.type
		var qrAclsType string

		if o.AclsType != nil {
			qrAclsType = *o.AclsType
		}
		qAclsType := qrAclsType
		if qAclsType != "" {

			if err := r.SetQueryParam("acls.type", qAclsType); err != nil {
				return err
			}
		}
	}

	if o.AclsUserOrGroup != nil {

		// query param acls.user_or_group
		var qrAclsUserOrGroup string

		if o.AclsUserOrGroup != nil {
			qrAclsUserOrGroup = *o.AclsUserOrGroup
		}
		qAclsUserOrGroup := qrAclsUserOrGroup
		if qAclsUserOrGroup != "" {

			if err := r.SetQueryParam("acls.user_or_group", qAclsUserOrGroup); err != nil {
				return err
			}
		}
	}

	if o.AllowUnencryptedAccess != nil {

		// query param allow_unencrypted_access
		var qrAllowUnencryptedAccess bool

		if o.AllowUnencryptedAccess != nil {
			qrAllowUnencryptedAccess = *o.AllowUnencryptedAccess
		}
		qAllowUnencryptedAccess := swag.FormatBool(qrAllowUnencryptedAccess)
		if qAllowUnencryptedAccess != "" {

			if err := r.SetQueryParam("allow_unencrypted_access", qAllowUnencryptedAccess); err != nil {
				return err
			}
		}
	}

	if o.ChangeNotify != nil {

		// query param change_notify
		var qrChangeNotify bool

		if o.ChangeNotify != nil {
			qrChangeNotify = *o.ChangeNotify
		}
		qChangeNotify := swag.FormatBool(qrChangeNotify)
		if qChangeNotify != "" {

			if err := r.SetQueryParam("change_notify", qChangeNotify); err != nil {
				return err
			}
		}
	}

	if o.Comment != nil {

		// query param comment
		var qrComment string

		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.ContinuouslyAvailable != nil {

		// query param continuously_available
		var qrContinuouslyAvailable bool

		if o.ContinuouslyAvailable != nil {
			qrContinuouslyAvailable = *o.ContinuouslyAvailable
		}
		qContinuouslyAvailable := swag.FormatBool(qrContinuouslyAvailable)
		if qContinuouslyAvailable != "" {

			if err := r.SetQueryParam("continuously_available", qContinuouslyAvailable); err != nil {
				return err
			}
		}
	}

	if o.DirUmask != nil {

		// query param dir_umask
		var qrDirUmask int64

		if o.DirUmask != nil {
			qrDirUmask = *o.DirUmask
		}
		qDirUmask := swag.FormatInt64(qrDirUmask)
		if qDirUmask != "" {

			if err := r.SetQueryParam("dir_umask", qDirUmask); err != nil {
				return err
			}
		}
	}

	if o.Encryption != nil {

		// query param encryption
		var qrEncryption bool

		if o.Encryption != nil {
			qrEncryption = *o.Encryption
		}
		qEncryption := swag.FormatBool(qrEncryption)
		if qEncryption != "" {

			if err := r.SetQueryParam("encryption", qEncryption); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FileUmask != nil {

		// query param file_umask
		var qrFileUmask int64

		if o.FileUmask != nil {
			qrFileUmask = *o.FileUmask
		}
		qFileUmask := swag.FormatInt64(qrFileUmask)
		if qFileUmask != "" {

			if err := r.SetQueryParam("file_umask", qFileUmask); err != nil {
				return err
			}
		}
	}

	if o.ForceGroupForCreate != nil {

		// query param force_group_for_create
		var qrForceGroupForCreate string

		if o.ForceGroupForCreate != nil {
			qrForceGroupForCreate = *o.ForceGroupForCreate
		}
		qForceGroupForCreate := qrForceGroupForCreate
		if qForceGroupForCreate != "" {

			if err := r.SetQueryParam("force_group_for_create", qForceGroupForCreate); err != nil {
				return err
			}
		}
	}

	if o.HomeDirectory != nil {

		// query param home_directory
		var qrHomeDirectory bool

		if o.HomeDirectory != nil {
			qrHomeDirectory = *o.HomeDirectory
		}
		qHomeDirectory := swag.FormatBool(qrHomeDirectory)
		if qHomeDirectory != "" {

			if err := r.SetQueryParam("home_directory", qHomeDirectory); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NamespaceCaching != nil {

		// query param namespace_caching
		var qrNamespaceCaching bool

		if o.NamespaceCaching != nil {
			qrNamespaceCaching = *o.NamespaceCaching
		}
		qNamespaceCaching := swag.FormatBool(qrNamespaceCaching)
		if qNamespaceCaching != "" {

			if err := r.SetQueryParam("namespace_caching", qNamespaceCaching); err != nil {
				return err
			}
		}
	}

	if o.NoStrictSecurity != nil {

		// query param no_strict_security
		var qrNoStrictSecurity bool

		if o.NoStrictSecurity != nil {
			qrNoStrictSecurity = *o.NoStrictSecurity
		}
		qNoStrictSecurity := swag.FormatBool(qrNoStrictSecurity)
		if qNoStrictSecurity != "" {

			if err := r.SetQueryParam("no_strict_security", qNoStrictSecurity); err != nil {
				return err
			}
		}
	}

	if o.OfflineFiles != nil {

		// query param offline_files
		var qrOfflineFiles string

		if o.OfflineFiles != nil {
			qrOfflineFiles = *o.OfflineFiles
		}
		qOfflineFiles := qrOfflineFiles
		if qOfflineFiles != "" {

			if err := r.SetQueryParam("offline_files", qOfflineFiles); err != nil {
				return err
			}
		}
	}

	if o.Oplocks != nil {

		// query param oplocks
		var qrOplocks bool

		if o.Oplocks != nil {
			qrOplocks = *o.Oplocks
		}
		qOplocks := swag.FormatBool(qrOplocks)
		if qOplocks != "" {

			if err := r.SetQueryParam("oplocks", qOplocks); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.Path != nil {

		// query param path
		var qrPath string

		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ShowSnapshot != nil {

		// query param show_snapshot
		var qrShowSnapshot bool

		if o.ShowSnapshot != nil {
			qrShowSnapshot = *o.ShowSnapshot
		}
		qShowSnapshot := swag.FormatBool(qrShowSnapshot)
		if qShowSnapshot != "" {

			if err := r.SetQueryParam("show_snapshot", qShowSnapshot); err != nil {
				return err
			}
		}
	}

	if o.SvmName != nil {

		// query param svm.name
		var qrSvmName string

		if o.SvmName != nil {
			qrSvmName = *o.SvmName
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SvmUUID != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SvmUUID != nil {
			qrSvmUUID = *o.SvmUUID
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UnixSymlink != nil {

		// query param unix_symlink
		var qrUnixSymlink string

		if o.UnixSymlink != nil {
			qrUnixSymlink = *o.UnixSymlink
		}
		qUnixSymlink := qrUnixSymlink
		if qUnixSymlink != "" {

			if err := r.SetQueryParam("unix_symlink", qUnixSymlink); err != nil {
				return err
			}
		}
	}

	if o.VolumeName != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeName != nil {
			qrVolumeName = *o.VolumeName
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUID != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUID != nil {
			qrVolumeUUID = *o.VolumeUUID
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if o.VscanProfile != nil {

		// query param vscan_profile
		var qrVscanProfile string

		if o.VscanProfile != nil {
			qrVscanProfile = *o.VscanProfile
		}
		qVscanProfile := qrVscanProfile
		if qVscanProfile != "" {

			if err := r.SetQueryParam("vscan_profile", qVscanProfile); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCifsShareCollectionGet binds the parameter fields
func (o *CifsShareCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamCifsShareCollectionGet binds the parameter order_by
func (o *CifsShareCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
