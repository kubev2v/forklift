load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_image",
    "container_push",
)

genrule(
    name = "kustomize_bin",
    srcs = ["@kustomize//file"],
    outs = ["kustomize"],
    cmd = "tar -C $(@D) -xf $(location @kustomize//file)",
)

# OPERATOR
# 1. Build the oprator image with ansible dependencies and with roles.

container_image(
    name = "forklift-operator-requirements",
    base = "@ansible-operator-image//image",
    cmd = "ansible-galaxy collection install -r /opt/ansible/requirements.yml && chmod -R ug+rwx /opt/ansible/.ansible",
    directory = "/opt/ansible/",
    files = ["requirements.yml"],
)

container_image(
    name = "forklift-operator-watches",
    base = ":forklift-operator-requirements",
    directory = "/opt/ansible/",
    files = ["watches.yaml"],
)

container_image(
    name = "forklift-operator-roles",
    base = ":forklift-operator-watches",
    directory = "/opt/ansible/",
    files = ["roles"],
)

container_image(
    name = "forklift-operator-image",
    base = ":forklift-operator-roles",
    user = "1001",
    visibility = ["//visibility:public"],
)

# BUNDLE
# 1. Change to the operator dir
# 2. Get the current date with which the operator will be built
# 3. Build the config files with kustomize
# 4. Substitute env variables in the generated config
# 5. Generate the bundle from the config
# 6. Build the image with the bundle

genrule(
    name = "bundle",
    srcs = [
        ":kustomize_bin",
        "@operator-sdk//file",
    ] + glob(["**/*"]),
    outs = [
        # Can be replaced with just dir 'bundle'
        "bundle/manifests/forklift.konveyor.io_forkliftcontrollers.yaml",
        "bundle/manifests/forklift.konveyor.io_hooks.yaml",
        "bundle/manifests/forklift.konveyor.io_hosts.yaml",
        "bundle/manifests/forklift.konveyor.io_migrations.yaml",
        "bundle/manifests/forklift.konveyor.io_networkmaps.yaml",
        "bundle/manifests/forklift.konveyor.io_plans.yaml",
        "bundle/manifests/forklift.konveyor.io_providers.yaml",
        "bundle/manifests/forklift.konveyor.io_storagemaps.yaml",
        "bundle/manifests/forklift.konveyor.io_ovirtvolumepopulators.yaml",
        "bundle/manifests/forklift.konveyor.io_openstackvolumepopulators.yaml",
        "bundle/manifests/forklift-operator.clusterserviceversion.yaml",
        "bundle/metadata/annotations.yaml",
        "bundle/tests/scorecard/config.yaml",
    ],
    # The `operator-sdk` needs to work in the operator dir

    # The bazel is running the build in sandbox and linkes all the sources to it.
    # The kustomize has restrictions for symlinks outside of the project scope, for this we use the ignore of LoadRestrictionsNone.
    cmd = """
        cd operator;
        export DATE=$$(date +%Y-%m-%dT%H:%M:%SZ);
        ../$(location :kustomize_bin) build config/manifests --load_restrictor LoadRestrictionsNone | envsubst | ../$(location @operator-sdk//file) generate bundle -q --overwrite --extra-service-accounts forklift-controller,forklift-api --version $${VERSION} --output-dir ../$(RULEDIR)/bundle --channels=$${CHANNELS} --default-channel=$${DEFAULT_CHANNEL}
    """,
)

container_image(
    name = "forklift-operator-bundle-manifests",
    base = "@ubi9-minimal//image",
    directory = "/manifests/",
    files = [
        ":bundle/manifests/forklift.konveyor.io_forkliftcontrollers.yaml",
        ":bundle/manifests/forklift.konveyor.io_hooks.yaml",
        ":bundle/manifests/forklift.konveyor.io_hosts.yaml",
        ":bundle/manifests/forklift.konveyor.io_migrations.yaml",
        ":bundle/manifests/forklift.konveyor.io_networkmaps.yaml",
        ":bundle/manifests/forklift.konveyor.io_openstackvolumepopulators.yaml",
        ":bundle/manifests/forklift.konveyor.io_ovirtvolumepopulators.yaml",
        ":bundle/manifests/forklift.konveyor.io_plans.yaml",
        ":bundle/manifests/forklift.konveyor.io_providers.yaml",
        ":bundle/manifests/forklift.konveyor.io_storagemaps.yaml",
        ":bundle/manifests/forklift-operator.clusterserviceversion.yaml",
    ],
)

container_image(
    name = "forklift-operator-bundle-metadata",
    base = ":forklift-operator-bundle-manifests",
    directory = "/metadata/",
    files = ["bundle/metadata/annotations.yaml"],
)

container_image(
    name = "forklift-operator-bundle-tests",
    base = ":forklift-operator-bundle-metadata",
    directory = "/tests/scorecard/",
    files = [":bundle/tests/scorecard/config.yaml"],
)

container_image(
    name = "forklift-operator-bundle-image",
    base = ":forklift-operator-bundle-tests",
    labels = {
        # Core bundle labels.
        "operators.operatorframework.io.bundle.mediatype.v1": "registry+v1",
        "operators.operatorframework.io.bundle.manifests.v1": "manifests/",
        "operators.operatorframework.io.bundle.metadata.v1": "metadata/",
        "operators.operatorframework.io.bundle.package.v1": "forklift-operator",
        # The channels need to be changed during release
        "operators.operatorframework.io.bundle.channels.v1": "development",
        "operators.operatorframework.io.bundle.channel.default.v1": "development",
        "operators.operatorframework.io.metrics.builder": "operator-sdk-v1.22.0",
        "operators.operatorframework.io.metrics.mediatype.v1": "metrics+v1",
        "operators.operatorframework.io.metrics.project_layout": "ansible.sdk.operatorframework.io/v1",
        # Labels for testing.
        "operators.operatorframework.io.test.mediatype.v1": "scorecard+v1",
        "operators.operatorframework.io.test.config.v1": "tests/scorecard/",
    },
    user = "1001",
    visibility = ["//visibility:public"],
)

# INDEX
# 1. Substitute env variables in catalog/operator.yml
# 2. Append the bundle render to the catalog/operator.yml
# 3. Build the opm image which serves generated catalog

genrule(
    name = "opm_render",
    srcs = [
        "@opm//file",
        "catalog/operator.yml",
    ],
    outs = ["operator.yaml"],
    cmd = """
        CONTAINER_RUNTIME="$$(basename $${CONTAINER_CMD:-$$(command -v podman || command -v docker)})"
        if [ ! -z "$${XDG_RUNTIME_DIR}" ]; then
          PODMAN_AUTH_FILE="$${XDG_RUNTIME_DIR}/containers/auth.json"
          if [ "$${CONTAINER_RUNTIME}" == "podman" ]; then
            if [ -e "$${PODMAN_AUTH_FILE}" ]; then
              DOCKER_CONFIG="$$(mktemp -d)"
              DOCKER_AUTH_FILE="$${DOCKER_CONFIG}/config.json"
              cp "$${PODMAN_AUTH_FILE}" "$${DOCKER_AUTH_FILE}"
              export DOCKER_CONFIG
            else
              unset DOCKER_CONFIG
            fi
          fi
        fi
        OPERATOR_BUNDLE_IMAGE="$${REGISTRY:-quay.io}/$${REGISTRY_ORG:-}$${REGISTRY_ORG:+/}forklift-operator-bundle:$${REGISTRY_TAG:-devel}"
        cat $(location catalog/operator.yml) | envsubst > $@
        $(location @opm//file) render "$${OPERATOR_BUNDLE_IMAGE}" -o yaml $${OPM_OPTS:-} >> $@
        if [ "$${CONTAINER_RUNTIME}" == "podman" && ! -z "$${DOCKER_CONFIG}" ]; then
          rm -rf "$${DOCKER_CONFIG}"
        fi
    """,
)

container_image(
    name = "forklift-operator-index-database",
    base = "@opm-image//image",
    directory = "/configs",
    files = [":operator.yaml"],
)

container_image(
    name = "forklift-operator-index-image",
    base = ":forklift-operator-index-database",
    cmd = [
        "serve",
        "/configs",
    ],
    entrypoint = ["/bin/opm"],
    labels = {
        "operators.operatorframework.io.index.configs.v1": "/configs",
    },
    user = "1001",
    visibility = ["//visibility:public"],
)
