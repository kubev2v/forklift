// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OnboardKeyManagerConfigurableStatus Indicates whether the Onboard Key Manager can be configured in the cluster.
//
// swagger:model onboard_key_manager_configurable_status
type OnboardKeyManagerConfigurableStatus struct {

	// Code corresponding to the status message. Returns a 0 if the Onboard Key Manager can be configured in the cluster.
	// Example: 65537300
	Code *int64 `json:"code,omitempty"`

	// Reason that Onboard Key Manager cannot be configured in the cluster.
	// Example: No platform support for volume encryption in following nodes - node1, node2.
	Message *string `json:"message,omitempty"`

	// Set to true if the Onboard Key Manager can be configured in the cluster.
	Supported *bool `json:"supported,omitempty"`
}

// Validate validates this onboard key manager configurable status
func (m *OnboardKeyManagerConfigurableStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this onboard key manager configurable status based on context it is used
func (m *OnboardKeyManagerConfigurableStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OnboardKeyManagerConfigurableStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnboardKeyManagerConfigurableStatus) UnmarshalBinary(b []byte) error {
	var res OnboardKeyManagerConfigurableStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
