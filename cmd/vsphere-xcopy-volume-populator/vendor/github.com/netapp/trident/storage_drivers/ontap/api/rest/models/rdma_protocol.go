// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RdmaProtocol rdma protocol
// Example: roce
//
// swagger:model rdma_protocol
type RdmaProtocol string

func NewRdmaProtocol(value RdmaProtocol) *RdmaProtocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RdmaProtocol.
func (m RdmaProtocol) Pointer() *RdmaProtocol {
	return &m
}

const (

	// RdmaProtocolRoce captures enum value "roce"
	RdmaProtocolRoce RdmaProtocol = "roce"
)

// for schema
var rdmaProtocolEnum []interface{}

func init() {
	var res []RdmaProtocol
	if err := json.Unmarshal([]byte(`["roce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rdmaProtocolEnum = append(rdmaProtocolEnum, v)
	}
}

func (m RdmaProtocol) validateRdmaProtocolEnum(path, location string, value RdmaProtocol) error {
	if err := validate.EnumCase(path, location, value, rdmaProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rdma protocol
func (m RdmaProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRdmaProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this rdma protocol based on context it is used
func (m RdmaProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
