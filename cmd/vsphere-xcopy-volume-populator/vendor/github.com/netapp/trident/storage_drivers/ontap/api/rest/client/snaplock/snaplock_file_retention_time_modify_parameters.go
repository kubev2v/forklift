// Code generated by go-swagger; DO NOT EDIT.

package snaplock

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// NewSnaplockFileRetentionTimeModifyParams creates a new SnaplockFileRetentionTimeModifyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSnaplockFileRetentionTimeModifyParams() *SnaplockFileRetentionTimeModifyParams {
	return &SnaplockFileRetentionTimeModifyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSnaplockFileRetentionTimeModifyParamsWithTimeout creates a new SnaplockFileRetentionTimeModifyParams object
// with the ability to set a timeout on a request.
func NewSnaplockFileRetentionTimeModifyParamsWithTimeout(timeout time.Duration) *SnaplockFileRetentionTimeModifyParams {
	return &SnaplockFileRetentionTimeModifyParams{
		timeout: timeout,
	}
}

// NewSnaplockFileRetentionTimeModifyParamsWithContext creates a new SnaplockFileRetentionTimeModifyParams object
// with the ability to set a context for a request.
func NewSnaplockFileRetentionTimeModifyParamsWithContext(ctx context.Context) *SnaplockFileRetentionTimeModifyParams {
	return &SnaplockFileRetentionTimeModifyParams{
		Context: ctx,
	}
}

// NewSnaplockFileRetentionTimeModifyParamsWithHTTPClient creates a new SnaplockFileRetentionTimeModifyParams object
// with the ability to set a custom HTTPClient for a request.
func NewSnaplockFileRetentionTimeModifyParamsWithHTTPClient(client *http.Client) *SnaplockFileRetentionTimeModifyParams {
	return &SnaplockFileRetentionTimeModifyParams{
		HTTPClient: client,
	}
}

/*
SnaplockFileRetentionTimeModifyParams contains all the parameters to send to the API endpoint

	for the snaplock file retention time modify operation.

	Typically these are written to a http.Request.
*/
type SnaplockFileRetentionTimeModifyParams struct {

	/* Info.

	   New retention time to be set.
	*/
	Info *models.SnaplockFileRetention

	/* Path.

	   Path of the file in the form "/\<dirpath\>/\<filename\>"
	*/
	Path string

	/* VolumeUUID.

	   Volume UUID
	*/
	VolumeUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the snaplock file retention time modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnaplockFileRetentionTimeModifyParams) WithDefaults() *SnaplockFileRetentionTimeModifyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the snaplock file retention time modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnaplockFileRetentionTimeModifyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) WithTimeout(timeout time.Duration) *SnaplockFileRetentionTimeModifyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) WithContext(ctx context.Context) *SnaplockFileRetentionTimeModifyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) WithHTTPClient(client *http.Client) *SnaplockFileRetentionTimeModifyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInfo adds the info to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) WithInfo(info *models.SnaplockFileRetention) *SnaplockFileRetentionTimeModifyParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) SetInfo(info *models.SnaplockFileRetention) {
	o.Info = info
}

// WithPath adds the path to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) WithPath(path string) *SnaplockFileRetentionTimeModifyParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) SetPath(path string) {
	o.Path = path
}

// WithVolumeUUID adds the volumeUUID to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) WithVolumeUUID(volumeUUID string) *SnaplockFileRetentionTimeModifyParams {
	o.SetVolumeUUID(volumeUUID)
	return o
}

// SetVolumeUUID adds the volumeUuid to the snaplock file retention time modify params
func (o *SnaplockFileRetentionTimeModifyParams) SetVolumeUUID(volumeUUID string) {
	o.VolumeUUID = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *SnaplockFileRetentionTimeModifyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Info != nil {
		if err := r.SetBodyParam(o.Info); err != nil {
			return err
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.Path); err != nil {
		return err
	}

	// path param volume.uuid
	if err := r.SetPathParam("volume.uuid", o.VolumeUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
