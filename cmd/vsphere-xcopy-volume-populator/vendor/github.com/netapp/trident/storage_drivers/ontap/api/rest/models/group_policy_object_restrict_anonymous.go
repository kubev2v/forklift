// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupPolicyObjectRestrictAnonymous group policy object restrict anonymous
//
// swagger:model group_policy_object_restrict_anonymous
type GroupPolicyObjectRestrictAnonymous struct {

	// Restrict anonymous access to shares and named pipes.
	AnonymousAccessToSharesAndNamedPipesRestricted *bool `json:"anonymous_access_to_shares_and_named_pipes_restricted,omitempty"`

	// Combined restriction for anonymous user.
	// Example: no_access
	// Enum: [no_restriction no_enumeration no_access]
	CombinedRestrictionForAnonymousUser *string `json:"combined_restriction_for_anonymous_user,omitempty"`

	// No enumeration of SAM accounts.
	NoEnumerationOfSamAccounts *bool `json:"no_enumeration_of_sam_accounts,omitempty"`

	// No enumeration of SAM accounts and shares.
	NoEnumerationOfSamAccountsAndShares *bool `json:"no_enumeration_of_sam_accounts_and_shares,omitempty"`
}

// Validate validates this group policy object restrict anonymous
func (m *GroupPolicyObjectRestrictAnonymous) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCombinedRestrictionForAnonymousUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var groupPolicyObjectRestrictAnonymousTypeCombinedRestrictionForAnonymousUserPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["no_restriction","no_enumeration","no_access"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupPolicyObjectRestrictAnonymousTypeCombinedRestrictionForAnonymousUserPropEnum = append(groupPolicyObjectRestrictAnonymousTypeCombinedRestrictionForAnonymousUserPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// group_policy_object_restrict_anonymous
	// GroupPolicyObjectRestrictAnonymous
	// combined_restriction_for_anonymous_user
	// CombinedRestrictionForAnonymousUser
	// no_restriction
	// END DEBUGGING
	// GroupPolicyObjectRestrictAnonymousCombinedRestrictionForAnonymousUserNoRestriction captures enum value "no_restriction"
	GroupPolicyObjectRestrictAnonymousCombinedRestrictionForAnonymousUserNoRestriction string = "no_restriction"

	// BEGIN DEBUGGING
	// group_policy_object_restrict_anonymous
	// GroupPolicyObjectRestrictAnonymous
	// combined_restriction_for_anonymous_user
	// CombinedRestrictionForAnonymousUser
	// no_enumeration
	// END DEBUGGING
	// GroupPolicyObjectRestrictAnonymousCombinedRestrictionForAnonymousUserNoEnumeration captures enum value "no_enumeration"
	GroupPolicyObjectRestrictAnonymousCombinedRestrictionForAnonymousUserNoEnumeration string = "no_enumeration"

	// BEGIN DEBUGGING
	// group_policy_object_restrict_anonymous
	// GroupPolicyObjectRestrictAnonymous
	// combined_restriction_for_anonymous_user
	// CombinedRestrictionForAnonymousUser
	// no_access
	// END DEBUGGING
	// GroupPolicyObjectRestrictAnonymousCombinedRestrictionForAnonymousUserNoAccess captures enum value "no_access"
	GroupPolicyObjectRestrictAnonymousCombinedRestrictionForAnonymousUserNoAccess string = "no_access"
)

// prop value enum
func (m *GroupPolicyObjectRestrictAnonymous) validateCombinedRestrictionForAnonymousUserEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupPolicyObjectRestrictAnonymousTypeCombinedRestrictionForAnonymousUserPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GroupPolicyObjectRestrictAnonymous) validateCombinedRestrictionForAnonymousUser(formats strfmt.Registry) error {
	if swag.IsZero(m.CombinedRestrictionForAnonymousUser) { // not required
		return nil
	}

	// value enum
	if err := m.validateCombinedRestrictionForAnonymousUserEnum("combined_restriction_for_anonymous_user", "body", *m.CombinedRestrictionForAnonymousUser); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this group policy object restrict anonymous based on context it is used
func (m *GroupPolicyObjectRestrictAnonymous) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupPolicyObjectRestrictAnonymous) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupPolicyObjectRestrictAnonymous) UnmarshalBinary(b []byte) error {
	var res GroupPolicyObjectRestrictAnonymous
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
