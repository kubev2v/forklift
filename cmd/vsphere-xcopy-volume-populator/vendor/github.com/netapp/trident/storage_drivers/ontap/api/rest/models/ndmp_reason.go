// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NdmpReason If the NDMP mover or data server is in the paused or halted state, then this property provides additional information for the state.
//
// swagger:model ndmp_reason
type NdmpReason string

func NewNdmpReason(value NdmpReason) *NdmpReason {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NdmpReason.
func (m NdmpReason) Pointer() *NdmpReason {
	return &m
}

const (

	// NdmpReasonAborted captures enum value "aborted"
	NdmpReasonAborted NdmpReason = "aborted"

	// NdmpReasonConnectionClosed captures enum value "connection_closed"
	NdmpReasonConnectionClosed NdmpReason = "connection_closed"

	// NdmpReasonConnectError captures enum value "connect_error"
	NdmpReasonConnectError NdmpReason = "connect_error"

	// NdmpReasonEndOfFile captures enum value "end_of_file"
	NdmpReasonEndOfFile NdmpReason = "end_of_file"

	// NdmpReasonEndOfMedia captures enum value "end_of_media"
	NdmpReasonEndOfMedia NdmpReason = "end_of_media"

	// NdmpReasonEndOfWindow captures enum value "end_of_window"
	NdmpReasonEndOfWindow NdmpReason = "end_of_window"

	// NdmpReasonInternalError captures enum value "internal_error"
	NdmpReasonInternalError NdmpReason = "internal_error"

	// NdmpReasonMediaError captures enum value "media_error"
	NdmpReasonMediaError NdmpReason = "media_error"

	// NdmpReasonNotAvailable captures enum value "not_available"
	NdmpReasonNotAvailable NdmpReason = "not_available"

	// NdmpReasonSeek captures enum value "seek"
	NdmpReasonSeek NdmpReason = "seek"

	// NdmpReasonSuccessful captures enum value "successful"
	NdmpReasonSuccessful NdmpReason = "successful"
)

// for schema
var ndmpReasonEnum []interface{}

func init() {
	var res []NdmpReason
	if err := json.Unmarshal([]byte(`["aborted","connection_closed","connect_error","end_of_file","end_of_media","end_of_window","internal_error","media_error","not_available","seek","successful"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ndmpReasonEnum = append(ndmpReasonEnum, v)
	}
}

func (m NdmpReason) validateNdmpReasonEnum(path, location string, value NdmpReason) error {
	if err := validate.EnumCase(path, location, value, ndmpReasonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ndmp reason
func (m NdmpReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNdmpReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ndmp reason based on context it is used
func (m NdmpReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
