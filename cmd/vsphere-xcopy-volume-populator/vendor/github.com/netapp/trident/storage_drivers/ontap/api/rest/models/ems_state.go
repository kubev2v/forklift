// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EmsState State of the event.
// Example: resolving
//
// swagger:model ems_state
type EmsState string

func NewEmsState(value EmsState) *EmsState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EmsState.
func (m EmsState) Pointer() *EmsState {
	return &m
}

const (

	// EmsStateOpened captures enum value "opened"
	EmsStateOpened EmsState = "opened"

	// EmsStateResolving captures enum value "resolving"
	EmsStateResolving EmsState = "resolving"

	// EmsStateResolved captures enum value "resolved"
	EmsStateResolved EmsState = "resolved"

	// EmsStateClosed captures enum value "closed"
	EmsStateClosed EmsState = "closed"
)

// for schema
var emsStateEnum []interface{}

func init() {
	var res []EmsState
	if err := json.Unmarshal([]byte(`["opened","resolving","resolved","closed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emsStateEnum = append(emsStateEnum, v)
	}
}

func (m EmsState) validateEmsStateEnum(path, location string, value EmsState) error {
	if err := validate.EnumCase(path, location, value, emsStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ems state
func (m EmsState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEmsStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ems state based on context it is used
func (m EmsState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
